<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>KenCochrane.net</title><link href="http://kencochrane.net/" rel="alternate"></link><link href="http://kencochrane.net/feeds/tag_djangozoom.atom.xml" rel="self"></link><id>http://kencochrane.net/</id><updated>2011-06-06T22:03:59-04:00</updated><entry><title>Django Hosting Roundup: (Ep.io vs Gondor.io vs DotCloud vs Heroku vs AppHosted vs DjangoZoom) Who wins?</title><link href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/" rel="alternate"></link><updated>2011-06-06T22:03:59-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-06-06:blog/2011/06/django-hosting-roundup-who-wins/</id><summary type="html">&lt;div class="section" id="updates"&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Updated 2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments below.&lt;/li&gt;
&lt;li&gt;Updated 1/26/2012: Updated Gondor.io with info from Donald Stufft.&lt;/li&gt;
&lt;li&gt;Updated 01/24/2012: changed gondor.io to include SSL support&lt;/li&gt;
&lt;li&gt;Updated 01/01/2012: Added Heroku and updated ep.io, gondor.io, and dotcloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;For the past 6 weeks I have been trying out all of the new django/python hosting services that are currently available today, and I have been writing about my experiences along the way. It only makes sense to conclude this series of articles with one last article comparing all of the services against each other. It is important to note that many of these services are still in development and aren't even available to the general public, so I'll try to keep this article up to date as these services change over time. With that said, don't take my word for it, go out and try all of these services on your own and find out which one you like the best, you won't be disappointed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quick-recap"&gt;
&lt;h2&gt;Quick Recap&lt;/h2&gt;
&lt;div class="section" id="ep-io"&gt;
&lt;h3&gt;ep.io&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;My Experiences with ep.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pretty solid offering, with a nice set of features and a decent price. Good set of documentation.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: Epio closed down on May 31st 2012 ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gondor-io"&gt;
&lt;h3&gt;gondor.io&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;My day in gondor.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Their website has a nice list of features that they expect to have once they officially launch, but most of those features aren't available yet. The documentation is a little light, but the service has a lot of potential.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dotcloud-com"&gt;
&lt;h3&gt;dotCloud.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;Deploying my Django application to dotcloud.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They have a ton of money ($10M), and with it, a ton of features. They are very developer friendly, but you need to be pretty technical, it isn't quite ready for beginners. Good set of documentation.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Full disclosure&lt;/strong&gt;: I now work for dotCloud]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apphosted-com"&gt;
&lt;h3&gt;AppHosted.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com Django Hosting Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built with security, stability and scalability on their mind from the beginning. They have a solid offering, and they look to be targeting enterprise customers who will pay more for that peace of mind.  They are currently lacking some key features, which I'm sure they will be adding soon.  Good set of documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="djangozoom-com"&gt;
&lt;h3&gt;DjangoZoom.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/djangozoom-com-review/"&gt;DjangoZoom.com Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built to be fast and easy to use, still missing some key features, but I'm sure they will be available by the time they go live. Decent amount of documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-com"&gt;
&lt;h3&gt;Heroku.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/"&gt;Developers guide for running django apps on Heroku&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Originally built as a Ruby on Rails service, they have now added support for python. The service is still in beta, but it has a lot of potential. It looks a lot like what dotCloud is offering, with the ability to run code from almost any language, and a ton of different add-ons for lots of different services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="awards"&gt;
&lt;h2&gt;Awards&lt;/h2&gt;
&lt;div class="section" id="fastest-deployments"&gt;
&lt;h3&gt;Fastest Deployments:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt; - Zoom is right, it doesn't take long to configure your application and have it up and running on their servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easiest-to-use"&gt;
&lt;h3&gt;Easiest To Use:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt; - No command line interface needed, just a web browser, a project in a git repo that it has access too, and a few questions answered and your app is up and running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-features"&gt;
&lt;h3&gt;Most Features:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dotcloud.com"&gt;dotCloud.com&lt;/a&gt; - They raised $10 Million, and they are spending it on hiring people, buying companies, and building services. They have a bunch of services currently and they don't plan on stopping, their roadmap has everything on it, and I think if you give them enough time they will eventually have a service for everything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-developer-friendly"&gt;
&lt;h3&gt;Most Developer Friendly:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dotcloud.com"&gt;dotCloud.com&lt;/a&gt; - They give lots of features without handcuffing the developer. They are the only company with full database and shell access. They do a good job of offering the same type of service a developer could get if they built it themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="best-overall-value"&gt;
&lt;h3&gt;Best Overall Value:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt; - This one is hard since most of the services don't have any pricing listed, but currently ep.io is in the lead, they offer reasonable prices with a nice Free tier. This allows developers to try out the service for FREE, as well as run smaller pet projects that they might not have tried before because they didn't want to pay for hosting. They have the second most features available, second to only dotCloud, and there service is pretty solid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easiest-project-setup"&gt;
&lt;h3&gt;Easiest Project Setup:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://apphosted.com"&gt;apphosted.com&lt;/a&gt; - Their goal was to make it real easy to get your project up onto their servers without having to change your project, and they did that, there was very little if any changes I needed to make in order to get my application up on their servers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="django-feature-hosting-matrix"&gt;
&lt;h2&gt;Django Feature Hosting Matrix&lt;/h2&gt;
&lt;p&gt;To make things easier when comparing all of the different services I have built this matrix with all of the information I compiled from each of the services. I don't know the answers for all services, but I'll update it when I find out those answers. If you know the answers feel free to post a comment to let me know.&lt;/p&gt;
&lt;p&gt;I have included all of the new django services as well as google app engine and webfaction.com, a tradition hosting service. This should make it a little easier to see how these new services compare to other hosting options.&lt;/p&gt;
&lt;iframe width='775' height='500' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0AtuyQoTrXCavdDdyQ1RCX29FcDhQeDgzMXp0NGpGeWc&amp;single=true&amp;gid=0&amp;output=html&amp;widget=true'&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="who-wins"&gt;
&lt;h2&gt;Who wins?&lt;/h2&gt;
&lt;p&gt;It is really hard to pick just one winner,  mainly because most of these services are still in beta and not quite finished yet. Also because each service is a little different, and it will depend on what you are trying to do. So, go out try them out, and let me know which one you picked.&lt;/p&gt;
&lt;p&gt;The real winner is us, the developers, and the python community in general. We now have a bunch of really cool services that will make our lives better, and that is awesome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you"&gt;
&lt;h2&gt;Thank you!&lt;/h2&gt;
&lt;p&gt;I want to thank all of the people who made these services, and gave me early access to their systems so that I could play around with them. I wish them the best of luck, and hope they all are really successful, and they are around for a long time.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="hosting"></category><category term="apphosted"></category><category term="python"></category><category term="deployment"></category><category term="dotcloud"></category><category term="epio"></category><category term="gondor"></category><category term="djangozoom"></category><category term="heroku"></category><category term="paas"></category></entry><entry><title>DjangoZoom.com Review</title><link href="http://kencochrane.net/blog/2011/06/djangozoom-com-review/" rel="alternate"></link><updated>2011-06-05T11:17:11-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-06-05:blog/2011/06/djangozoom-com-review/</id><summary type="html">&lt;p&gt;This is part five in my series on django hosting services. Previously, I looked at &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;dotcloud.com&lt;/a&gt; and now I'm looking at &lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;DjangoZoom.com is the brain child of Nate Aune and Shimon Rura and is based in Boston, Massachusetts. It was founded in 2010 at &lt;a class="reference external" href="http://startupweekend.org/"&gt;StartupWeekend Boston&lt;/a&gt; and was a finalist in the &lt;a class="reference external" href="http://www.masschallenge.org/"&gt;MassChallenge&lt;/a&gt;. Their office is in the &lt;a class="reference external" href="http://dogpatchlabs.com/"&gt;Dogpatch Labs&lt;/a&gt; space for startups in Cambridge, Massachusetts. They are currently still in a closed beta, but they were nice enough to send me an invite to check it out.&lt;/p&gt;
&lt;p&gt;Normally when I check out a service for the first time, I look over the documentation to see what it can do, and what it can't do, and what I need to do in order to get my app up and running. DjangoZoom has a nice collection of documents that help guide you through the process of getting your application up and running on their platform. You need to be logged in, in order to read the documents, so I won't be able to link to any documents here, but if you are lucky enough to get an invite to DjangoZoom, I would check out the documents first, they will make the process much easier. They answer most of the common questions that you will have, and if you can't find your answer you can send them a message and they are very fast to respond.&lt;/p&gt;
&lt;p&gt;After reading the documents I learned a few things. First off, DjangoZoom is a little different then the other services, all of the previous services that I have reviewed ep.io, dotcloud, apphosted, gondor.io, had a command line client that you use to push your application up onto their servers.&lt;/p&gt;
&lt;p&gt;DjangoZoom doesn't have a command line client at all, they only have a web based control panel that you use to install and configure your application. Also, instead of pushing your application code up on to their servers, they pull the code down from your code repository at build time. Most of the other services try and make it so that you can run any python/wsgi based application, where as DjangoZoom, is only supporting Django applications.&lt;/p&gt;
&lt;p&gt;Not having a command line client has it's pros and cons. The main advantage of not having a command line client is simplicity. No need to install anything on your machine in order to deploy your code, all you need is a web browser. You can deploy your code from anywhere you have an internet connection. Making the application deployment as easy as possible will open up their service to people that are less technical, and might not be comfortable installing a command line client and running commands. The disadvantages of using just a web based console is that you are limited to what you can do in a browser. This is going to be less and less of an issue going forward as web browsers are getting more and more powerful all of the time. Also, just because they only offer a web based console now, doesn't mean they can't add a command line client later.&lt;/p&gt;
&lt;p&gt;Just like all of the other reviews I'm going to test out the system by deploying my blog onto their system and see how it goes.  My blog is currently hosted on bitbucket.org which uses mercurial, and currently djangozoom.com only offers support for git. In order to use djangozoom.com I needed to make a fork of my blog and put it on github. You can find my fork here: &lt;a class="reference external" href="https://github.com/kencochrane/kencochrane_blog"&gt;https://github.com/kencochrane/kencochrane_blog&lt;/a&gt; . They recommend github for git hosting, but you can use just about any git repo that is publicly accessible. If you have a private git repo, and you are on github just add the user djangozoom as a collaborator on your project. If you aren't on github and you have a private repo, you can add their public key to your repo, and it will give them permission to access your git repository from their servers.&lt;/p&gt;
&lt;div class="section" id="install-process"&gt;
&lt;h2&gt;Install Process&lt;/h2&gt;
&lt;p&gt;Once I had my code up on github I needed to make a few changes in order for it to work correctly, nothing major just needed to make my settings.py file a little more standard, which was pretty typical for the other services as well. Now that I had that done, I was ready to login to DjangoZoom and setup my application. Registering and logging into DjangoZoom was pretty straight forward, it was the same process as most online services, so just about anyone could do it with their eyes closed.&lt;/p&gt;
&lt;p&gt;After I logged in, I was able to add my application, here are the steps that I took to get my application up and running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clicked on &amp;quot;add a new project&amp;quot;&lt;/p&gt;
&lt;p&gt;Put in repo url: git://github.com/kencochrane/kencochrane_blog.git&lt;/p&gt;
&lt;p&gt;(Only SSH authentication is supported, so use either an unauthenticated public URL, or an SSH url (e.g. &lt;a class="reference external" href="mailto:git&amp;#64;github.com"&gt;git&amp;#64;github.com&lt;/a&gt;:yourname/project.git.   On github.org, use the Git Read-Only URL if your repo is public, or the SSH URL if private.)&lt;/p&gt;
&lt;p&gt;Hit Next.&lt;/p&gt;
&lt;p&gt;Entered my title &amp;quot;kencochrane_blog&amp;quot;&lt;/p&gt;
&lt;p&gt;selected django 1.3&lt;/p&gt;
&lt;p&gt;settings module : mysite.settings&lt;/p&gt;
&lt;p&gt;static media location : &amp;quot;static /site-media&amp;quot;&lt;/p&gt;
&lt;p&gt;no additional directories to add to python path&lt;/p&gt;
&lt;p&gt;put in my requirements.txt file, so that it knows where to find my pip requirements. You don't need to do this, djangozoom will scan your projects and find this out for you, but it didn't work for me, I have an issue with my application that I wasn't able to find, and it was causing issues with their autoscanner. I think this is more my fault then theirs.&lt;/p&gt;
&lt;p&gt;not putting in any extra requirements.&lt;/p&gt;
&lt;p&gt;base(repo) python package: put mysite.settings because my settings.py and root urls.py are at the top level of your repository. normally I don't do this, but I was following the example of this repo &lt;a class="reference external" href="https://github.com/natea/mezzanine-site"&gt;https://github.com/natea/mezzanine-site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Checked the &amp;quot;ready to roll, deploy my project now&amp;quot; check box and hit next&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first I had some errors with my requirements, I needed to remove django and mysql and update the python-twitter lib. Once I did that, it worked like a charm. The whole deploy process only took 2 minutes and 45 seconds.&lt;/p&gt;
&lt;p&gt;Wow that was fast, pretty impressive considering it needed to pull down all of the code from github, and download a ton of dependencies, and then do what ever it needs to do to set it up on to their servers. After talking with them about this, they said they hope to get it even faster, which would be pretty impressive.&lt;/p&gt;
&lt;p&gt;Now that I have my app deployed I can change some of the settings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I created an alias to for my app to &lt;a class="reference external" href="http://kencochrane.djangozoom.net"&gt;http://kencochrane.djangozoom.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also add a hostname like kencochrane.net.&lt;/p&gt;
&lt;p&gt;you can add a wildcard hostname as well. *.kencochrane.net.&lt;/p&gt;
&lt;p&gt;You can create a django superuser.&lt;/p&gt;
&lt;p&gt;You can also run any of your manage.py commands right from the web console.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This whole process was pretty straight forward and didn't take long to complete. Now that I have done it with one application, it will be much easier for the next one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cool-feature-request"&gt;
&lt;h2&gt;Cool Feature Request&lt;/h2&gt;
&lt;p&gt;Currently DjangoZoom makes it really easy to deploy your application to their servers. What would be cool is if they would make it easy to deploy common django applications to their service. For example on their blog they have a video to show how easy it is to &lt;a class="reference external" href="http://djangozoom.com/blog/2011/03/15/deploying-django-cms-45-seconds-djangozoom/"&gt;deploy django-cms to DjangoZoom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the video it shows them going out to github, forking and copying the link to the project, and then making some minor changes on the djangozoom settings page to get it to work correctly, and then it deploys. These steps weren't complicated but you needed to know what to do in order to get it to work. What if they made this a one step process?&lt;/p&gt;
&lt;p&gt;Click on a &amp;quot;install django-cms&amp;quot; link, and then their service would do what it needs to do to get it up and running on their service, and then returns you to a page where you can configure the app, add a django admin user, change the url, etc. That would allow someone who doesn't know anything about django an easy way to get a django-cms based website in no time. They could add one click installs for all kinds of common django projects, and expand outside of the developer community, which would expand their customer base. Those customers are the ones that really don't want to worry about server deploys and server management, and they are the ones that will pay more for those features.&lt;/p&gt;
&lt;p&gt;I'm sure this feature isn't on their roadmap, but I just thought I would throw it out there and see what people have to say about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="djangozoom-com-status"&gt;
&lt;h2&gt;DjangoZoom.com status&lt;/h2&gt;
&lt;p&gt;DjangoZoom is still in closed beta, which means they are not done with it yet, and there may be some occasional bugs that pop up here and there, but that is expected. Another thing about a beta is that not all of the features are finished yet. So before you jump in and try and get your application up and running, check and make sure that your application can run correctly on the service with the features they have available so far. Here is a run down of all the different features your application might need and where they stand in DjangoZoom today.&lt;/p&gt;
&lt;div class="section" id="logging"&gt;
&lt;h3&gt;Logging&lt;/h3&gt;
&lt;p&gt;You currently can't view your django or nginx logs at this time, they are working on this feature and hope to have it so that you can view your logs in the web based console in the future. In the meantime you can use a tool like django-sentry to view your django-logs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h3&gt;SSL&lt;/h3&gt;
&lt;p&gt;Not available yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="caching"&gt;
&lt;h3&gt;Caching&lt;/h3&gt;
&lt;p&gt;They currently don't support a caching server, they want to make sure they set it up correctly so that it is reliable and so that it is secure. In the meantime you can use django local memory caching.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;p&gt;They support PostgreSQL 8.4, if you are using mysql you will need to convert your app to support PostgreSQL. Since the Django ORM handles this by default, this shouldn't be a big deal unless you did something custom. No direct database access available. Loading data into system only supported by using django dumpdata/loaddata&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background-tasks"&gt;
&lt;h3&gt;Background tasks&lt;/h3&gt;
&lt;p&gt;Not available yet, celery support possible in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cronjobs"&gt;
&lt;h3&gt;Cronjobs&lt;/h3&gt;
&lt;p&gt;Not supported, they recommend &lt;a class="reference external" href="http://packages.python.org/APScheduler/"&gt;Advanced Python Scheduler&lt;/a&gt; or  &lt;a class="reference external" href="https://github.com/reavis/django-cron"&gt;django-cron&lt;/a&gt; which should run on their system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-access"&gt;
&lt;h3&gt;Shell Access&lt;/h3&gt;
&lt;p&gt;Not supported&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;p&gt;Not available yet, one planned for the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line-client"&gt;
&lt;h3&gt;Command line client&lt;/h3&gt;
&lt;p&gt;Not available yet, one planned for the future. Use the web base control panel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control"&gt;
&lt;h3&gt;Version control&lt;/h3&gt;
&lt;p&gt;Currently only supports git.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="videos"&gt;
&lt;h3&gt;Videos&lt;/h3&gt;
&lt;p&gt;Here are some videos of the DjangoZoom.com deployment process.&lt;/p&gt;
&lt;p&gt;&lt;iframe title="YouTube video player" width="480" height="390" src="http://www.youtube.com/embed/NCQxqw94Cgs" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;&lt;iframe title="YouTube video player" src="http://www.youtube.com/embed/DSe6R1ByS5k" width="480" frameborder="0" height="390"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I really enjoyed playing with DjangoZoom, it is quick and easy to use, it is still missing some key features that some people will need, but I'm sure they will add those soon enough. I wish them luck, and I can't wait to see them go live to the general public.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update:&lt;/h2&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to DjangoZoom. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="deployment"></category><category term="hosting"></category><category term="djangozoom"></category><category term="paas"></category></entry></feed>