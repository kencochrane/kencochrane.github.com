<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>KenCochrane.net</title><link href="http://kencochrane.net/" rel="alternate"></link><link href="http://kencochrane.net/feeds/docker.atom.xml" rel="self"></link><id>http://kencochrane.net/</id><updated>2013-06-07T12:24:24-04:00</updated><entry><title>Running Docker on Digital Ocean with Ubuntu</title><link href="http://kencochrane.net/blog/2013/06/running-docker-on-digital-ocean/" rel="alternate"></link><updated>2013-06-07T12:24:24-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2013-06-07:blog/2013/06/running-docker-on-digital-ocean/</id><summary type="html">&lt;p&gt;I recently wrote a post on how to get &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; up and &lt;a class="reference external" href="http://kencochrane.net/blog/2013/05/running-docker-on-rackspace-cloud/"&gt;running on Rackspace&lt;/a&gt; and since then I have received some requests on how to get it up and running on other hosts. One of those hosts is &lt;a class="reference external" href="https://www.digitalocean.com/?refcode=3313a09727d4"&gt;Digital Ocean&lt;/a&gt; a hot new Cloud hosting provider that offers a 512MB 20GB SSD VPS for only $5.00 / month. A really great deal, and also a great price if you want to play around with some new tool and not have to worry about possibly breaking a production server. This post should guide you though the process of getting an Ubuntu 12.04 and 13.04 VPS up and running with Docker.&lt;/p&gt;
&lt;div class="section" id="step-1-register"&gt;
&lt;h2&gt;Step 1: Register&lt;/h2&gt;
&lt;p&gt;First things first, if you don't already have a Digital Ocean account, you will need to create one. If you &lt;a class="reference external" href="https://www.digitalocean.com/?refcode=3313a09727d4"&gt;follow this link&lt;/a&gt;, click sign up and enter this promo code &lt;strong&gt;VPSERS10&lt;/strong&gt;, you will be given a $10 credit to try out the service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-billing"&gt;
&lt;h2&gt;Step 2: Billing&lt;/h2&gt;
&lt;p&gt;To prevent abuse, Digital Ocean requires that you enter a credit card before you can spin up a server. Go ahead and do that now. Once you put in your information you should see a screen like this.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/startup.png" class="img-polaroid align-center" id="digital-ocean-control-panel" src="/static/digital-ocean/startup.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-ssh-keys"&gt;
&lt;h2&gt;Step 3 SSH keys&lt;/h2&gt;
&lt;p&gt;To make your life easier, I would add a public SSH key to your account. If you don't add an SSH key then you will be emailed a root password when the server is setup. It is easier and more secure to add your public key, and then select that key when building the server, and they will automatically add the key to your server for you. If you don't have a SSH key, don't worry they are easy to create. Just do a quick web search, and there are a ton of different guide out there to help you get one setup.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/ssh_key.png" class="img-polaroid align-center" id="digital-ocean-control-panel-add-ssh-key" src="/static/digital-ocean/ssh_key.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-create-droplet"&gt;
&lt;h2&gt;Step 4: Create Droplet&lt;/h2&gt;
&lt;p&gt;Digital Ocean calls their servers Droplets. Lets create a droplet. Click on the big &amp;quot;Create&amp;quot; button on the control panel.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Enter a hostname&lt;/li&gt;
&lt;li&gt;Pick your size&lt;/li&gt;
&lt;li&gt;select your region&lt;/li&gt;
&lt;li&gt;Select your image. Docker currently only runs on a 64bit OS, and needs a fairly recent kernel (3.8+) with AUFS enabled. The only images on Digital Ocean that will currently work with Docker are Ubuntu 13.04 x64 Server, and Ubuntu 12.04 x64 Server. I'll cover the install instructions for those two options below.&lt;/li&gt;
&lt;li&gt;Pick your SSH key that you added previously. If you don't pick one, your root password will be emailed to you.&lt;/li&gt;
&lt;li&gt;Enable VirtIO&lt;/li&gt;
&lt;li&gt;Click the big &amp;quot;Create Droplet&amp;quot; button at the bottom.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="/static/digital-ocean/select_distro_ubuntu_12_04.png" class="img-polaroid align-center" id="digital-ocean-control-panel-select-distro" src="/static/digital-ocean/select_distro_ubuntu_12_04.png" /&gt;
&lt;p&gt;Droplet getting created&lt;/p&gt;
&lt;img alt="/static/digital-ocean/create_droplet.png" class="img-polaroid align-center" id="digital-ocean-control-panel-create-droplet" src="/static/digital-ocean/create_droplet.png" /&gt;
&lt;p&gt;After about 60 seconds you should have a cloudlet created with an IP address. Now pick the Distro you picked below and follow the rest of the directions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu-12-04-64bit-server"&gt;
&lt;h2&gt;Ubuntu 12.04 64bit Server&lt;/h2&gt;
&lt;div class="section" id="upgrade-kernel"&gt;
&lt;h3&gt;Upgrade kernel&lt;/h3&gt;
&lt;p&gt;The default kernel with 12.04 doesn't work well with Docker so we are going to upgrade to the same one that is used by 13.04. To do this you will go into your control panel for your droplet, and go into the settings tab and change the kernel pull down to &amp;quot;Ubuntu 13.04-x64-vmlinuz-3.8.0-23-generic&amp;quot; and click change.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/change_kernel.png" class="img-polaroid align-center" id="digital-ocean-control-panel-change-kernel" src="/static/digital-ocean/change_kernel.png" /&gt;
&lt;p&gt;In order for the kernel change to take affect you will need to power cycle the droplet. Click on the power tab, and then hit the &amp;quot;Power Cycle&amp;quot; button.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/power_cycle.png" class="img-polaroid align-center" id="digital-ocean-control-panel-power-cycle" src="/static/digital-ocean/power_cycle.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="login-to-server"&gt;
&lt;h3&gt;Login to server&lt;/h3&gt;
&lt;p&gt;Now that you have the new kernel you need to login to the server to install the rest of the stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;your_ip_address&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's check to make sure you have the right kernel. It should show a 3.8 kernel if you did everything right.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-1 3.8.0-23-generic &lt;span class="c"&gt;#34-Ubuntu SMP Wed May 29 20:22:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's install some dependencies now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install linux-image-generic-lts-raring
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you see this, just pick the default (already selected) and hit OK.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/kernel_menu.png" class="img-polaroid align-center" id="kernel-menu" src="/static/digital-ocean/kernel_menu.png" /&gt;
&lt;p&gt;Install Docker from the Docker PPA&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install python-software-properties &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo add-apt-repository ppa:dotcloud/lxc-docker
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install lxc-docker
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker should have been installed and started up. lets test to make sure it works.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ docker version
Client version: 0.4.0
Server version: 0.4.0
Go version: go1.0.3

$ docker run base /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully it worked. If not, feel free to ask questions on #docker on freenode, or &lt;a class="reference external" href="https://github.com/dotcloud/docker/issues?labels=doc&amp;amp;state=open"&gt;submit a support ticket&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu-13-04-64bit-server"&gt;
&lt;h2&gt;Ubuntu 13.04 64bit Server&lt;/h2&gt;
&lt;p&gt;13.04 comes with the 3.8 kernel, so we won't need to do anything kernel related, which makes this install much simpler compared to 12.04.&lt;/p&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install linux-image-extra-&lt;span class="sb"&gt;`&lt;/span&gt;uname -r&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you see this, just pick the default (already selected) and hit OK.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/kernel_menu.png" class="img-polaroid align-center" id="kernel-menu-2" src="/static/digital-ocean/kernel_menu.png" /&gt;
&lt;p&gt;Install Docker&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install software-properties-common
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo add-apt-repository ppa:dotcloud/lxc-docker
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install lxc-docker
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker should have been installed and started up. lets test to make sure it works.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps
ID                  IMAGE               COMMAND             CREATED             STATUS              PORTS

&lt;span class="nv"&gt;$ &lt;/span&gt;docker version
Client version: 0.4.0
Server version: 0.4.0
Go version: go1.0.3

&lt;span class="nv"&gt;$ &lt;/span&gt;docker run base /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully it worked. If not, feel free to ask questions on #docker on freenode, or &lt;a class="reference external" href="https://github.com/dotcloud/docker/issues?labels=doc&amp;amp;state=open"&gt;submit a support ticket&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully now you have the knowledge to go and setup your own Docker server on Digital Ocean. If you have any issues, or questions feel free to submit the questions below.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="docker"></category><category term="digital-ocean"></category><category term="ubuntu"></category><category term="kernel"></category><category term="lxc"></category><category term="aufs"></category></entry><entry><title>Getting Docker up and running on a RaspberryPi</title><link href="http://kencochrane.net/blog/2013/05/running-docker-on-a-raspberrypi/" rel="alternate"></link><updated>2013-05-17T15:30:24-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2013-05-17:blog/2013/05/running-docker-on-a-raspberrypi/</id><summary type="html">&lt;p&gt;This year I attended &lt;a class="reference external" href="https://us.pycon.org/2013/"&gt;PyCon US&lt;/a&gt; and I was lucky enough to get a FREE &lt;a class="reference external" href="http://www.raspberrypi.org"&gt;RaspberryPi&lt;/a&gt;. At the same conference &lt;a class="reference external" href="http://www.dotcloud.com"&gt;dotCloud&lt;/a&gt; (The company I work for), was giving a lightning talk for a project that we have been working on, called Docker. &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; is a tool that allows you to better manage your Linux Containers (&lt;a class="reference external" href="http://lxc.sourceforge.net"&gt;LXC&lt;/a&gt;). Shortly after I got the RaspberryPi, I started wondering if it would be possible to run Docker on it.&lt;/p&gt;
&lt;img alt="/static/rpi/RaspberryPi.jpg" class="img-polaroid align-center" id="raspberrypi-image" src="/static/rpi/RaspberryPi.jpg" /&gt;
&lt;p&gt;I did some digging and technically speaking the Pi should be able to run Docker, it satisfies all of the requirements.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;LXC&lt;/li&gt;
&lt;li&gt;AUFS&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Getting it up and running isn't going to be easy. The Linux kernels that come with the different Linux distros for the RaspberryPi, are kind of old, and don't come with AUFS built in. The RaspberryPi also runs on an ARM based chip, and it is only 32bit. Currently Docker only supports 64bit OS's. There are plans to add 32 bit support in the future, but it isn't there yet.&lt;/p&gt;
&lt;p&gt;Doing some research I was able to find blog posts on how to get LXC and AUFS up and running on the RaspberryPi. Using those guides, I was able to make some progress but I'm not all of the way there yet. I'm hoping to describe my steps here so that others can see what I have done, and if they want, help me get over the hump.&lt;/p&gt;
&lt;div class="section" id="goals"&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;p&gt;My goals for the project is to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;provide a prebuilt image that people can download that has everything they needed in order to get started.&lt;/li&gt;
&lt;li&gt;I also want to provide a prebuilt kernel, people can download and use without having to build their own.&lt;/li&gt;
&lt;li&gt;Port Docker to 32bit so that it will run on RaspberryPi and provide a Debian package for easy install.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="instructions"&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;p&gt;Here are the steps that I used to make it so that my RaspberryPi could run Docker. These are still a work in progress, so please let me know if you have any issues, or you found a better way to do this.&lt;/p&gt;
&lt;div class="section" id="install-linux-os"&gt;
&lt;h3&gt;Install Linux OS&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download &lt;a class="reference external" href="http://www.raspberrypi.org/downloads"&gt;Raspbian&lt;/a&gt; and &lt;a class="reference external" href="http://elinux.org/RPi_Easy_SD_Card_Setup"&gt;make an SD card&lt;/a&gt; (I used the 2013-02-09-wheezy-raspbian.zip image)&lt;/li&gt;
&lt;li&gt;Once you have the SD card, put it in the Pi and boot it up.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="update-and-prepare-raspbian"&gt;
&lt;h3&gt;Update and Prepare Raspbian&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Switch to Root User on the Pi. These commands must be run as root. You can also use &amp;quot;su&amp;quot; or &amp;quot;sudo&amp;quot;, what ever you prefer:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo su root
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Expand to fill SD card and reboot after entering:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;raspi-config
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Update Raspbian&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update

&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get dist-upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Install git&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install git-core
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Update Firmware&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The clone will take a while. You might consider cloning on a desktop machine to save time. Just transfer the firmware/boot and modules/ directories from your desktop PC to the Pi after the checkout. Be aware that checking out on some OS's that are case insensitive, may result in some files being missing. If you see funky issues, this might be the cause.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/raspberrypi/firmware.git

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;firmware/boot

&lt;span class="nv"&gt;$ &lt;/span&gt;cp * /boot

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../modules

&lt;span class="nv"&gt;$ &lt;/span&gt;cp -r * /lib/modules

&lt;span class="nv"&gt;$ &lt;/span&gt;reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Increase the Swap File Size&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I found that in order to check out the source on the Pi, you’ll need a swap file with the 256MB Pi, otherwise it will run out of RAM during the checkout (with fatal: index-pack failed).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# use your favorite editor here.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pico /etc/dphys-swapfile

&lt;span class="c"&gt;# change to 500 (MB)&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo dphys-swapfile setup

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;Prepare to Build Kernel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are going to use the 3.6 kernel since it is the lastest stable one. There is an effort to get &lt;a class="reference external" href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=87&amp;amp;t=40664"&gt;3.8 working&lt;/a&gt;, it isn't 100% there yet, for more info see.&lt;/p&gt;
&lt;p&gt;The clone will take a while. Again, you may consider using a desktop PC. Of course, if you do that, you’ll need to issue the “zcat” command from your Pi and copy the resulting “.config” file to the “linux” directory on your desktop PC.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt

&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir raspberrypi

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;raspberrypi

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/raspberrypi/linux.git

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;linux

&lt;span class="nv"&gt;$ &lt;/span&gt;zcat /proc/config.gz &amp;gt; .config
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="8"&gt;
&lt;li&gt;Decrease the Swap Space File&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pico /etc/dphys-swapfile

&lt;span class="c"&gt;# change to 100 (MB)&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo dphys-swapfile setup

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="9"&gt;
&lt;li&gt;Install Packages for Kernel Compilation&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install ncurses-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="10"&gt;
&lt;li&gt;Adding AUFS Patches&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/raspberrypi/linux

git clone git://aufs.git.sourceforge.net/gitroot/aufs/aufs3-standalone.git
&lt;span class="nb"&gt;cd &lt;/span&gt;aufs3-standalone
git checkout origin/aufs3.6
cp -rp *.patch ../
cp -rp fs ../
cp -rp Documentation/ ../
cp -rp include/ ../
&lt;span class="nb"&gt;cd&lt;/span&gt; ..

patch -p1 &amp;lt; aufs3-base.patch
patch -p1 &amp;lt; aufs3-proc_map.patch
patch -p1 &amp;lt; aufs3-standalone.patch
patch -p1 &amp;lt; aufs3-kbuild.patch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you get this error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@raspberrypi:/opt/raspberrypi/linux# patch -p1 &amp;lt; aufs3-kbuild.patch
patching file fs/Kconfig
patching file fs/Makefile
patching file include/linux/Kbuild
Hunk &lt;span class="c"&gt;#1 FAILED at 66.&lt;/span&gt;
1 out of 1 hunk FAILED -- saving rejects to file include/linux/Kbuild.rej
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you will need to manually update include/linux/Kbuild because the patch failed.&lt;/p&gt;
&lt;p&gt;First I reverted change on the file, and manually added. the line (below) to line 66, below audit.h&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;header-y +&lt;span class="o"&gt;=&lt;/span&gt; aufs_type.h
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;here is my git diff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;diff --git a/include/linux/Kbuild b/include/linux/Kbuild
index fa21760..ee029e3 100644
--- a/include/linux/Kbuild
+++ b/include/linux/Kbuild
@@ -66,6 +66,7 @@ header-y +&lt;span class="o"&gt;=&lt;/span&gt; atmppp.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; atmsap.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; atmsvc.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; audit.h
+header-y +&lt;span class="o"&gt;=&lt;/span&gt; aufs_type.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; auto_fs.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; auto_fs4.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; auxvec.h
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="11"&gt;
&lt;li&gt;Configuring Kernel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You’ll now need to set some kernel options to support LXC, via the menu config tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/raspberrypi/linx

&lt;span class="nv"&gt;$ &lt;/span&gt;make menuconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You need to enable these options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;General -&amp;gt; Control Group Support -&amp;gt; Memory Resource Controller for Control Groups (&lt;em&gt;and its three child options&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="/static/rpi/raspberrypi_kernel_config_1.png" class="img-polaroid align-left" id="linux-kernel-config-1-memory-controller" src="/static/rpi/raspberrypi_kernel_config_1.png" /&gt;
&lt;p&gt;(this has high overhead;only enable if you really need it, or else enable and remember to disable using the Kernel command line option “cgroup_disable=memory”) (image not shown)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;General -&amp;gt; Control Group Support -&amp;gt; cpuset support&lt;/li&gt;
&lt;li&gt;Device Drivers -&amp;gt; Character Devices -&amp;gt; Support multiple instances of devpts&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="/static/rpi/raspberrypi_kernel_config_2.png" class="img-polaroid align-left" id="linux-kernel-config-2-devpts" src="/static/rpi/raspberrypi_kernel_config_2.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Device Drivers -&amp;gt; Network Device Support -&amp;gt; Virtual ethernet pair device&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="/static/rpi/raspberrypi_kernel_config_3.png" class="img-polaroid align-left" id="linux-kernel-config-3-virtual-ethernet-pair-device" src="/static/rpi/raspberrypi_kernel_config_3.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;File Systems --&amp;gt; Miscellaneous filesystems -&amp;gt;select &amp;quot;Aufs (Advanced multi layered unification filesystem) support (NEW)&amp;quot; (mine was the the very bottom)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="/static/rpi/docker_rasberrypi_aufs_kernel_config.png" class="img-polaroid align-left" id="linux-kernel-config-4-aufs" src="/static/rpi/docker_rasberrypi_aufs_kernel_config.png" /&gt;
&lt;ol class="arabic simple" start="12"&gt;
&lt;li&gt;Build Kernel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This could take many hours if you compile on the Pi, there are ways to &lt;a class="reference external" href="http://elinux.org/RPi_Kernel_Compilation#2._Cross_compiling_from_Linux"&gt;compile on another machine&lt;/a&gt; and transfer the kernel to the Pi when completed. If you are in a hurry, use this approach.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make

&lt;span class="nv"&gt;$ &lt;/span&gt;make modules_install

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/raspberrypi

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/raspberrypi/tools.git

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;tools/mkimage

&lt;span class="nv"&gt;$ &lt;/span&gt;python ./imagetool-uncompressed.py /opt/raspberrypi/linux/arch/arm/boot/Image

&lt;span class="nv"&gt;$ &lt;/span&gt;cp /boot/kernel.img /boot/kernel-old.img

&lt;span class="nv"&gt;$ &lt;/span&gt;cp kernel.img /boot/

&lt;span class="nv"&gt;$ &lt;/span&gt;reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="13"&gt;
&lt;li&gt;Download Latest LXC&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The LXC tools provided with Raspbian are out-of-date, so let's update to the latest version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir /opt/lxc

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/lxc

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/lxc/lxc.git

&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install automake libcap-dev

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;lxc

&lt;span class="nv"&gt;$ &lt;/span&gt;./autogen.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Testing the Install&lt;/p&gt;
&lt;p&gt;Check LXC is happy with your kernel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lxc-checkconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;User namespace should be “missing” (it checks for a kernel option that no longer exists) and Cgroup namespace should say “required”.&lt;/p&gt;
&lt;ol class="arabic simple" start="14"&gt;
&lt;li&gt;Installing Go&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you install Go using the Go package that is available (apt-get install golang). You will get a floating point issue. For more information about the floating point issues see this page.  &lt;a class="reference external" href="http://www.raspberrypi.org/phpBB3/viewtopic.php?p=129647"&gt;http://www.raspberrypi.org/phpBB3/viewtopic.php?p=129647&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To get it to work, we will compile Go from source. Feel free to change the location on where we are installing it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install -y mercurial gcc libc6-dev

&lt;span class="nv"&gt;$ &lt;/span&gt;hg clone -u default https://code.google.com/p/go &lt;span class="nv"&gt;$HOME&lt;/span&gt;/go
warning: code.google.com certificate with fingerprint 9f:af:b9:ce:b5:10:97:c0:5d:16:90:11:63:78:fa:2f:37:f4:96:79 not verified &lt;span class="o"&gt;(&lt;/span&gt;check hostfingerprints or web.cacerts config setting&lt;span class="o"&gt;)&lt;/span&gt;
destination directory: go
requesting all changes
adding changesets
adding manifests
adding file changes
added 14430 changesets with 52478 changes to 7406 files &lt;span class="o"&gt;(&lt;/span&gt;+5 heads&lt;span class="o"&gt;)&lt;/span&gt;
updating to branch default
3520 files updated, 0 files merged, 0 files removed, 0 files unresolved

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/go/src
&lt;span class="nv"&gt;$ &lt;/span&gt;./all.bash

ALL TESTS PASSED

---
Installed Go &lt;span class="k"&gt;for &lt;/span&gt;linux/arm in /home/dfc/go
Installed commands in /home/dfc/go/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there was an error relating to out of memory, or you couldn’t configure an appropriate swap device, you can skip the test suite by executing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/go
&lt;span class="nv"&gt;$ &lt;/span&gt;./make.bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as an alternative to ./all.bash.&lt;/p&gt;
&lt;p&gt;The go command needs to be added to your $PATH, you should also edit your profile script (.bashrc, etc) to include these changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$HOME&lt;/span&gt;/go/bin
&lt;span class="nv"&gt;$ &lt;/span&gt;go version
go version devel +30c566874b83 Wed May 08 16:06:25 2013 -0700 linux/arm
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="15"&gt;
&lt;li&gt;Installing Docker&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get -y install wget bsdtar curl git

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GOPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/docker/go/
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p &lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/src/github.com/dotcloud
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/src/github.com/dotcloud
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/dotcloud/docker.git  &lt;span class="c"&gt;# or clone your own fork/branch&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;docker

&lt;span class="nv"&gt;$ &lt;/span&gt;go get -v github.com/dotcloud/docker/...
&lt;span class="nv"&gt;$ &lt;/span&gt;go install -v github.com/dotcloud/docker/...

&lt;span class="nv"&gt;$ &lt;/span&gt;docker version
&lt;span class="nv"&gt;$ &lt;/span&gt;docker -d
The docker runtime currently only supports amd64 &lt;span class="o"&gt;(&lt;/span&gt;not arm&lt;span class="o"&gt;)&lt;/span&gt;. This will change in the future. Aborting.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker is installed but due to current limitations it won't run. It is a start, we now have a development environment to start hacking on Docker to get it to work with the RaspberryPi.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Now we have everything up and running, we need to change docker so that it will work on the ARM with only 32bit support.&lt;/li&gt;
&lt;li&gt;I need to take my compiled kernel and make it downloadable to others&lt;/li&gt;
&lt;li&gt;I need to make an SD card image of my setup for easy download, so that people can get started easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-help"&gt;
&lt;h2&gt;Want to Help?&lt;/h2&gt;
&lt;p&gt;If you want to help me with this, please send me a message on twitter &lt;a class="reference external" href="https://twitter.com/kencochrane"&gt;&amp;#64;KenCochrane&lt;/a&gt; and also add your name to this &lt;a class="reference external" href="https://github.com/dotcloud/docker/issues/636"&gt;Docker issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources:&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;LXC: &lt;a class="reference external" href="http://raspberrypicloud.wordpress.com/2013/03/12/building-an-lxc-friendly-kernel-for-the-raspberry-pi/"&gt;http://raspberrypicloud.wordpress.com/2013/03/12/building-an-lxc-friendly-kernel-for-the-raspberry-pi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AUFS: &lt;a class="reference external" href="http://rpitc.blogspot.sg/p/kernel-rebuild.html"&gt;http://rpitc.blogspot.sg/p/kernel-rebuild.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go: &lt;a class="reference external" href="http://dave.cheney.net/tag/go-golang-raspberrypi"&gt;http://dave.cheney.net/tag/go-golang-raspberrypi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker: &lt;a class="reference external" href="http://docs.docker.io/en/latest/contributing/devenvironment.html"&gt;http://docs.docker.io/en/latest/contributing/devenvironment.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="docker"></category><category term="dotcloud"></category><category term="raspberrypi"></category><category term="linux"></category><category term="kernel"></category><category term="aufs"></category><category term="lxc"></category><category term="go"></category><category term="raspbian"></category></entry><entry><title>Running Docker on Rackspace with Ubuntu</title><link href="http://kencochrane.net/blog/2013/05/running-docker-on-rackspace-cloud/" rel="alternate"></link><updated>2013-05-11T12:17:48-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2013-05-11:blog/2013/05/running-docker-on-rackspace-cloud/</id><summary type="html">&lt;p&gt;I have been playing with &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; a lot lately, and it got me wondering how hard it would be to run Docker on the different Cloud providers. I noticed there were already directions on how to install on &lt;a class="reference external" href="http://docs.docker.io/en/latest/installation/amazon.html"&gt;Amazon EC2&lt;/a&gt; but nothing for the Rackspace Cloud.&lt;/p&gt;
&lt;p&gt;If you would like to run &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; on the &lt;a class="reference external" href="http://www.rackspace.com/cloud/servers/"&gt;RackSpace Cloud&lt;/a&gt; using &lt;a class="reference external" href="http://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt; you're in luck. I just spent the afternoon figuring out how to get it installed on Ubuntu 12.04, 12.10, and 13.04, and I have included my notes below. 13.04 is the easiest to get up and running since it has the most recent kernel, but the others aren't too bad either, they just need a few more steps, to get them up to par.&lt;/p&gt;
&lt;p&gt;I would love to expand this to other distros on Rackspace, so if you come up with more, send me a note, and so I can link to them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: 05-12-2013&lt;/strong&gt; I have updated some information given some feedback by others. Also added a troubleshooting section.&lt;/p&gt;
&lt;div class="section" id="ubuntu-12-04"&gt;
&lt;h2&gt;Ubuntu 12.04&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 12.04 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-04 3.2.0-38-virtual &lt;span class="c"&gt;#61-Ubuntu SMP Tue Feb 19 12:37:47 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now lets install Docker and it's dependencies. To keep things simple, we will use the Docker install script. It will take a couple of minutes. (see below if you want to install via package)&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl get.docker.io | sudo sh -x
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Docker runs best with a new kernel, so lets use 3.8.x&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# install the new kernel&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install linux-generic-lts-raring

&lt;span class="c"&gt;# update grub so it will use the new kernel after we reboot&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;update-grub

&lt;span class="c"&gt;# update-grub doesn&amp;#39;t always work so lets make sure. ``/boot/grub/menu.lst`` was updated.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst

&lt;span class="c"&gt;# nope it wasn&amp;#39;t lets manually update ``/boot/grub/menu.lst``  (make sure you are searching for correct kernel version, look at initial uname -a results.)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sed -i s/3.2.0-38-virtual/3.8.0-19-generic/ /boot/grub/menu.lst

&lt;span class="c"&gt;# once again lets make sure it worked.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic
kernel          /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hvc0
initrd          /boot/initrd.img-3.8.0-19-generic
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic &lt;span class="o"&gt;(&lt;/span&gt;recovery mode&lt;span class="o"&gt;)&lt;/span&gt;
kernel          /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash  single
initrd          /boot/initrd.img-3.8.0-19-generic

&lt;span class="c"&gt;# much better.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot server (either via command line or console)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;login again and check to make sure the kernel was updated&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server_ip&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-04 3.8.0-19-generic &lt;span class="c"&gt;#30~precise1-Ubuntu SMP Wed May 1 22:26:36 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;

&lt;span class="c"&gt;# nice 3.8.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure docker is running and test it out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start dockerd
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull busybox
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run busybox /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="alternate-install"&gt;
&lt;h3&gt;Alternate install&lt;/h3&gt;
&lt;p&gt;If you don't want to run the get.docker.io script and want to use packages instead, you can use the docker PPA. Here is how you use it. Replace step 5 with the following 3 steps.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add the custom package sources to your apt sources list. Copy and paste the following lines at once.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo sh -c &lt;span class="s2"&gt;&amp;quot;echo &amp;#39;deb http://ppa.launchpad.net/dotcloud/lxc-docker/ubuntu precise main&amp;#39; &amp;gt;&amp;gt; /etc/apt/sources.list&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Update your sources. You will see a warning that GPG signatures cannot be verified.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Now install it, you will see another warning that the package cannot be authenticated. Confirm install.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install lxc-docker
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu-12-10"&gt;
&lt;h2&gt;Ubuntu 12.10&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 12.10 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-10 3.5.0-25-generic &lt;span class="c"&gt;#39-Ubuntu SMP Mon Feb 25 18:26:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now lets install Docker and it's dependencies. To keep things simple, we will use the Docker install script. It will take a couple of minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl get.docker.io | sudo sh -x
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Docker runs best with a new kernel, so lets use 3.8.x&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# add the ppa to get the right kernel package&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;deb http://ppa.launchpad.net/ubuntu-x-swat/q-lts-backport/ubuntu quantal main &amp;gt; /etc/apt/sources.list.d/xswat.list

&lt;span class="c"&gt;# add the key for the ppa&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B22AB97AF1CDFA9

&lt;span class="c"&gt;# update packages again&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update

&lt;span class="c"&gt;# install the new kernel&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install linux-image-3.8.0-19-generic

&lt;span class="c"&gt;# make sure grub has been updated.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst
title   Ubuntu 12.10, kernel 3.8.0-19-generic
kernel  /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hvc0
initrd  /boot/initrd.img-3.8.0-19-generic
title   Ubuntu 12.10, kernel 3.8.0-19-generic &lt;span class="o"&gt;(&lt;/span&gt;recovery mode&lt;span class="o"&gt;)&lt;/span&gt;
kernel  /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash  single
initrd  /boot/initrd.img-3.8.0-19-generic

&lt;span class="c"&gt;# looks good. If it doesn&amp;#39;t work for you, look at the notes for 12.04 to fix.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot server (either via command line or console)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;login again and check to make sure the kernel was updated&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server_ip&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-10 3.8.0-19-generic &lt;span class="c"&gt;#29~precise2-Ubuntu SMP Fri Apr 19 16:15:35 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;

&lt;span class="c"&gt;# nice 3.8.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure docker is running and test it out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start dockerd
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull busybox
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run busybox /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu-13-04"&gt;
&lt;h2&gt;Ubuntu 13.04&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 13.04 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-1304 3.8.0-19-generic &lt;span class="c"&gt;#29-Ubuntu SMP Wed Apr 17 18:16:28 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now lets install Docker and it's dependencies. To keep things simple, we will use the Docker install script. It will take a couple of minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl get.docker.io | sudo sh -x
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure docker is running and test it out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start dockerd
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull busybox
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run busybox /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;Now that you have Docker running on a server, you can look at the different &lt;a class="reference external" href="http://docs.docker.io/en/latest/examples/"&gt;Docker examples&lt;/a&gt; in the documentation to see how it works, and then build something, and let everyone know what you have built. If you have any issues or suggestions, open a github issue and let everyone know. Docker is a new project, and it is moving quick, so any suggestions that you have might help shape the future of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trouble-shooting"&gt;
&lt;h2&gt;Trouble shooting&lt;/h2&gt;
&lt;p&gt;If you are pulling a repo and you get an error like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Error: &lt;span class="nb"&gt;exit &lt;/span&gt;status 1: bsdtar: Linkname can&lt;span class="s1"&gt;&amp;#39;t be converted from UTF-8 to current locale.&lt;/span&gt;
&lt;span class="s1"&gt;bsdtar: Linkname can&amp;#39;&lt;/span&gt;t be converted from UTF-8 to current locale.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It means the the docker daemon doesn't have the correct locales loaded on startup. To fix it make sure your init script looks something like this.&lt;/p&gt;
&lt;p&gt;Make sure the path to the docker binary is correct because in some installs it might be &lt;tt class="docutils literal"&gt;/usr/local/bin&lt;/tt&gt; and others &lt;tt class="docutils literal"&gt;/usr/local/&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;description     &lt;span class="s2"&gt;&amp;quot;Run docker&amp;quot;&lt;/span&gt;

start on runlevel &lt;span class="o"&gt;[&lt;/span&gt;2345&lt;span class="o"&gt;]&lt;/span&gt;
stop on starting rc &lt;span class="nv"&gt;RUNLEVEL&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;016&lt;span class="o"&gt;]&lt;/span&gt;
respawn

script
    &lt;span class="nb"&gt;test&lt;/span&gt; -f /etc/default/locale &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; . /etc/default/locale &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LANG&lt;/span&gt; &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LANG&lt;/span&gt; /usr/local/bin/docker -d
end script
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="docker"></category><category term="rackspace"></category><category term="dotcloud"></category><category term="ubuntu"></category><category term="kernel"></category><category term="lxc"></category><category term="aufs"></category></entry></feed>