<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>KenCochrane.net</title><link href="http://kencochrane.net/" rel="alternate"></link><link href="http://kencochrane.net/feeds/all.atom.xml" rel="self"></link><id>http://kencochrane.net/</id><updated>2013-06-07T12:24:24-04:00</updated><entry><title>Running Docker on Digital Ocean with Ubuntu</title><link href="http://kencochrane.net/blog/2013/06/running-docker-on-digital-ocean/" rel="alternate"></link><updated>2013-06-07T12:24:24-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2013-06-07:blog/2013/06/running-docker-on-digital-ocean/</id><summary type="html">&lt;p&gt;I recently wrote a post on how to get &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; up and &lt;a class="reference external" href="http://kencochrane.net/blog/2013/05/running-docker-on-rackspace-cloud/"&gt;running on Rackspace&lt;/a&gt; and since then I have received some requests on how to get it up and running on other hosts. One of those hosts is &lt;a class="reference external" href="https://www.digitalocean.com/?refcode=3313a09727d4"&gt;Digital Ocean&lt;/a&gt; a hot new Cloud hosting provider that offers a 512MB 20GB SSD VPS for only $5.00 / month. A really great deal, and also a great price if you want to play around with some new tool and not have to worry about possibly breaking a production server. This post should guide you though the process of getting an Ubuntu 12.04 and 13.04 VPS up and running with Docker.&lt;/p&gt;
&lt;div class="section" id="step-1-register"&gt;
&lt;h2&gt;Step 1: Register&lt;/h2&gt;
&lt;p&gt;First things first, if you don't already have a Digital Ocean account, you will need to create one. If you &lt;a class="reference external" href="https://www.digitalocean.com/?refcode=3313a09727d4"&gt;follow this link&lt;/a&gt;, click sign up and enter this promo code &lt;strong&gt;VPSERS10&lt;/strong&gt;, you will be given a $10 credit to try out the service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-billing"&gt;
&lt;h2&gt;Step 2: Billing&lt;/h2&gt;
&lt;p&gt;To prevent abuse, Digital Ocean requires that you enter a credit card before you can spin up a server. Go ahead and do that now. Once you put in your information you should see a screen like this.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/startup.png" class="img-polaroid align-center" id="digital-ocean-control-panel" src="/static/digital-ocean/startup.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-ssh-keys"&gt;
&lt;h2&gt;Step 3 SSH keys&lt;/h2&gt;
&lt;p&gt;To make your life easier, I would add a public SSH key to your account. If you don't add an SSH key then you will be emailed a root password when the server is setup. It is easier and more secure to add your public key, and then select that key when building the server, and they will automatically add the key to your server for you. If you don't have a SSH key, don't worry they are easy to create. Just do a quick web search, and there are a ton of different guide out there to help you get one setup.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/ssh_key.png" class="img-polaroid align-center" id="digital-ocean-control-panel-add-ssh-key" src="/static/digital-ocean/ssh_key.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-create-droplet"&gt;
&lt;h2&gt;Step 4: Create Droplet&lt;/h2&gt;
&lt;p&gt;Digital Ocean calls their servers Droplets. Lets create a droplet. Click on the big &amp;quot;Create&amp;quot; button on the control panel.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Enter a hostname at the top.&lt;/li&gt;
&lt;li&gt;Pick your size&lt;/li&gt;
&lt;li&gt;select your region&lt;/li&gt;
&lt;li&gt;Select your image. Docker currently only runs on a &lt;strong&gt;64bit OS&lt;/strong&gt;, and needs a fairly recent kernel (3.8+) with AUFS enabled. The only images on Digital Ocean that will currently work with Docker are &lt;strong&gt;Ubuntu 13.04 x64 Server&lt;/strong&gt;, and &lt;strong&gt;Ubuntu 12.04 x64 Server&lt;/strong&gt;. I'll cover the install instructions for those two options below.&lt;/li&gt;
&lt;li&gt;Pick your SSH key that you added previously. If you don't pick one, your root password will be emailed to you.&lt;/li&gt;
&lt;li&gt;Enable VirtIO&lt;/li&gt;
&lt;li&gt;Click the big &amp;quot;Create Droplet&amp;quot; button at the bottom.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="/static/digital-ocean/select_distro_ubuntu_12_04.png" class="img-polaroid align-center" id="digital-ocean-control-panel-select-distro" src="/static/digital-ocean/select_distro_ubuntu_12_04.png" /&gt;
&lt;p&gt;Droplet getting created&lt;/p&gt;
&lt;img alt="/static/digital-ocean/create_droplet.png" class="img-polaroid align-center" id="digital-ocean-control-panel-create-droplet" src="/static/digital-ocean/create_droplet.png" /&gt;
&lt;p&gt;After about 60 seconds you should have a cloudlet created with an IP address. Now pick the distribution you picked below and follow the rest of the directions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu-12-04-64bit-server"&gt;
&lt;h2&gt;Ubuntu 12.04 64bit Server&lt;/h2&gt;
&lt;div class="section" id="upgrade-kernel"&gt;
&lt;h3&gt;Upgrade kernel&lt;/h3&gt;
&lt;p&gt;The default kernel with 12.04 doesn't work well with Docker so we are going to upgrade to the same one that is used by 13.04. To do this you will go into your control panel for your droplet, and go into the settings tab and change the kernel pull down to &amp;quot;Ubuntu 13.04-x64-vmlinuz-3.8.0-23-generic&amp;quot; and click change.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/change_kernel.png" class="img-polaroid align-center" id="digital-ocean-control-panel-change-kernel" src="/static/digital-ocean/change_kernel.png" /&gt;
&lt;p&gt;In order for the kernel change to take affect you will need to power cycle the droplet. Click on the power tab, and then hit the &amp;quot;Power Cycle&amp;quot; button.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/power_cycle.png" class="img-polaroid align-center" id="digital-ocean-control-panel-power-cycle" src="/static/digital-ocean/power_cycle.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="login-to-server"&gt;
&lt;h3&gt;Login to server&lt;/h3&gt;
&lt;p&gt;Now that you have the new kernel you need to login to the server to install the rest of the stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;your_ip_address&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's check to make sure you have the right kernel. It should show a 3.8 kernel if you did everything right.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-1 3.8.0-23-generic &lt;span class="c"&gt;#34-Ubuntu SMP Wed May 29 20:22:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's install some dependencies now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install linux-image-generic-lts-raring
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you see this, just pick the default (already selected) and hit OK.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/kernel_menu.png" class="img-polaroid align-center" id="kernel-menu" src="/static/digital-ocean/kernel_menu.png" /&gt;
&lt;p&gt;Install Docker from the Docker PPA&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install python-software-properties &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo add-apt-repository ppa:dotcloud/lxc-docker
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install lxc-docker
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker should have been installed and started up. lets test to make sure it works.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ docker version
Client version: 0.4.0
Server version: 0.4.0
Go version: go1.0.3

$ docker run base /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully it worked. If not, feel free to ask questions on #docker on freenode, or &lt;a class="reference external" href="https://github.com/dotcloud/docker/issues?labels=doc&amp;amp;state=open"&gt;submit a support ticket&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu-13-04-64bit-server"&gt;
&lt;h2&gt;Ubuntu 13.04 64bit Server&lt;/h2&gt;
&lt;p&gt;13.04 comes with the 3.8 kernel, so we won't need to do anything kernel related, which makes this install much simpler compared to 12.04.&lt;/p&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install linux-image-extra-&lt;span class="sb"&gt;`&lt;/span&gt;uname -r&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you see this, just pick the default (already selected) and hit OK.&lt;/p&gt;
&lt;img alt="/static/digital-ocean/kernel_menu.png" class="img-polaroid align-center" id="kernel-menu-2" src="/static/digital-ocean/kernel_menu.png" /&gt;
&lt;p&gt;Install Docker&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install software-properties-common
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo add-apt-repository ppa:dotcloud/lxc-docker
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install lxc-docker
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker should have been installed and started up. lets test to make sure it works.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps
ID                  IMAGE               COMMAND             CREATED             STATUS              PORTS

&lt;span class="nv"&gt;$ &lt;/span&gt;docker version
Client version: 0.4.0
Server version: 0.4.0
Go version: go1.0.3

&lt;span class="nv"&gt;$ &lt;/span&gt;docker run base /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully it worked. If not, feel free to ask questions on #docker on freenode, or &lt;a class="reference external" href="https://github.com/dotcloud/docker/issues?labels=doc&amp;amp;state=open"&gt;submit a support ticket&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully now you have the knowledge to go and setup your own Docker server on Digital Ocean. If you have any issues, or questions feel free to submit the questions below or visit #docker on freenode&lt;/p&gt;
&lt;/div&gt;
</summary><category term="docker"></category><category term="digital-ocean"></category><category term="ubuntu"></category><category term="kernel"></category><category term="lxc"></category><category term="aufs"></category></entry><entry><title>Getting Docker up and running on a RaspberryPi</title><link href="http://kencochrane.net/blog/2013/05/running-docker-on-a-raspberrypi/" rel="alternate"></link><updated>2013-05-17T15:30:24-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2013-05-17:blog/2013/05/running-docker-on-a-raspberrypi/</id><summary type="html">&lt;p&gt;This year I attended &lt;a class="reference external" href="https://us.pycon.org/2013/"&gt;PyCon US&lt;/a&gt; and I was lucky enough to get a FREE &lt;a class="reference external" href="http://www.raspberrypi.org"&gt;RaspberryPi&lt;/a&gt;. At the same conference &lt;a class="reference external" href="http://www.dotcloud.com"&gt;dotCloud&lt;/a&gt; (The company I work for), was giving a lightning talk for a project that we have been working on, called Docker. &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; is a tool that allows you to better manage your Linux Containers (&lt;a class="reference external" href="http://lxc.sourceforge.net"&gt;LXC&lt;/a&gt;). Shortly after I got the RaspberryPi, I started wondering if it would be possible to run Docker on it.&lt;/p&gt;
&lt;img alt="/static/rpi/RaspberryPi.jpg" class="img-polaroid align-center" id="raspberrypi-image" src="/static/rpi/RaspberryPi.jpg" /&gt;
&lt;p&gt;I did some digging and technically speaking the Pi should be able to run Docker, it satisfies all of the requirements.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;LXC&lt;/li&gt;
&lt;li&gt;AUFS&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Getting it up and running isn't going to be easy. The Linux kernels that come with the different Linux distros for the RaspberryPi, are kind of old, and don't come with AUFS built in. The RaspberryPi also runs on an ARM based chip, and it is only 32bit. Currently Docker only supports 64bit OS's. There are plans to add 32 bit support in the future, but it isn't there yet.&lt;/p&gt;
&lt;p&gt;Doing some research I was able to find blog posts on how to get LXC and AUFS up and running on the RaspberryPi. Using those guides, I was able to make some progress but I'm not all of the way there yet. I'm hoping to describe my steps here so that others can see what I have done, and if they want, help me get over the hump.&lt;/p&gt;
&lt;div class="section" id="goals"&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;p&gt;My goals for the project is to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;provide a prebuilt image that people can download that has everything they needed in order to get started.&lt;/li&gt;
&lt;li&gt;I also want to provide a prebuilt kernel, people can download and use without having to build their own.&lt;/li&gt;
&lt;li&gt;Port Docker to 32bit so that it will run on RaspberryPi and provide a Debian package for easy install.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="instructions"&gt;
&lt;h2&gt;Instructions&lt;/h2&gt;
&lt;p&gt;Here are the steps that I used to make it so that my RaspberryPi could run Docker. These are still a work in progress, so please let me know if you have any issues, or you found a better way to do this.&lt;/p&gt;
&lt;div class="section" id="install-linux-os"&gt;
&lt;h3&gt;Install Linux OS&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download &lt;a class="reference external" href="http://www.raspberrypi.org/downloads"&gt;Raspbian&lt;/a&gt; and &lt;a class="reference external" href="http://elinux.org/RPi_Easy_SD_Card_Setup"&gt;make an SD card&lt;/a&gt; (I used the 2013-02-09-wheezy-raspbian.zip image)&lt;/li&gt;
&lt;li&gt;Once you have the SD card, put it in the Pi and boot it up.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="update-and-prepare-raspbian"&gt;
&lt;h3&gt;Update and Prepare Raspbian&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Switch to Root User on the Pi. These commands must be run as root. You can also use &amp;quot;su&amp;quot; or &amp;quot;sudo&amp;quot;, what ever you prefer:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo su root
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Expand to fill SD card and reboot after entering:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;raspi-config
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Update Raspbian&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update

&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get dist-upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Install git&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install git-core
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Update Firmware&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The clone will take a while. You might consider cloning on a desktop machine to save time. Just transfer the firmware/boot and modules/ directories from your desktop PC to the Pi after the checkout. Be aware that checking out on some OS's that are case insensitive, may result in some files being missing. If you see funky issues, this might be the cause.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/raspberrypi/firmware.git

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;firmware/boot

&lt;span class="nv"&gt;$ &lt;/span&gt;cp * /boot

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../modules

&lt;span class="nv"&gt;$ &lt;/span&gt;cp -r * /lib/modules

&lt;span class="nv"&gt;$ &lt;/span&gt;reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Increase the Swap File Size&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I found that in order to check out the source on the Pi, you’ll need a swap file with the 256MB Pi, otherwise it will run out of RAM during the checkout (with fatal: index-pack failed).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# use your favorite editor here.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pico /etc/dphys-swapfile

&lt;span class="c"&gt;# change to 500 (MB)&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo dphys-swapfile setup

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;Prepare to Build Kernel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are going to use the 3.6 kernel since it is the lastest stable one. There is an effort to get &lt;a class="reference external" href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=87&amp;amp;t=40664"&gt;3.8 working&lt;/a&gt;, it isn't 100% there yet, for more info see.&lt;/p&gt;
&lt;p&gt;The clone will take a while. Again, you may consider using a desktop PC. Of course, if you do that, you’ll need to issue the “zcat” command from your Pi and copy the resulting “.config” file to the “linux” directory on your desktop PC.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt

&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir raspberrypi

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;raspberrypi

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/raspberrypi/linux.git

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;linux

&lt;span class="nv"&gt;$ &lt;/span&gt;zcat /proc/config.gz &amp;gt; .config
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="8"&gt;
&lt;li&gt;Decrease the Swap Space File&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pico /etc/dphys-swapfile

&lt;span class="c"&gt;# change to 100 (MB)&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo dphys-swapfile setup

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="9"&gt;
&lt;li&gt;Install Packages for Kernel Compilation&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install ncurses-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="10"&gt;
&lt;li&gt;Adding AUFS Patches&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/raspberrypi/linux

git clone git://aufs.git.sourceforge.net/gitroot/aufs/aufs3-standalone.git
&lt;span class="nb"&gt;cd &lt;/span&gt;aufs3-standalone
git checkout origin/aufs3.6
cp -rp *.patch ../
cp -rp fs ../
cp -rp Documentation/ ../
cp -rp include/ ../
&lt;span class="nb"&gt;cd&lt;/span&gt; ..

patch -p1 &amp;lt; aufs3-base.patch
patch -p1 &amp;lt; aufs3-proc_map.patch
patch -p1 &amp;lt; aufs3-standalone.patch
patch -p1 &amp;lt; aufs3-kbuild.patch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you get this error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@raspberrypi:/opt/raspberrypi/linux# patch -p1 &amp;lt; aufs3-kbuild.patch
patching file fs/Kconfig
patching file fs/Makefile
patching file include/linux/Kbuild
Hunk &lt;span class="c"&gt;#1 FAILED at 66.&lt;/span&gt;
1 out of 1 hunk FAILED -- saving rejects to file include/linux/Kbuild.rej
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you will need to manually update include/linux/Kbuild because the patch failed.&lt;/p&gt;
&lt;p&gt;First I reverted change on the file, and manually added. the line (below) to line 66, below audit.h&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;header-y +&lt;span class="o"&gt;=&lt;/span&gt; aufs_type.h
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;here is my git diff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;diff --git a/include/linux/Kbuild b/include/linux/Kbuild
index fa21760..ee029e3 100644
--- a/include/linux/Kbuild
+++ b/include/linux/Kbuild
@@ -66,6 +66,7 @@ header-y +&lt;span class="o"&gt;=&lt;/span&gt; atmppp.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; atmsap.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; atmsvc.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; audit.h
+header-y +&lt;span class="o"&gt;=&lt;/span&gt; aufs_type.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; auto_fs.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; auto_fs4.h
 header-y +&lt;span class="o"&gt;=&lt;/span&gt; auxvec.h
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="11"&gt;
&lt;li&gt;Configuring Kernel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You’ll now need to set some kernel options to support LXC, via the menu config tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/raspberrypi/linx

&lt;span class="nv"&gt;$ &lt;/span&gt;make menuconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You need to enable these options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;General -&amp;gt; Control Group Support -&amp;gt; Memory Resource Controller for Control Groups (&lt;em&gt;and its three child options&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="/static/rpi/raspberrypi_kernel_config_1.png" class="img-polaroid align-left" id="linux-kernel-config-1-memory-controller" src="/static/rpi/raspberrypi_kernel_config_1.png" /&gt;
&lt;p&gt;(this has high overhead;only enable if you really need it, or else enable and remember to disable using the Kernel command line option “cgroup_disable=memory”) (image not shown)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;General -&amp;gt; Control Group Support -&amp;gt; cpuset support&lt;/li&gt;
&lt;li&gt;Device Drivers -&amp;gt; Character Devices -&amp;gt; Support multiple instances of devpts&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="/static/rpi/raspberrypi_kernel_config_2.png" class="img-polaroid align-left" id="linux-kernel-config-2-devpts" src="/static/rpi/raspberrypi_kernel_config_2.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Device Drivers -&amp;gt; Network Device Support -&amp;gt; Virtual ethernet pair device&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="/static/rpi/raspberrypi_kernel_config_3.png" class="img-polaroid align-left" id="linux-kernel-config-3-virtual-ethernet-pair-device" src="/static/rpi/raspberrypi_kernel_config_3.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;File Systems --&amp;gt; Miscellaneous filesystems -&amp;gt;select &amp;quot;Aufs (Advanced multi layered unification filesystem) support (NEW)&amp;quot; (mine was the the very bottom)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="/static/rpi/docker_rasberrypi_aufs_kernel_config.png" class="img-polaroid align-left" id="linux-kernel-config-4-aufs" src="/static/rpi/docker_rasberrypi_aufs_kernel_config.png" /&gt;
&lt;ol class="arabic simple" start="12"&gt;
&lt;li&gt;Build Kernel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This could take many hours if you compile on the Pi, there are ways to &lt;a class="reference external" href="http://elinux.org/RPi_Kernel_Compilation#2._Cross_compiling_from_Linux"&gt;compile on another machine&lt;/a&gt; and transfer the kernel to the Pi when completed. If you are in a hurry, use this approach.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make

&lt;span class="nv"&gt;$ &lt;/span&gt;make modules_install

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/raspberrypi

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/raspberrypi/tools.git

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;tools/mkimage

&lt;span class="nv"&gt;$ &lt;/span&gt;python ./imagetool-uncompressed.py /opt/raspberrypi/linux/arch/arm/boot/Image

&lt;span class="nv"&gt;$ &lt;/span&gt;cp /boot/kernel.img /boot/kernel-old.img

&lt;span class="nv"&gt;$ &lt;/span&gt;cp kernel.img /boot/

&lt;span class="nv"&gt;$ &lt;/span&gt;reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="13"&gt;
&lt;li&gt;Download Latest LXC&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The LXC tools provided with Raspbian are out-of-date, so let's update to the latest version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir /opt/lxc

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/lxc

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/lxc/lxc.git

&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install automake libcap-dev

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;lxc

&lt;span class="nv"&gt;$ &lt;/span&gt;./autogen.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Testing the Install&lt;/p&gt;
&lt;p&gt;Check LXC is happy with your kernel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lxc-checkconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;User namespace should be “missing” (it checks for a kernel option that no longer exists) and Cgroup namespace should say “required”.&lt;/p&gt;
&lt;ol class="arabic simple" start="14"&gt;
&lt;li&gt;Installing Go&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you install Go using the Go package that is available (apt-get install golang). You will get a floating point issue. For more information about the floating point issues see this page.  &lt;a class="reference external" href="http://www.raspberrypi.org/phpBB3/viewtopic.php?p=129647"&gt;http://www.raspberrypi.org/phpBB3/viewtopic.php?p=129647&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To get it to work, we will compile Go from source. Feel free to change the location on where we are installing it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install -y mercurial gcc libc6-dev

&lt;span class="nv"&gt;$ &lt;/span&gt;hg clone -u default https://code.google.com/p/go &lt;span class="nv"&gt;$HOME&lt;/span&gt;/go
warning: code.google.com certificate with fingerprint 9f:af:b9:ce:b5:10:97:c0:5d:16:90:11:63:78:fa:2f:37:f4:96:79 not verified &lt;span class="o"&gt;(&lt;/span&gt;check hostfingerprints or web.cacerts config setting&lt;span class="o"&gt;)&lt;/span&gt;
destination directory: go
requesting all changes
adding changesets
adding manifests
adding file changes
added 14430 changesets with 52478 changes to 7406 files &lt;span class="o"&gt;(&lt;/span&gt;+5 heads&lt;span class="o"&gt;)&lt;/span&gt;
updating to branch default
3520 files updated, 0 files merged, 0 files removed, 0 files unresolved

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/go/src
&lt;span class="nv"&gt;$ &lt;/span&gt;./all.bash

ALL TESTS PASSED

---
Installed Go &lt;span class="k"&gt;for &lt;/span&gt;linux/arm in /home/dfc/go
Installed commands in /home/dfc/go/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there was an error relating to out of memory, or you couldn’t configure an appropriate swap device, you can skip the test suite by executing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/go
&lt;span class="nv"&gt;$ &lt;/span&gt;./make.bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as an alternative to ./all.bash.&lt;/p&gt;
&lt;p&gt;The go command needs to be added to your $PATH, you should also edit your profile script (.bashrc, etc) to include these changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$HOME&lt;/span&gt;/go/bin
&lt;span class="nv"&gt;$ &lt;/span&gt;go version
go version devel +30c566874b83 Wed May 08 16:06:25 2013 -0700 linux/arm
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="15"&gt;
&lt;li&gt;Installing Docker&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get -y install wget bsdtar curl git

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GOPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/docker/go/
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p &lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/src/github.com/dotcloud
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/src/github.com/dotcloud
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/dotcloud/docker.git  &lt;span class="c"&gt;# or clone your own fork/branch&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;docker

&lt;span class="nv"&gt;$ &lt;/span&gt;go get -v github.com/dotcloud/docker/...
&lt;span class="nv"&gt;$ &lt;/span&gt;go install -v github.com/dotcloud/docker/...

&lt;span class="nv"&gt;$ &lt;/span&gt;docker version
&lt;span class="nv"&gt;$ &lt;/span&gt;docker -d
The docker runtime currently only supports amd64 &lt;span class="o"&gt;(&lt;/span&gt;not arm&lt;span class="o"&gt;)&lt;/span&gt;. This will change in the future. Aborting.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker is installed but due to current limitations it won't run. It is a start, we now have a development environment to start hacking on Docker to get it to work with the RaspberryPi.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Now we have everything up and running, we need to change docker so that it will work on the ARM with only 32bit support.&lt;/li&gt;
&lt;li&gt;I need to take my compiled kernel and make it downloadable to others&lt;/li&gt;
&lt;li&gt;I need to make an SD card image of my setup for easy download, so that people can get started easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-help"&gt;
&lt;h2&gt;Want to Help?&lt;/h2&gt;
&lt;p&gt;If you want to help me with this, please send me a message on twitter &lt;a class="reference external" href="https://twitter.com/kencochrane"&gt;&amp;#64;KenCochrane&lt;/a&gt; and also add your name to this &lt;a class="reference external" href="https://github.com/dotcloud/docker/issues/636"&gt;Docker issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources:&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;LXC: &lt;a class="reference external" href="http://raspberrypicloud.wordpress.com/2013/03/12/building-an-lxc-friendly-kernel-for-the-raspberry-pi/"&gt;http://raspberrypicloud.wordpress.com/2013/03/12/building-an-lxc-friendly-kernel-for-the-raspberry-pi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AUFS: &lt;a class="reference external" href="http://rpitc.blogspot.sg/p/kernel-rebuild.html"&gt;http://rpitc.blogspot.sg/p/kernel-rebuild.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go: &lt;a class="reference external" href="http://dave.cheney.net/tag/go-golang-raspberrypi"&gt;http://dave.cheney.net/tag/go-golang-raspberrypi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker: &lt;a class="reference external" href="http://docs.docker.io/en/latest/contributing/devenvironment.html"&gt;http://docs.docker.io/en/latest/contributing/devenvironment.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="docker"></category><category term="dotcloud"></category><category term="raspberrypi"></category><category term="linux"></category><category term="kernel"></category><category term="aufs"></category><category term="lxc"></category><category term="go"></category><category term="raspbian"></category></entry><entry><title>Upgrading the Ubuntu linux kernel on Rackspace cloud</title><link href="http://kencochrane.net/blog/2013/05/upgrading-linux-kernel-ubuntu-rackspace-cloud/" rel="alternate"></link><updated>2013-05-12T12:41:48-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2013-05-12:blog/2013/05/upgrading-linux-kernel-ubuntu-rackspace-cloud/</id><summary type="html">&lt;p&gt;Yesterday I wrote a &lt;a class="reference external" href="http://kencochrane.net/blog/2013/05/running-docker-on-rackspace-cloud/"&gt;blog post&lt;/a&gt; on how to install &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; on to &lt;a class="reference external" href="http://www.rackspace.com/cloud/servers/"&gt;RackSpace Cloud&lt;/a&gt;, and one of the steps was to upgrade the kernel to the lastest one so that Docker would be nice and stable. The problem that I found out was that there wasn't much information how to upgrade the kernel on the Rackspace Cloud servers, so I thought I would put the steps here.&lt;/p&gt;
&lt;p&gt;The goal here is to upgrade Ubuntu 12.04 and 12.10 so that it has the same kernel as 13.04. Here are the steps.&lt;/p&gt;
&lt;div class="section" id="ubuntu-12-04"&gt;
&lt;h2&gt;Ubuntu 12.04&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 12.04 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-04 3.2.0-38-virtual &lt;span class="c"&gt;#61-Ubuntu SMP Tue Feb 19 12:37:47 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the 3.8.x kernel using the PPA&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# install the new kernel&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install linux-generic-lts-raring

&lt;span class="c"&gt;# update grub so it will use the new kernel after we reboot&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;update-grub

&lt;span class="c"&gt;# update-grub doesn&amp;#39;t always work so lets make sure. ``/boot/grub/menu.lst`` was updated.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst

&lt;span class="c"&gt;# nope it wasn&amp;#39;t lets manually update ``/boot/grub/menu.lst``  (make sure you are searching for correct kernel version, look at initial uname -a results.)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sed -i s/3.2.0-38-virtual/3.8.0-19-generic/ /boot/grub/menu.lst

&lt;span class="c"&gt;# once again lets make sure it worked.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic
kernel          /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hvc0
initrd          /boot/initrd.img-3.8.0-19-generic
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic &lt;span class="o"&gt;(&lt;/span&gt;recovery mode&lt;span class="o"&gt;)&lt;/span&gt;
kernel          /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash  single
initrd          /boot/initrd.img-3.8.0-19-generic

&lt;span class="c"&gt;# much better.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot server (either via command line or console)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;login again and check to make sure the kernel was updated&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server_ip&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-04 3.8.0-19-generic &lt;span class="c"&gt;#30~precise1-Ubuntu SMP Wed May 1 22:26:36 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;

&lt;span class="c"&gt;# nice 3.8.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu-12-10"&gt;
&lt;h2&gt;Ubuntu 12.10&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 12.10 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-10 3.5.0-25-generic &lt;span class="c"&gt;#39-Ubuntu SMP Mon Feb 25 18:26:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the 3.8.x kernel using the ubuntu-x-swat PPA&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# add the ppa to get the right kernel package&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;deb http://ppa.launchpad.net/ubuntu-x-swat/q-lts-backport/ubuntu quantal main &amp;gt; /etc/apt/sources.list.d/xswat.list

&lt;span class="c"&gt;# add the key for the ppa&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B22AB97AF1CDFA9

&lt;span class="c"&gt;# update packages again&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update

&lt;span class="c"&gt;# install the new kernel&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install linux-image-3.8.0-19-generic

&lt;span class="c"&gt;# make sure grub has been updated.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst
title   Ubuntu 12.10, kernel 3.8.0-19-generic
kernel  /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hvc0
initrd  /boot/initrd.img-3.8.0-19-generic
title   Ubuntu 12.10, kernel 3.8.0-19-generic &lt;span class="o"&gt;(&lt;/span&gt;recovery mode&lt;span class="o"&gt;)&lt;/span&gt;
kernel  /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash  single
initrd  /boot/initrd.img-3.8.0-19-generic

&lt;span class="c"&gt;# looks good. If it doesn&amp;#39;t work for you, look at the notes for 12.04 to fix.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot server (either via command line or console)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;login again and check to make sure the kernel was updated&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server_ip&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-10 3.8.0-19-generic &lt;span class="c"&gt;#29~precise2-Ubuntu SMP Fri Apr 19 16:15:35 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;

&lt;span class="c"&gt;# nice 3.8.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="rackspace"></category><category term="kernel"></category><category term="ubuntu"></category></entry><entry><title>Running Docker on Rackspace with Ubuntu</title><link href="http://kencochrane.net/blog/2013/05/running-docker-on-rackspace-cloud/" rel="alternate"></link><updated>2013-05-11T12:17:48-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2013-05-11:blog/2013/05/running-docker-on-rackspace-cloud/</id><summary type="html">&lt;p&gt;I have been playing with &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; a lot lately, and it got me wondering how hard it would be to run Docker on the different Cloud providers. I noticed there were already directions on how to install on &lt;a class="reference external" href="http://docs.docker.io/en/latest/installation/amazon.html"&gt;Amazon EC2&lt;/a&gt; but nothing for the Rackspace Cloud.&lt;/p&gt;
&lt;p&gt;If you would like to run &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; on the &lt;a class="reference external" href="http://www.rackspace.com/cloud/servers/"&gt;RackSpace Cloud&lt;/a&gt; using &lt;a class="reference external" href="http://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt; you're in luck. I just spent the afternoon figuring out how to get it installed on Ubuntu 12.04, 12.10, and 13.04, and I have included my notes below. 13.04 is the easiest to get up and running since it has the most recent kernel, but the others aren't too bad either, they just need a few more steps, to get them up to par.&lt;/p&gt;
&lt;p&gt;I would love to expand this to other distros on Rackspace, so if you come up with more, send me a note, and so I can link to them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: 05-12-2013&lt;/strong&gt; I have updated some information given some feedback by others. Also added a troubleshooting section.&lt;/p&gt;
&lt;div class="section" id="ubuntu-12-04"&gt;
&lt;h2&gt;Ubuntu 12.04&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 12.04 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-04 3.2.0-38-virtual &lt;span class="c"&gt;#61-Ubuntu SMP Tue Feb 19 12:37:47 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now lets install Docker and it's dependencies. To keep things simple, we will use the Docker install script. It will take a couple of minutes. (see below if you want to install via package)&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl get.docker.io | sudo sh -x
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Docker runs best with a new kernel, so lets use 3.8.x&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# install the new kernel&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install linux-generic-lts-raring

&lt;span class="c"&gt;# update grub so it will use the new kernel after we reboot&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;update-grub

&lt;span class="c"&gt;# update-grub doesn&amp;#39;t always work so lets make sure. ``/boot/grub/menu.lst`` was updated.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst

&lt;span class="c"&gt;# nope it wasn&amp;#39;t lets manually update ``/boot/grub/menu.lst``  (make sure you are searching for correct kernel version, look at initial uname -a results.)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sed -i s/3.2.0-38-virtual/3.8.0-19-generic/ /boot/grub/menu.lst

&lt;span class="c"&gt;# once again lets make sure it worked.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic
kernel          /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hvc0
initrd          /boot/initrd.img-3.8.0-19-generic
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic &lt;span class="o"&gt;(&lt;/span&gt;recovery mode&lt;span class="o"&gt;)&lt;/span&gt;
kernel          /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash  single
initrd          /boot/initrd.img-3.8.0-19-generic

&lt;span class="c"&gt;# much better.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot server (either via command line or console)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;login again and check to make sure the kernel was updated&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server_ip&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-04 3.8.0-19-generic &lt;span class="c"&gt;#30~precise1-Ubuntu SMP Wed May 1 22:26:36 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;

&lt;span class="c"&gt;# nice 3.8.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure docker is running and test it out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start dockerd
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull busybox
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run busybox /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="alternate-install"&gt;
&lt;h3&gt;Alternate install&lt;/h3&gt;
&lt;p&gt;If you don't want to run the get.docker.io script and want to use packages instead, you can use the docker PPA. Here is how you use it. Replace step 5 with the following 3 steps.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add the custom package sources to your apt sources list. Copy and paste the following lines at once.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo sh -c &lt;span class="s2"&gt;&amp;quot;echo &amp;#39;deb http://ppa.launchpad.net/dotcloud/lxc-docker/ubuntu precise main&amp;#39; &amp;gt;&amp;gt; /etc/apt/sources.list&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Update your sources. You will see a warning that GPG signatures cannot be verified.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Now install it, you will see another warning that the package cannot be authenticated. Confirm install.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install lxc-docker
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu-12-10"&gt;
&lt;h2&gt;Ubuntu 12.10&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 12.10 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-10 3.5.0-25-generic &lt;span class="c"&gt;#39-Ubuntu SMP Mon Feb 25 18:26:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now lets install Docker and it's dependencies. To keep things simple, we will use the Docker install script. It will take a couple of minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl get.docker.io | sudo sh -x
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Docker runs best with a new kernel, so lets use 3.8.x&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# add the ppa to get the right kernel package&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;deb http://ppa.launchpad.net/ubuntu-x-swat/q-lts-backport/ubuntu quantal main &amp;gt; /etc/apt/sources.list.d/xswat.list

&lt;span class="c"&gt;# add the key for the ppa&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B22AB97AF1CDFA9

&lt;span class="c"&gt;# update packages again&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update

&lt;span class="c"&gt;# install the new kernel&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install linux-image-3.8.0-19-generic

&lt;span class="c"&gt;# make sure grub has been updated.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst
title   Ubuntu 12.10, kernel 3.8.0-19-generic
kernel  /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hvc0
initrd  /boot/initrd.img-3.8.0-19-generic
title   Ubuntu 12.10, kernel 3.8.0-19-generic &lt;span class="o"&gt;(&lt;/span&gt;recovery mode&lt;span class="o"&gt;)&lt;/span&gt;
kernel  /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash  single
initrd  /boot/initrd.img-3.8.0-19-generic

&lt;span class="c"&gt;# looks good. If it doesn&amp;#39;t work for you, look at the notes for 12.04 to fix.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot server (either via command line or console)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;login again and check to make sure the kernel was updated&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server_ip&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-10 3.8.0-19-generic &lt;span class="c"&gt;#29~precise2-Ubuntu SMP Fri Apr 19 16:15:35 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;

&lt;span class="c"&gt;# nice 3.8.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure docker is running and test it out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start dockerd
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull busybox
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run busybox /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu-13-04"&gt;
&lt;h2&gt;Ubuntu 13.04&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 13.04 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-1304 3.8.0-19-generic &lt;span class="c"&gt;#29-Ubuntu SMP Wed Apr 17 18:16:28 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now lets install Docker and it's dependencies. To keep things simple, we will use the Docker install script. It will take a couple of minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl get.docker.io | sudo sh -x
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure docker is running and test it out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start dockerd
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull busybox
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run busybox /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;Now that you have Docker running on a server, you can look at the different &lt;a class="reference external" href="http://docs.docker.io/en/latest/examples/"&gt;Docker examples&lt;/a&gt; in the documentation to see how it works, and then build something, and let everyone know what you have built. If you have any issues or suggestions, open a github issue and let everyone know. Docker is a new project, and it is moving quick, so any suggestions that you have might help shape the future of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trouble-shooting"&gt;
&lt;h2&gt;Trouble shooting&lt;/h2&gt;
&lt;p&gt;If you are pulling a repo and you get an error like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Error: &lt;span class="nb"&gt;exit &lt;/span&gt;status 1: bsdtar: Linkname can&lt;span class="s1"&gt;&amp;#39;t be converted from UTF-8 to current locale.&lt;/span&gt;
&lt;span class="s1"&gt;bsdtar: Linkname can&amp;#39;&lt;/span&gt;t be converted from UTF-8 to current locale.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It means the the docker daemon doesn't have the correct locales loaded on startup. To fix it make sure your init script looks something like this.&lt;/p&gt;
&lt;p&gt;Make sure the path to the docker binary is correct because in some installs it might be &lt;tt class="docutils literal"&gt;/usr/local/bin&lt;/tt&gt; and others &lt;tt class="docutils literal"&gt;/usr/local/&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;description     &lt;span class="s2"&gt;&amp;quot;Run docker&amp;quot;&lt;/span&gt;

start on runlevel &lt;span class="o"&gt;[&lt;/span&gt;2345&lt;span class="o"&gt;]&lt;/span&gt;
stop on starting rc &lt;span class="nv"&gt;RUNLEVEL&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;016&lt;span class="o"&gt;]&lt;/span&gt;
respawn

script
    &lt;span class="nb"&gt;test&lt;/span&gt; -f /etc/default/locale &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; . /etc/default/locale &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LANG&lt;/span&gt; &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LANG&lt;/span&gt; /usr/local/bin/docker -d
end script
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="docker"></category><category term="rackspace"></category><category term="dotcloud"></category><category term="ubuntu"></category><category term="kernel"></category><category term="lxc"></category><category term="aufs"></category></entry><entry><title>Intro to Python and Django Presentation</title><link href="http://kencochrane.net/blog/2013/02/intro-to-python-and-django-presentation/" rel="alternate"></link><updated>2013-02-19T08:24:24-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2013-02-19:blog/2013/02/intro-to-python-and-django-presentation/</id><summary type="html">&lt;p&gt;I recently gave a talk at a &lt;a class="reference external" href="http://www.DjangoMaine.com"&gt;DjangoMaine&lt;/a&gt; meetup introducing folks to &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="http://www.djangoproject.com"&gt;Django&lt;/a&gt;. There wasn't enough time to go over everything, so I tried to pick and choose the parts that I felt where important to go over, in order to have a good overview of what Python and Django is all about.&lt;/p&gt;
&lt;p&gt;I hope this was useful to the folks that attended. If so, it would be really helpful to know what parts you would like to know more about. Then we can have some follow up talks doing a deeper dive into those select topics.&lt;/p&gt;
&lt;div class="section" id="future-tutorials"&gt;
&lt;h2&gt;Future Tutorials&lt;/h2&gt;
&lt;p&gt;Also, if there is a demand, I'm willing to do a half or whole day Python and Django tutorial, where we would be able to take the time needed to go into all the different topics, so that you would have a good understanding of each one, when you left. Ideally I would probably break up the sessions into beginner, intermediate, and advanced so that people can move to the different levels as they get more familiar and comfortable with Django.&lt;/p&gt;
&lt;p&gt;I would also like to offer a talk to local high schools. If we have enough kids that are interested, I'd be willing to go to your high school and give a talk and introduce these topics to the kids.&lt;/p&gt;
&lt;p&gt;If you are interested in learning more about Django, please let me know. I don't want to waste my time doing all the work preparing for a tutorial, if there isn't enough demand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slides"&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;We didn't record the talk, but you can find my slides below.&lt;/p&gt;
&lt;div style="width: 710px;height: 612px;" id="slides_container"&gt; &lt;script async class="speakerdeck-embed" data-id="21c679705ccf0130a3061231381a97d7" data-ratio="1.2994923857868" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="download"&gt;
&lt;h2&gt;Download&lt;/h2&gt;
&lt;p&gt;The slides are also available to download in pdf form: &lt;a class="reference external" href="https://speakerd.s3.amazonaws.com/presentations/21c679705ccf0130a3061231381a97d7/intro-to-python-django_v2.pdf"&gt;Intro to Python and Django Presentation slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have any questions, or comments, feel free to contact me via the comments below, or on Twitter (&amp;#64;KenCochrane)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="djangomaine"></category></entry><entry><title>Dear Recruiters</title><link href="http://kencochrane.net/blog/2013/02/dear-recruiters/" rel="alternate"></link><updated>2013-02-06T20:17:48-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2013-02-06:blog/2013/02/dear-recruiters/</id><summary type="html">&lt;p&gt;Dear Recruiters,&lt;/p&gt;
&lt;p&gt;You are probably reading this because I sent you a link in response to a recent job you contacted me about. Since most of you know nothing about me (even though most of this information is on my &lt;a class="reference external" href="http://www.linkedin.com/in/kencochrane"&gt;LinkedIn&lt;/a&gt; page). I'm going to tell you a little bit about myself, and after reading this if you feel the job that you are trying to fill, is a good match for me, then feel free to respond. If you are going to respond, please make sure you follow the criteria I listed at the bottom of the page.&lt;/p&gt;
&lt;div class="section" id="about-me"&gt;
&lt;h2&gt;About Me:&lt;/h2&gt;
&lt;p&gt;I currently work for a great company called &lt;a class="reference external" href="http://www.dotcloud.com"&gt;dotCloud&lt;/a&gt;, which is based in San Francisco, and I'm happy. So it would take a really good offer to even make me think about wanting to leave. What is a really good offer you might ask? I list my current minimum offer towards the bottom of the page.&lt;/p&gt;
&lt;p&gt;Even though the company that I work for is based in San Francisco, I do not live there, I live in &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Portland,_Maine"&gt;Southern Maine&lt;/a&gt;. So, unless this job of yours allows remote workers, don't even bother. Also, unless you plan on covering the cost of selling my house, don't even mention relocation assistance.&lt;/p&gt;
&lt;p&gt;I like the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Language&lt;/strong&gt;: Python&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server OS&lt;/strong&gt;: Linux&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Desktop OS&lt;/strong&gt;: OSX&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Databases&lt;/strong&gt;: MySQL, PostgreSQL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Stores&lt;/strong&gt;: Redis, MongoDB&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version control&lt;/strong&gt;: git, mercurial&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web Server&lt;/strong&gt;: nginx&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Javascript library&lt;/strong&gt;: jQuery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following are deal breakers for me. If I have to work with the following technologies. Don't even bother.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;.NET&lt;/li&gt;
&lt;li&gt;Microsoft Windows (any flavor)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="minimum-offer"&gt;
&lt;h2&gt;Minimum offer:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I don't make this today, but like I said before, it would need to be a really good offer before I would consider leaving my current job.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Salary&lt;/strong&gt;: $200,000+&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vacation&lt;/strong&gt;: 6 weeks&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signing bonus&lt;/strong&gt;: $25,000+ including Stock options&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Company&lt;/strong&gt;: Needs to be technology company doing cool and exciting things. I prefer smaller companies, and don't want to work for a big company that has lots of office politics that get in the way of getting things done.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="offer-criteria"&gt;
&lt;h2&gt;Offer Criteria:&lt;/h2&gt;
&lt;p&gt;If you have read all of the above, and you still feel you have a job that is right for me, then please send me the following information. &lt;strong&gt;Failure to do so, will result in your message getting deleted with no reply.&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The name of the company and their location&lt;/li&gt;
&lt;li&gt;The salary. (Don't say, it depends on experience, look at my &lt;a class="reference external" href="http://www.linkedin.com/in/kencochrane"&gt;LinkedIn&lt;/a&gt; profile, figure out how much experience I have and then tell me the salary you are offering.)&lt;/li&gt;
&lt;li&gt;A description of the job you would like me to apply for.&lt;/li&gt;
&lt;li&gt;The list of the current technologies related to the job in question.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If I read your message and I find it interesting, I will be in contact. If you don't hear from me, assume I'm not interested and please don't keep badgering me. It isn't very becoming of you.&lt;/p&gt;
&lt;p&gt;Sincerely,&lt;/p&gt;
&lt;p&gt;Ken Cochrane&lt;/p&gt;
&lt;/div&gt;
</summary><category term="recruiters"></category></entry><entry><title>New Pelican Based Blog</title><link href="http://kencochrane.net/blog/2012/12/new-pelican-based-blog/" rel="alternate"></link><updated>2012-12-09T03:17:48-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2012-12-09:blog/2012/12/new-pelican-based-blog/</id><summary type="html">&lt;p&gt;I have recently changed my Django based blog to a statically generated blog based on &lt;a class="reference external" href="http://getpelican.com"&gt;Pelican&lt;/a&gt;, and hosted by &lt;a class="reference external" href="http://pages.github.com"&gt;GitHub Pages&lt;/a&gt;. This is for a couple of reasons.&lt;/p&gt;
&lt;p&gt;The first reason was because my blog is really simple, it was just a bunch of reStructuredText documents that were converted to HTML. I didn't need the Django-admin features and I always felt it was a little overkill for my blog.&lt;/p&gt;
&lt;p&gt;The second reason was because I wanted to host my blog contents on GitHub so that others could change/update/edit my blog posts and send me pull requests if they have something good to add. Doing this with my old blog would have been hard, but it will be really easy with this current setup.&lt;/p&gt;
&lt;p&gt;I was looking through all of the different static generators, and boy there are a lot of them. I decided to pick pelican because it did what I needed, and was real easy to setup and use.&lt;/p&gt;
&lt;p&gt;My requirements for a site generator:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python: I wanted it python based, in case it needed any changes, I wouldn't need much of a learning curve learning a new language.&lt;/li&gt;
&lt;li&gt;Open Source: I wanted to have the ability to change it to add my own features in case it doesn't have them to start. Plus Open Source code rules.&lt;/li&gt;
&lt;li&gt;reStructureText: I wanted to write my blog posts in ReST.&lt;/li&gt;
&lt;li&gt;Themes: I wanted some out of the box themes that I could pick from and customize&lt;/li&gt;
&lt;li&gt;Easy: I wanted something with minimum setup and overhead to get started.&lt;/li&gt;
&lt;li&gt;Maintain Links: I wanted to keep the same URL structure from my old blog so I wouldn't get lots of 404 errors once I converted.&lt;/li&gt;
&lt;li&gt;Active development: I wanted a project that is currently under active development.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After I did some quick searches, I found Pelican, and I liked what I saw. I wrote a simple python script that pull out my blog posts from my old blog and generated the initial ReST docs, which got me most of the way there.&lt;/p&gt;
&lt;p&gt;Once I got the content pulled out, I just needed to pick a theme, and configure the settings. Then setup my github pages site, and push all the code. The last change was to change my DNS records, and then I was done.&lt;/p&gt;
&lt;p&gt;Now anytime I want to write a blog post, all I have to do is add a new ReST doc and rerun the build command, and commit my changes, and push my repo. Then github automatically updates my site. Simple as that.&lt;/p&gt;
&lt;p&gt;I'll run it from github for a little while and see how I like it. I might end up changing hosting, since github has very limited features, and doesn't allow you to add any rewrite rules or anything custom. I could have just as easily hosted on AWS s3, or &lt;a class="reference external" href="http://dotCloud.com"&gt;dotCloud&lt;/a&gt;, but I wanted to try this out first since it was pretty easy to setup.&lt;/p&gt;
&lt;p&gt;If you switched to a static site generator, or are thinking about doing it, let me know what you think and what tools you are using.&lt;/p&gt;
</summary><category term="pelican"></category><category term="blog"></category></entry><entry><title>Deploying my Django application to dotCloud: Part 2</title><link href="http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/" rel="alternate"></link><updated>2012-03-23T14:58:01-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2012-03-23:blog/2012/03/deploying-a-django-application-on-dotcloud/</id><summary type="html">&lt;p&gt;As I mentioned in a &lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/"&gt;recent blog post&lt;/a&gt;, in the 11 months since I wrote my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;first post on dotCloud&lt;/a&gt;, I now work there. Besides me working there, there has been a lot of other changes at &lt;a class="reference external" href="http://www.dotcloud.com"&gt;dotCloud&lt;/a&gt;, and I wanted to take the time to update my original post so that it was up to date and had all the recent information. I'm going to completely rewrite the old blog post here, with updated information, and leave the old one around for posterity.&lt;/p&gt;
&lt;p&gt;dotCloud's goal is to provide a bunch of different independent services that you can use as building blocks to build your application. If you need a database, take your pick from one of the many they support. Need an application that uses Django or Rails on the front end, and Java in the backend, that is fine, you can do that too. They realize that most developers don't stick to one standard technology stack for all of their applications, so this allows you the flexibility to use the best tool for the job. It also gives you a nice playground to try out new services and see how they run without having to install, configure and maintain the service just for testing.&lt;/p&gt;
&lt;p&gt;I'm going to go over the steps that it took to install my blog onto dotCloud, and hopefully answer some common questions along the way.&lt;/p&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Before I get started with any new service the first thing I usually do is look at the documentation. DotCloud has a nice list of documents along with some tutorials on how to get started. These 4 documents were the ones that I used the most.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/platform-overview/"&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/python/django/"&gt;http://docs.dotcloud.com/tutorials/python/django/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/services/mysql/"&gt;http://docs.dotcloud.com/services/mysql/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/services/mysql-masterslave/"&gt;http://docs.dotcloud.com/services/mysql-masterslave/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-steps"&gt;
&lt;h2&gt;First Steps:&lt;/h2&gt;
&lt;p&gt;Like all cool services these days, dotCloud uses a python based CLI, so before we can get started we need to install the dotCloud client and configure it so that we can start using it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# create my dotcloud virtual environment.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv dotcloud

&lt;span class="c"&gt;# install dotcloud client using pip&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install dotcloud

&lt;span class="c"&gt;# create our application called blog&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud create blog

&lt;span class="c"&gt;#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted&lt;/span&gt;
&lt;span class="c"&gt;#&amp;lt;key goes here&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;# if you were not prompted to enter your key you can run this command, and it will let you enter your API key again.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud register
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the client all setup, and an application created, now we can start building our service. I have forked my blog repository on github so that I could make dotCloud specific changes to it and not effect my original repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# go into projects directory&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects

&lt;span class="c"&gt;# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally&lt;/span&gt;
git clone git://github.com/kencochrane/kencochranenet_dotcloud.git kencochranenet_dotcloud

&lt;span class="c"&gt;# go into the new directory.&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading through the documentation tells me that I need to create a wsgi.py file and put in the root of my project. Using &lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/python/django/#wsgi-py"&gt;http://docs.dotcloud.com/tutorials/python/django/#wsgi-py&lt;/a&gt; as a template, I created my wsgi.py file below. I had issues with the default template and I needed to add a directory to the sys.path so that wsgi could find my django apps correctly. Here is my finished file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c"&gt;# Ken added this, only thing that is different from the example template (not counting settings file name)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysite.settings&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt;
&lt;span class="n"&gt;djangoapplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;djangoapplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DotCloud uses &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/#requirements-files"&gt;PIP requirements files&lt;/a&gt; to manage your project dependencies. We already have our pip requirements file where it needs to be and named correctly so we don't need to do anything, but if we didn't have one, we would need to create one and put it in the root, and call it requirements.txt&lt;/p&gt;
&lt;div class="section" id="services"&gt;
&lt;h3&gt;Services&lt;/h3&gt;
&lt;p&gt;When we add a service to our deployment stack, dotCloud gives us the appropriate connection information in a file called '/home/dotcloud/environment.json' that is available to us on our deployment container. This allows us to not have to hard code username/password and server urls in our settings.py file, and it also makes it a little more secure for us since we don't have to have that info in our source repository.&lt;/p&gt;
&lt;p&gt;This is how we use it. At the top of your settings.py file you will need to add the following. snippet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/home/dotcloud/environment.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have that added to the settings.py file, we now have a variable env that has all of the env settings we need.&lt;/p&gt;
&lt;p&gt;You could go a little further add some custom code to check if the environment.json file exists, and if it does, you know you are in production, so use that setup, or if not, then you must be in local mode, so use your local settings. If you want to get really cool, you can have your own json file that has a similar setup for local development, and if it doesn't find the dotcloud one, it could look for your own, and load your settings from that. This will allow you to use the same settings file for both production and dev, with only a little bit of code at the top to load the correct env file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;p&gt;Most applications need a database, and this blog is no different. This is how we setup our database to work with our blog on dotcloud. We are going to be using mysql for our database. With Django you need to set your database settings in your settings.py. This is how we setup a mysql database connection inside of our settings.py. Notice that the name of the database doesn't come from the env, you pick that yourself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blogdb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_LOGIN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-the-database"&gt;
&lt;h3&gt;Create the Database&lt;/h3&gt;
&lt;p&gt;dotCloud gives you your own dedicated database, with full root access. With great power comes great responsibilities. One of those responsibilities is that you need to create your own database schemas, and users yourself. Which means you normally need to do something like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# connect to dotcloud mysql server instance&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run blog.db -- mysql -u root -p

&lt;span class="c"&gt;# mysql -u root -p&lt;/span&gt;
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or &lt;span class="se"&gt;\g&lt;/span&gt;.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# create the user and database and give user permissions to database.&lt;/span&gt;

Type &lt;span class="s1"&gt;&amp;#39;help;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;\h&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;help. Type &lt;span class="s1"&gt;&amp;#39;\c&amp;#39;&lt;/span&gt; to clear the current input statement.

mysql&amp;gt; create database blogdb;
Query OK, 1 row affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; create user &lt;span class="s1"&gt;&amp;#39;blog_username&amp;#39;&lt;/span&gt; identified by &lt;span class="s1"&gt;&amp;#39;strong_password&amp;#39;&lt;/span&gt;;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.05 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; grant all on blogdb.* to &lt;span class="s1"&gt;&amp;#39;blog_user&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.04 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; flush privileges;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;;Bye
Shared connection to database closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Does that look familiar? I have it here in case you want to do it the long way.&lt;/p&gt;
&lt;p&gt;To make things easier, we are going to create a small python script that will check to see if we have our database created, and if not, it will create it for us. This will make it so that we don't have to login into our database and do it by hand before we deploy. The file is called createdb.py and this is what it looks like. This script is for mysql. If you want a postgreSQL database, you can use this as a template and change it so that it will work with postgreSQL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_dbs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs: let&amp;#39;s go.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;django_settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;__import__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fromlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DATABASES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs: got settings.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;databases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;databases&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;db_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;creating database &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; on &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Check if database is already there.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA&lt;/span&gt;
&lt;span class="s"&gt;                         WHERE SCHEMA_NAME = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
            &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Database &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; doesn&amp;#39;t exist, lets create it.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;CREATE DATABASE IF NOT EXISTS &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.....&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database already exists, moving on to next step.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;create_dbs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs all done&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-a-cache"&gt;
&lt;h3&gt;Adding a cache&lt;/h3&gt;
&lt;p&gt;Since most of the blog content doesn't change much, it is a great candidate for caching. So we are going to take advantage of Django's built in caching abilities and add some caching to our blog. Normally I use &lt;a class="reference external" href="http://memcached.org"&gt;memcached&lt;/a&gt; for my caching, but dotCloud's memcached support is limited right now. The reason why it is limited is because memcached doesn't have any built in authentication mechanism, and in order to make sure it is secure, you need to run a special version of memcached that supports &lt;a class="reference external" href="http://code.google.com/p/memcached/wiki/SASLAuthProtocol"&gt;SASL&lt;/a&gt;, and most of the memcached clients don't support this. So instead of deploying an insecure service, they decided to not support it fully. There are ways to use it, but it involves all kind of complicated firewall rules and running something like stunnel. So it is possible, but it isn't very clean.&lt;/p&gt;
&lt;p&gt;Instead they recommend that you use &lt;a class="reference external" href="http://redis.io"&gt;redis&lt;/a&gt; instead, redis has the same caching abilities that memcached has, plus a lot more, including authentication. So we are going to use redis for our cache. In order to use redis, we will need to add the redis library because redis caching support isn't built into Django. In your requirements.txt file you will need to add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-redis==1.4.5&lt;/span&gt;&lt;/tt&gt; so that the libraries will be available for Django to use.&lt;/p&gt;
&lt;p&gt;Once you have the library installed, you will need to add these settings to your settings.py file so that django knows which redis server and password to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;redis_cache.cache.RedisCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;LOCATION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_CACHE_REDIS_HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_CACHE_REDIS_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;DB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_CACHE_REDIS_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PARSER_CLASS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;redis.connection.HiredisParser&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# we also are going to use redis for our session cache as well.&lt;/span&gt;
&lt;span class="n"&gt;SESSION_ENGINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.sessions.backends.cached_db&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information about using redis as your cache for Django, check out these links.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/niwibe/django-redis"&gt;https://github.com/niwibe/django-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-redis/1.4.5"&gt;http://pypi.python.org/pypi/django-redis/1.4.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.3/topics/cache/"&gt;https://docs.djangoproject.com/en/1.3/topics/cache/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://answers.dotcloud.com/question/213/redis-cache-settings-for-django"&gt;http://answers.dotcloud.com/question/213/redis-cache-settings-for-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="django-admin"&gt;
&lt;h3&gt;Django Admin&lt;/h3&gt;
&lt;p&gt;We also need an easy way to create our django admin account for us. In order to do that I have this mkadmin.py script. This will default the password to &lt;a class="reference external" href="mailto:'P&amp;#64;s$w0rd1"&gt;'P&amp;#64;s$w0rd1&lt;/a&gt;', once you have your code installed, you will need to login to the admin account and change your password to something more secure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;P@s$w0rd1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_superuser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_staff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="media"&gt;
&lt;h3&gt;Media&lt;/h3&gt;
&lt;p&gt;We need to put our static and media files in the following locations: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;static=/home/dotcloud/data/static/&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;media=/home/dotcloud/data/media/&lt;/span&gt;&lt;/tt&gt;. Because of this we need to make sure we change our settings.py file, and setup an nginx.conf file to map to the correct locations. Here are the settings.py file changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# media settings&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dotcloud/data/media/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/media/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# static settings&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dotcloud/data/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# admin prefix&lt;/span&gt;
&lt;span class="n"&gt;ADMIN_MEDIA_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/admin/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the nginx.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/media/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/home/dotcloud/data&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/home/dotcloud/data&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="post-install"&gt;
&lt;h3&gt;Post Install&lt;/h3&gt;
&lt;p&gt;We are going to create a &lt;a class="reference external" href="http://docs.dotcloud.com/guides/postinstall/"&gt;postinstall&lt;/a&gt; script to handle all of the tasks we need to do after we install our code on the server. This is what will call our createdb.py, and mkadmin.py files from above, as well as syncing our database, running migrations and running collectstatic to move all static files into the right locations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
python createdb.py default
python mysite/manage.py syncdb --noinput
python mysite/manage.py migrate
python mkadmin.py
mkdir -p /home/dotcloud/data/media /home/dotcloud/data/static
python mysite/manage.py collectstatic --noinput
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to make sure your postinstall, createdb.py and mkadmin.py scripts are executable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make the script executable.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;chmod +x postinstall createdb.py mkadmin.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dotcloud-yml"&gt;
&lt;h3&gt;dotcloud.yml&lt;/h3&gt;
&lt;p&gt;Now that we have our application's project structure all setup and configured the way dotCloud wants it, we can configure our deployment stack. This is done with a file called dotcloud.yml. For more information about the dotcloud.yml file check out this link: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/build-file/"&gt;http://docs.dotcloud.com/guides/build-file/&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;www&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;db&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mysql&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;cache&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is telling us that we want 3 services, a python www service, a mysql db service, and a redis cache service. This is a very basic setup, and you can get a lot more complicated depending on what you want to achieve. Notice that this isn't setup for high availability because none of the instances are scaled. See the section about scaling below for more information. If you are running in a production app on dotCloud it is recommended that you scale all of your services so that they can withstand EC2 server crashes, and other unforeseen issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further it is important to know the following. Dotcloud will pay attention to your .gitignore files. If you have a settings file in your .gitignore file so that it doesn't get saved in the repo, it will not push those changes up to the cloud. You will need to remove it from the .gitignore in order to get those files out there. It is also import to remember that only changes that are committed are pushed, so don't forget to commit your changes. If you wanted to be tricky you could use a post install script to pull down the file from a secure location and install it that way, if you want to make things super secure.&lt;/p&gt;
&lt;p&gt;Everything is all setup, so all we have to do is push our application to dotCloud.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# push out your changes to the server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push blog .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service-info"&gt;
&lt;h3&gt;Service info&lt;/h3&gt;
&lt;p&gt;Once you push your code to dotCloud you can see what it looks like by running the info command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# get the information about our new services&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud info blog
cache:
    config:
        redis_password: &amp;lt;password&amp;gt;
        redis_replication: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;instances: 1
    &lt;span class="nb"&gt;type&lt;/span&gt;: redis
db:
    config:
        mysql_masterslave: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;        &lt;/span&gt;mysql_password: &amp;lt;password&amp;gt;
    instances: 1
    &lt;span class="nb"&gt;type&lt;/span&gt;: mysql
www:
    config:
        static: static
        uwsgi_processes: 4
    instances: 1
    &lt;span class="nb"&gt;type&lt;/span&gt;: python
    url: &amp;lt;url was here&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="scaling"&gt;
&lt;h3&gt;Scaling&lt;/h3&gt;
&lt;p&gt;Scaling is the ability to grow your application so that it can handle more traffic, or possible failures that might occur. With a normal non PaaS setup, scaling an application can be quite painful and time consuming, but with a PaaS it can be as easy as running a few commands. There are three types of scaling, Vertical, Horizontal, High Availability.&lt;/p&gt;
&lt;p&gt;Vertical scaling, means growing the service you have now so that it can get bigger. This is popular with databases, the bigger a database gets the more space and memory it needs.&lt;/p&gt;
&lt;p&gt;Horizontal scaling means creating more then one instance of a service so it spread the work between the different services, giving you greater capacity.&lt;/p&gt;
&lt;p&gt;High Availability means that you have more then one service running at a time, so that if one of the services has an issue, the other one will pick up the slack. This will help avoid downtime, when failures occur (EC2 instance crashes). Ideally when running in production, all of your services should be scaled for High Availability.&lt;/p&gt;
&lt;p&gt;There are two kinds of services, stateful, and stateless. Stateful services are services that holds persistent data. Examples of stateful services are mysql, redis, postgresql, solr, MongoDB and RabbitMQ.&lt;/p&gt;
&lt;p&gt;Horizontally High availability scaling a stateful service on dotCloud means creating a master/slave setup, which can switch the slave with the master automatically if the master has any issues. dotCloud supports HA scaling on MySQL, redis, and MongoDB.&lt;/p&gt;
&lt;p&gt;Stateful services scale like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mysql : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;redis : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;mongodb : 3 or 5 (using replica sets)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scaling a stateless and one of the supported stateful services is the same. You would just run the scale command line command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud scale app &lt;span class="nv"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For stateless applications, you are limited to a set number of scaling units, unless you are on the enterprise plan. If you need to have an application with lots of scale units, you should contact dotCloud, and let them know what you are planning to do, and they will advise you on how best to accomplish your goals.&lt;/p&gt;
&lt;p&gt;Link: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/scaling/"&gt;http://docs.dotcloud.com/guides/scaling/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database-backups"&gt;
&lt;h3&gt;Database Backups&lt;/h3&gt;
&lt;p&gt;Just because you are hosting your application on dotCloud doesn't mean you shouldn't backup your data. The most important data to backup is your database. Luckily dotCloud makes it easy to back up your database. There is a very helpful guide on how to setup your database backups here: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/backups/"&gt;http://docs.dotcloud.com/guides/backups/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="email"&gt;
&lt;h3&gt;Email&lt;/h3&gt;
&lt;p&gt;If you need to send or receive email from your application, you can do that to. Because dotCloud runs on EC2, and EC2 is a popular place where SPAMMERS send SPAM from, it is best to use a 3rd party email provider to send your emails for you. Popular ones are &lt;a class="reference external" href="http://mailgun.net/"&gt;MailGun&lt;/a&gt;, &lt;a class="reference external" href="http://sendgrid.com/"&gt;SendGrid&lt;/a&gt;, &lt;a class="reference external" href="http://www.critsend.com/"&gt;CritSend&lt;/a&gt;, and &lt;a class="reference external" href="http://aws.amazon.com/ses/"&gt;Amazon SES&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can set this up a couple of different ways. The first way is the easiest way possible, it allows you to configure the SMTP settings for each service. You would do it like this (see below). You can manually set the smtp settings for that service, and when your application needs to send an email it will use those settings. This is the most simple setup, but there are downsides to this approach. You would need to set this for each service, if you have more then one that will be duplicated everywhere. Also if you want to change your settings, you will need to destroy your service and recreate it, since those configs can only be set once when the service is created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;www&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp.mailgun.org&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;25&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postmaster@company.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;YourMailGunPassword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A better approach would be to use dotCloud's SMTP service. The SMTP service is built to receive emails from your services and forward them to the appropriate location. It is best to use a 3rd party email provider, but you can also use the typical poor mans solution, where you use gmail to send your emails. Be careful when using gmail, because you aren't aloud to send a lot of emails via gmail, once you hit your daily limit you will be blocked, so this is fine for a few emails a day, don't trust it for everyday stuff. Also, the emails will always be coming from your gmail address, fine for system emails, but not if you are trying to run a legit business.&lt;/p&gt;
&lt;p&gt;Here is an example using mailgun.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;mailer&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp.mailgun.org&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;587&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postmaster@yourmailgundomain.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;YourMailgunPassword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is an example using gmail.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;mailer&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp.gmail.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;587&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;your_gmail_username@gmail.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Your_Gmail_Password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have these all setup, they will be available in your environment.json file.&lt;/p&gt;
&lt;p&gt;If you want to receive email, it is best to use a service like &lt;a class="reference external" href="http://mailgun.net/"&gt;MailGun&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/guides/emails/"&gt;http://docs.dotcloud.com/guides/emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/services/smtp/"&gt;http://docs.dotcloud.com/services/smtp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cron-jobs"&gt;
&lt;h3&gt;Cron jobs&lt;/h3&gt;
&lt;p&gt;If your app needs to run cron jobs, follow the steps in this guide: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/periodic-tasks/"&gt;http://docs.dotcloud.com/guides/periodic-tasks/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="celery"&gt;
&lt;h3&gt;Celery&lt;/h3&gt;
&lt;p&gt;This blog doesn't really have a need for celery, but dotCloud does support it. For more information follow this link: &lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/python/django-celery/"&gt;http://docs.dotcloud.com/tutorials/python/django-celery/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="s3fs"&gt;
&lt;h3&gt;S3FS&lt;/h3&gt;
&lt;p&gt;If you store data on s3 you can mount your s3 bucket so that you can have access to s3 from your application, just like it was a local directory on your container. This is helpful for storing files that are uploaded by your visitors, or to share files between different web processes. Follow these instructions to set it up: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/s3fs/"&gt;http://docs.dotcloud.com/guides/s3fs/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="logs"&gt;
&lt;h3&gt;Logs&lt;/h3&gt;
&lt;p&gt;If you need to look at the logs to see how it is going you can do it two ways. The first way will tail your logs for you to your console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud logs blog.www
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Open up a shell&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud ssh blog.www
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# nginx access and error logs.&lt;/span&gt;
/var/log/nginx/&amp;lt;app_name&amp;gt;.&lt;span class="o"&gt;{&lt;/span&gt;access,error&lt;span class="o"&gt;}&lt;/span&gt;.log

&lt;span class="c"&gt;# wsgi error logs&lt;/span&gt;
/var/log/supervisor/uswgi.log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="restart-service"&gt;
&lt;h3&gt;Restart Service&lt;/h3&gt;
&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# restart the service&lt;/span&gt;
dotcloud restart blog.www
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="links"&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.dotCloud.com"&gt;http://www.dotCloud.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="dotcloud"></category><category term="django"></category><category term="paas"></category><category term="python"></category><category term="hosting"></category><category term="deployment"></category></entry><entry><title>I'm now working for dotCloud</title><link href="http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/" rel="alternate"></link><updated>2012-03-23T12:20:29-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2012-03-23:blog/2012/03/im-now-working-for-dotcloud/</id><summary type="html">&lt;p&gt;A lot has happened in the 11 months since I wrote my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;first blog article on dotCloud&lt;/a&gt;. There was an Egyptian revolution, a royal wedding, a new iPhone and iPad, Osama bin Laden was killed, and on a more personal note, I left my job at CashStar and I now work for &lt;a class="reference external" href="http://www.dotCloud.com"&gt;dotCloud&lt;/a&gt;. In the grand scheme of things, my job change was nothing compared to those big events of the past 11 months, but it was pretty big for me.&lt;/p&gt;
&lt;p&gt;I had worked for CashStar.com for over 3.5 years, and I was there from pretty much the beginning, so it was hard for me to walk away. When I started doing research on PaaS's over a year ago, I did it so that I could learn more about how these systems were built, so that I could take that knowledge and bring it to CashStar to improve our infrastructure there.&lt;/p&gt;
&lt;p&gt;A funny thing happened as I was doing my research, I started to really love the technology that went into making a PaaS, and over time, I thought that it was such a cool concept, that I wanted to know everything there was to know about them, so that I could build my own. After trying out all of the PaaS's that I could find, and learning and blogging about them. I decided I would see what it would take to build my own PaaS. The first thing I realized is that there is a lot more going on under the covers then one might imagine, and this wasn't going to be an easy problem to solve. If it was easy, then everyone and their brother would have one, but they don't. There are a lot of PaaS's out there now, but if you think about it, that is nothing compared to the number of web hosting companies.&lt;/p&gt;
&lt;p&gt;After realizing that this isn't something I was going to be able to build in a weekend, I kind of lost motivation. I have 2 kids and a job that was making me work a ton of hours, so the few extra hours I had in a day where spent hanging out with my family, and what ever was left over was spent playing one of my many sports, or getting some much needed sleep. So, for a while my dream of making my own PAAS faded for a little while, but it never disappeared.&lt;/p&gt;
&lt;p&gt;As fate would have it, a few months later I ended up talking with the dotCloud guys, and next thing you know they made me an offer to join their company. After talking it over with my wife, I decided to go for it. Since dotCloud is based in San Francisco, I'll be working from home in Maine, and telecommuting to work each day from my home office. I have been working for dotCloud for about 5 weeks so far, and it has been awesome. I have learned so many new and cool things in the past month, it has been great. The dotCloud team is top notch and I can't wait to learn even more from them.&lt;/p&gt;
&lt;p&gt;My title at dotCloud is Site Reliability Engineer. You might have never heard about that title before. To be honest I had never heard of it before myself. My primary goal is to make sure that the dotCloud platform is as stable and reliable as it could be. One of our goals is to automate everything, so that if something fails, we have a process that will notice this, and auto correct it for us. Since dotCloud is build on top of Amazon EC2, things can happen at anytime, and they do. So when they happen, we need a self healing platform that will fix itself when things break in the middle of the night. If it doesn't fix it self, someone will need to be woken up to fix it, and no one wants that.&lt;/p&gt;
&lt;p&gt;Another one of my goals is to make sure that dotCloud is the best developers platform available. I want to make it so that developers can do what ever they want to do, and if they have any issues, give them the tools they need to solve their own problems. If they get stuck, we will be there to help them through their problems, via IRC, or email support.&lt;/p&gt;
&lt;p&gt;Every developer writes code with bugs, and if you finds one that tells you otherwise, they are lying.  dotCloud allows developers to see all of their application and system logs easily, and also gives them direct SSH access to the containers where their code is running so that they have the ability to see why something isn't working. Most PaaS's don't provide this, which makes it harder to figure out why the code that you wrote isn't working the way that you had planned.&lt;/p&gt;
&lt;p&gt;One of the cool things that dotCloud does is that they are heavy believers in &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Eating_your_own_dog_food"&gt;dog fooding&lt;/a&gt;. They encourage employees to use the platform as much as possible, and it is amazing to know that a lot of dotCloud runs on dotCloud. This helps smooth out all of the different developer pain points, and makes for a better platform overall.&lt;/p&gt;
&lt;p&gt;They also listen to what their users have to say, and take it to heart. If you have used dotCloud in the past, and were turned off for some reason, you should come back and try it again, it has changed a ton, and the issue that you might have had a while ago, might no longer be there. If you are still having issues, please tell us, because if we don't know that it is an issue for you, there is no way we can fix it.&lt;/p&gt;
&lt;p&gt;One of the first things that I noticed when I joined was the support that they offer, it is unbelievable. I get an email for every single support ticket that is created, and the responses. I have learned a lot just by reading those emails. We get tickets for everything from sticker requests all the way to &amp;quot;my website is having issues, can you help&amp;quot;. Each day there is at least one engineer dedicated to answering support tickets, and that is all they do for the day, everything else takes a back seat. The same people who are building dotCloud are the ones answering your questions, so when you get an answer you know it is coming directly from the source. Most tickets are responded to and closed really quickly. It wasn't always this good, but it is something they work on improving all of the time, because they realize, that it is important to have a quick and helpful support staff around to solve your problems when you have them.&lt;/p&gt;
&lt;p&gt;Now that I'm on the inside, I can see and hear about all of the cool new things they are working on for the future, and I'm really excited. If you are a developer and you haven't tried dotCloud yet, or if you have tried them a while ago and you haven't tried them recently you should check them out. What are you waiting for it, is FREE, it won't cost you anything to try it out, and you never know it might change your life.&lt;/p&gt;
&lt;p&gt;One of the sad things about working for dotCloud will mean that I won't be able to blog about the PaaS industry that much anymore. I'm going to try and avoid doing it, due to the conflict of interest. I will keep around my old blog post so that everyone can benefit, and I'll try to keep them up to date, but besides that I won't be writing about anything unless it is really cool.&lt;/p&gt;
&lt;p&gt;If you have tried out dotCloud, let me know what you think, and let me know if there is anything we can do to make it better for you.&lt;/p&gt;
</summary><category term="dotcloud"></category><category term="cashstar"></category><category term="job"></category><category term="paas"></category></entry><entry><title>Running sentry on DotCloud</title><link href="http://kencochrane.net/blog/2012/01/running-sentry-on-dotcloud/" rel="alternate"></link><updated>2012-01-28T23:00:33-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2012-01-28:blog/2012/01/running-sentry-on-dotcloud/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/dcramer/sentry"&gt;Sentry&lt;/a&gt; is a realtime event logging and aggregation platform. At it’s core it specializes in monitoring errors and extracting all the information needed to do a proper post-mortum without any of the hassle of the standard user feedback loop.&lt;/p&gt;
&lt;p&gt;The main feature of sentry and the ability to send all of your application logs to one place, and then aggregate them, so that you only get one error email for the same error. This will keep your mailbox from flooding, when something goes wrong.&lt;/p&gt;
&lt;p&gt;Putting your logging server on a different server or network then your production servers is a good idea. If something goes wrong, and you can't access your servers, you can still see what errors were getting thrown before the servers started having problems.&lt;/p&gt;
&lt;p&gt;Follow these easy steps to get sentry up and running on DotCloud.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a place to store your project&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p ~/projects
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Go into the projects directory&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Clone git repo from github, requires git client&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/kencochrane/sentry-on-dotcloud.git
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Go into the new project directory&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;sentry-on-dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Creating the virtualenv (using virtualenvwrapper, virtualenv, and pip)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv --no-site-packages --distribute sentry-on-dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Install all of the Sentry requirements via pip and the requirements.txt file.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;Installing the dotCloud client  &lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/install/"&gt;http://docs.dotcloud.com/firststeps/install/&lt;/a&gt; (here are the steps for Linux and Mac OSX)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo pip install -U dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="8"&gt;
&lt;li&gt;Sign up for a dotcloud account &lt;a class="reference external" href="https://www.dotcloud.com/accounts/register/"&gt;https://www.dotcloud.com/accounts/register/&lt;/a&gt; if you haven't already.&lt;/li&gt;
&lt;li&gt;The first time you use the dotCloud account you will need to add your api key. So type dotcloud and follow the steps. You can find your API key at &lt;a class="reference external" href="http://www.dotcloud.com/account/settings"&gt;http://www.dotcloud.com/account/settings&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="10"&gt;
&lt;li&gt;Create your dotcloud application&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud create sentry
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="11"&gt;
&lt;li&gt;Change the SENTRY_KEY settings in these files, to the same unique value.&lt;ul&gt;
&lt;li&gt;sentry_conf.py&lt;/li&gt;
&lt;li&gt;sentryproj/settings.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is an example on how to generate a good unique key that you can use in the files above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;KEY_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KEY_LENGTH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;6+tSEh1qYwDuTaaQRcxUjMDkvlj4z9BU/caCFV5QKtvnH7ZF3i0knA==&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="12"&gt;
&lt;li&gt;Add your email address to SENTRY_ADMINS in sentryproj/settings.py . This will send you emails when an error occurs.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SENTRY_ADMINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;youremail@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="13"&gt;
&lt;li&gt;Push your code into dotcloud&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push sentry .
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="14"&gt;
&lt;li&gt;Find out your application url&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud url sentry
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="15"&gt;
&lt;li&gt;Open url in your browser and start using sentry on dotcloud.&lt;/li&gt;
&lt;li&gt;First things first you should change the admin password from the default one that was created on deployment. The default username and password are found in the mkadmin.py file.&lt;/li&gt;
&lt;li&gt;Test out sentry using the raven client to make sure it is working as it should. Open up a python shell on your local machine and do the following.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Replace the server_url with your sentry url you found out in step 14. Make sure it ends in /store/ . Also make sure you replace my_key with your sentry key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;raven&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;server_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://sentry-username.dotcloud.com/store/&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1234-CHANGEME-WITH-YOUR-OWN-KEY-567890&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;server_url&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;My event just happened!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;48ba88039e0f425399118f82173682dd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3313fc5636650cccaee55dfc2f2ee7dd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you go to the sentry webpage you should see your test message. If not, double check everything, and see if there was any errors during the send.&lt;/p&gt;
&lt;p&gt;Once this is all up and running you can install the raven client in your applications, and start sending your logs to sentry.&lt;/p&gt;
&lt;ol class="arabic simple" start="18"&gt;
&lt;li&gt;Optional: If you don't like the URL they gave you, you can use your custom domain. Assuming your application was sentry.www and your domain was www.example.com you would do the following&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud &lt;span class="nb"&gt;alias &lt;/span&gt;add sentry.www www.example.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you get comfortable with how things work, don't forget to change your DEBUG setting to False. Go ahead and fork my project and get started today.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;For more info about dotcloud, sentry, and Raven and what you can do with with it. Check out their docs&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Sentry on DotCloud GitHub repo : &lt;a class="reference external" href="https://github.com/kencochrane/sentry-on-dotcloud"&gt;https://github.com/kencochrane/sentry-on-dotcloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DotCloud overview: &lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/platform-overview/"&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sentry Documentation: &lt;a class="reference external" href="http://sentry.readthedocs.org/en/latest/index.html"&gt;http://sentry.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Raven Documentation: &lt;a class="reference external" href="http://raven.readthedocs.org/en/latest/index.html"&gt;http://raven.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Links:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Virtualenv : &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;http://pypi.python.org/pypi/virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pip : &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;http://www.pip-installer.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;virtualenvwrapper : &lt;a class="reference external" href="http://www.doughellmann.com/projects/virtualenvwrapper/"&gt;http://www.doughellmann.com/projects/virtualenvwrapper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git : &lt;a class="reference external" href="http://git-scm.com/"&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</summary><category term="dotcloud"></category><category term="django"></category><category term="sentry"></category><category term="python"></category></entry><entry><title>The Developers Guide to PCI Compliant Web applications</title><link href="http://kencochrane.net/blog/2012/01/developers-guide-to-pci-compliant-web-applications/" rel="alternate"></link><updated>2012-01-25T17:10:54-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2012-01-25:blog/2012/01/developers-guide-to-pci-compliant-web-applications/</id><summary type="html">&lt;p&gt;&lt;em&gt;Work in progress last updated: 12-07-2012 by Ken Cochrane&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: 12-07-2012&lt;/strong&gt; I have added the youtube video and slides from a recent talk I did on Building PCI Complaint Django Applications.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: 04-05-2012&lt;/strong&gt; This article has been &lt;a class="reference external" href="http://www.ituring.com.cn/article/1372"&gt;translated into chinese&lt;/a&gt; , by Wujun Shen (吴峻申)&lt;/p&gt;
&lt;p&gt;When I first started working at &lt;a class="reference external" href="http://CashStar.com"&gt;CashStar.com&lt;/a&gt; three and a half years ago, I had heard about PCI before, but I didn't really know what that meant. Since we were building an ecommerce platform that was going to be accepting credit cards over the internet, I knew we needed to make sure we were fully PCI compliant. We were a startup, we didn't have much money, and any mistake could kill the company. Since I didn't want to be the one to make the mistake, I spent a lot of time doing research on PCI, and what it took to make sure your web application was secure.&lt;/p&gt;
&lt;p&gt;The first thing that I did was a simple web search, and I was surprised to find out that there really wasn't much information available. Most of the information that was available, wasn't easily understandable, and was a little vague. There were companies that you could hire, that would guide you through the process, but since we didn't have much money, they weren't an option for us. So I did what any geek in my situation would do, I spent a bunch of my time reading and researching as much as I could on PCI, and figured my way through the PCI hell, until we were fully PCI compliant.&lt;/p&gt;
&lt;p&gt;My goal with this blog post is write all of my information down, so that I can hopefully help others through the process, and also to serve as a reminder to me, so that when I need to do this again in the future, I will remember every last detail. I hoping to keep this as a sort of live document, and I'll try to keep it up to date as time goes forward and things change. If you notice something is incorrect or I'm missing something, please leave a comment and I'll do my best to update the post as soon as I can.&lt;/p&gt;
&lt;div class="contents topic" id="quick-links"&gt;
&lt;p class="topic-title first"&gt;Quick Links&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-is-pci" id="id5"&gt;What is PCI?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#why-was-pci-created" id="id6"&gt;Why was PCI created?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#does-pci-affect-me" id="id7"&gt;Does PCI affect me?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pci-dss-requirements" id="id8"&gt;PCI DSS Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pci-in-layman-s-terms" id="id9"&gt;PCI in Layman's Terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-does-pci-certification-work" id="id10"&gt;How does PCI Certification work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-to-get-started" id="id11"&gt;How to get started?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-pci-level-am-i" id="id12"&gt;What PCI Level am I?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#merchant-level" id="id13"&gt;Merchant Level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#requirements" id="id14"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#roc-or-saq" id="id15"&gt;RoC or SAQ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#report-on-compliance-roc" id="id16"&gt;Report on Compliance (RoC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#self-assement-questionnaire" id="id17"&gt;Self-Assement Questionnaire&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#saq-a" id="id18"&gt;SAQ-A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#saq-c" id="id19"&gt;SAQ-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#saq-d" id="id20"&gt;SAQ-D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-much-does-pci-cost" id="id21"&gt;How much does PCI Cost?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#external-audits" id="id22"&gt;External Audits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pci-2-0" id="id23"&gt;PCI 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nitty-gritty" id="id24"&gt;Nitty Gritty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#common-pci-mistakes" id="id25"&gt;Common PCI Mistakes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#storing-credit-card-information-in-plain-text" id="id26"&gt;Storing credit card information in plain text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#default-passwords-not-changed" id="id27"&gt;Default passwords not changed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#remove-all-programs-not-needed-from-your-servers" id="id28"&gt;Remove all programs not needed from your servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#use-a-firewall" id="id29"&gt;Use a Firewall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#poorly-coded-websites" id="id30"&gt;Poorly coded websites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#lack-of-monitoring-and-logging" id="id31"&gt;Lack of monitoring and logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#missing-security-patches" id="id32"&gt;Missing security patches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#not-using-ssl-for-payment-page" id="id33"&gt;Not using SSL for payment page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#logging-payment-information" id="id34"&gt;Logging payment information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#credit-card-data-that-can-be-stored" id="id35"&gt;Credit card data that can be stored&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tokenization" id="id36"&gt;Tokenization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#data-centers" id="id37"&gt;Data Centers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hosting-in-the-cloud" id="id38"&gt;Hosting in the Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#security-scanners" id="id39"&gt;Security Scanners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#intrusion-detection-systems" id="id40"&gt;Intrusion Detection Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hashing-credit-card-numbers" id="id41"&gt;Hashing credit card numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rainbow-tables-salts" id="id42"&gt;Rainbow Tables + Salts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#do-i-really-have-to-worry-about-being-hacked" id="id43"&gt;Do I really have to worry about being hacked?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-could-happen-if-you-were-hacked" id="id44"&gt;What could happen if you were Hacked?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-if-i-was-breached" id="id45"&gt;What if I was breached?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#build-pci-complaint-django-applications" id="id46"&gt;Build PCI Complaint Django Applications&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#slides" id="id47"&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#video" id="id48"&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#links" id="id49"&gt;Links:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-pci"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;What is PCI?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing most people ask is &amp;quot;What is PCI?&amp;quot;. PCI is short for the Payment Card Industry Security Standards Council. PCI consists of American Express, Discover Financial Services, JCB, MasterCard, and Visa, and was formed on Sept 7th, 2006.&lt;/p&gt;
&lt;p&gt;The main purpose of creating the PCI SSC, was to come up with a common set of security standards that merchants could use to better protect themselves against hackers. The PCI SSC came up with the Payment Card Industry Data Security Standard (PCI DSS), which consists of 12 requirements, and many sub-requirements that merchants would need to follow in order to accept debit, credit, prepaid, ATM or POS cards from the PCI SSC members.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-was-pci-created"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Why was PCI created?&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It was created in response to a spike in data security breaches.&lt;/li&gt;
&lt;li&gt;It gives merchants a guide to help them make sure they are following best security practices when it comes to card holder data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="does-pci-affect-me"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Does PCI affect me?&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Do you accept payment online or over the phone with  credit/debit cards?&lt;/li&gt;
&lt;li&gt;Is the credit card information posted to YOUR server?&lt;/li&gt;
&lt;li&gt;Do you store credit card information, encrypted or not?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you said yes to any of those, then PCI affects you in one way or another.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pci-dss-requirements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;PCI DSS Requirements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is the list of 12 requirements. As you look them over, you will notice that most of them aren't that complicated, and you might already be doing thing already. Most of them are just common sense, but it is amazing how many people still don't do things, even if it is common sense.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install and maintain a firewall configuration to protect cardholder data&lt;/li&gt;
&lt;li&gt;Do not use vendor-supplied defaults for system passwords and other security parameters&lt;/li&gt;
&lt;li&gt;Protect stored cardholder data&lt;/li&gt;
&lt;li&gt;Encrypt transmission of cardholder data across open, public networks&lt;/li&gt;
&lt;li&gt;Use and regularly update anti-virus software on all systems commonly affected by malware&lt;/li&gt;
&lt;li&gt;Develop and maintain secure systems and applications&lt;/li&gt;
&lt;li&gt;Restrict access to cardholder data by business need-to-know&lt;/li&gt;
&lt;li&gt;Assign a unique ID to each person with computer access&lt;/li&gt;
&lt;li&gt;Restrict physical access to cardholder data&lt;/li&gt;
&lt;li&gt;Track and monitor all access to network resources and cardholder data&lt;/li&gt;
&lt;li&gt;Regularly test security systems and processes&lt;/li&gt;
&lt;li&gt;Maintain a policy that addresses information security&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="pci-in-layman-s-terms"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;PCI in Layman's Terms&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All Merchants, regardless if credit card data is stored, must achieve and maintain compliance at all times.&lt;/li&gt;
&lt;li&gt;Merchants cannot store certain credit card information including CVV, track data, magnetic strip or PIN data&lt;/li&gt;
&lt;li&gt;If you store permitted credit card data, you need to store it in a secure way following the PCI security standards.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-pci-certification-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;How does PCI Certification work?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PCI Certification works like this. If you want to accept credit or debit cards you need to agree that you will maintain PCI certification at all times. There are a couple of ways to confirm that you are certified. You need to either fill out a Self-Assessment Questionnaire (SAQ) or a Report on Compliance (RoC). I'll go over the difference in a little bit, but the important part to remember is that you need to fill out some paper work, and then usually submit that paperwork to whomever requests it, usually the company that processes your credit cards and handles your merchant account.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fill out a Self-Assessment Questionnaire (SAQ) and Find out what level you are&lt;/li&gt;
&lt;li&gt;Make sure you follow all recommendations for that level&lt;/li&gt;
&lt;li&gt;Fix any issues&lt;/li&gt;
&lt;li&gt;Attestation of Compliance (if self assessing)&lt;/li&gt;
&lt;li&gt;External Auditor (if needed)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-get-started"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;How to get started?&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Identify the individuals that will be responsible for PCI compliance in your organization and assemble a team that includes members from each area.&lt;/li&gt;
&lt;li&gt;Determine your merchant level (1-4).&lt;/li&gt;
&lt;li&gt;Determine which SAQ your organization will need to complete.&lt;/li&gt;
&lt;li&gt;Evaluate whether your organization will try to achieve compliance internally or engage with aQualified Security Assessor (QSA).&lt;/li&gt;
&lt;li&gt;Engage with an Approved Scanning Vendor (ASV) to start the required external IP vulnerability scans.&lt;/li&gt;
&lt;li&gt;Make sure that your organization has an Information Security Policy and that it is being enforced.&lt;/li&gt;
&lt;li&gt;Immediately address any significant deficiencies discovered during the assessment or scan.&lt;/li&gt;
&lt;li&gt;Retain record of self-assessments, scans, and follow-up activities. Be prepared to provide these documents upon request.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="what-pci-level-am-i"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;What PCI Level am I?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are 4 PCI compliance level's, and how many transactions you process a year will determine which level you are in.&lt;/p&gt;
&lt;div class="section" id="merchant-level"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;Merchant Level&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Level 1&lt;/strong&gt; : Merchants processing over 6 million Visa transactions annually (all channels) or Global merchants identified as Level 1 by any Visa region&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Level  2&lt;/strong&gt; : Merchants processing 1 million to 6 million Visa transactions annually (all channels)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Level  3&lt;/strong&gt; : Merchants processing 20,000 to 1 million Visa e-commerce transactions annually&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Level 4&lt;/strong&gt; : Merchants processing less than 20,000 Visa e-commerce transactions annually and all other merchants processing up to 1 million Visa transactions annually&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Requirements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Level 1&lt;/strong&gt; : Onsite Security Assessment Required Annually, Network Vulnerability Scan required Quarterly&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Level 2&lt;/strong&gt; : Onsite Security Assessment at Merchants Discretion, Self-Assessment Questionnaire Required Annually, Network Vulnerability Scan Required Quarterly&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Level 3&lt;/strong&gt; : Self-Assessment Questionnaire Required Annually, Network Vulnerability Scan Required Quarterly&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Level 4&lt;/strong&gt; : Self-Assessment Questionnaire Required Annually, Network Vulnerability Scan Required Quarterly&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="roc-or-saq"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;RoC or SAQ?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are a Level 1 then you need to fill out a RoC, if you are level 2, 3 or 4, then you can fill out an SAQ. There are some exceptions to these rules, for example, if you have had a security breach in the past, the credit card companies might require that you complete a RoC even if you aren't a level 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="report-on-compliance-roc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Report on Compliance (RoC)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you process more than six million credit cards per year (Level 1), you are required to have an on-site PCI assessment and Report on Compliance (RoC) issued by a Qualified Security Assessor (QSA). Other Level 2 organizations may also be required to submit a RoC or choose to do so in anticipation of becoming a Level 1 merchant.&lt;/p&gt;
&lt;p&gt;QSA’s can be engaged to provide this annual review.  It includes a review of established processes and procedures for networks, servers and databases in scope for PCI compliance.  The engagement involves interviews with stakeholders in your organization, a review of supporting documentation, validation of compliance initiatives and completion of the report itself.&lt;/p&gt;
&lt;p&gt;QSA’s usually encourage their PCI Customers to use a PCI compliance management solution throughout the year.  This will assist them with maintaining compliance and should make the on-site engagement and the completion of the RoC faster and smoother.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="self-assement-questionnaire"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Self-Assement Questionnaire&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are 5 SAQ categories, depending on which category that you fall into, the paper work might be real easy, it might take a lot longer. Here are the 5 categories.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SAQ-A&lt;/strong&gt; : Card-not-present (e-commerce or mail/telephone-order) merchants, all cardholder data functions outsourced.  This would never apply to face-to-face merchants.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SAQ-B&lt;/strong&gt; : Imprint-only merchants with no electronic cardholder data storage, or standalone, dial- out terminal merchants with no electronic cardholder data storage&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SAQ-C-VT&lt;/strong&gt; : Merchants using only web-based virtual terminals, no electronic cardholder data storage&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SAQ-C&lt;/strong&gt; : Merchants with payment application systems connected to the Internet, no electronic cardholder data storage&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SAQ-D&lt;/strong&gt; : All other merchants not included in descriptions for SAQ types A through C above, and all service providers defined by a payment brand as eligible to complete an SAQ.&lt;/p&gt;
&lt;p&gt;Since we are only talking about web applications here, you will most likely only fall into either A, C, or D. Once you know your level you will need to fill out the SAQ for that category. Once you are done you need an Attestation of compliance as well.&lt;/p&gt;
&lt;p&gt;Here is a helpful guide to help you figure out what category you a fall into.&lt;/p&gt;
&lt;div class="section" id="saq-a"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;SAQ-A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are a lot of different parts to A, but the big one, is that the credit card data never touches your servers. The easiest way to do this is to redirect people to someone else's servers when you want them to enter credit card data. This is common with Paypal, google checkout and Amazon payments.&lt;/p&gt;
&lt;p&gt;Another way around this is to have your payment page hosted by your credit card gateway. An example of this is authorize.net's &lt;a class="reference external" href="http://www.authorize.net/solutions/merchantsolutions/merchantservices/simplecheckout/"&gt;Simple Checkout&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A third way of doing this is what is called &amp;quot;transparent redirect&amp;quot; or &amp;quot;Direct Post&amp;quot;, &lt;a class="reference external" href="http://www.braintreepayments.com/services/pci-compliance"&gt;BrainTreePayments&lt;/a&gt; was the first to make this popular, but since then &lt;a class="reference external" href="http://developer.authorize.net/api/dpm"&gt;Authorize.net&lt;/a&gt;  has also added it.&lt;/p&gt;
&lt;p&gt;And finally the last way, is basically similar to the third way, but it uses javascript to encrypt the credit card data, send it to the credit card processor, and then populate the form with unique tokens, which will be used later on. This approach is used by &lt;a class="reference external" href="http://stripe.com"&gt;stripe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;BrainTree + livingsocial talk about this new approach of &lt;a class="reference external" href="http://www.braintreepayments.com/devblog/end-to-end-encryption"&gt;end to end encryption of credit card data&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="saq-c"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;SAQ-C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are hosting the payment form on your own server, and when you hit submit on that form it goes to your server, where you parse the form, get the credit card details out of the fields, build up your request and then send it to the credit card processor yourself. Then you are at least a C. Even if you aren't storing the data, because it is available in your computer memory, and you are touching it with your code, there is risk that something could happen and you would be able to get access to the credit card data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="saq-d"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;SAQ-D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you don't fall into the other categories then you are a D. SAQ D is sometimes referred to as ROC light, because any organization that has to fill out SAQ D is essentially going through all 12 PCI DSS requirements, albeit on a reduced scale.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-much-does-pci-cost"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;How much does PCI Cost?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is really hard to get an accurate value for this because it will be different for everyone, but according to BrainTree here is a chart on &lt;a class="reference external" href="http://www.braintreepayments.com/blog/what-does-it-cost-to-become-pci-compliant"&gt;how much it costs to become PCI Compliant&lt;/a&gt;.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="11%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="18%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="23%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Level&lt;/th&gt;
&lt;th class="head"&gt;# of Trans&lt;/th&gt;
&lt;th class="head"&gt;Scope&lt;/th&gt;
&lt;th class="head"&gt;Compliance&lt;/th&gt;
&lt;th class="head"&gt;Audit type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6M+&lt;/td&gt;
&lt;td&gt;$125K&lt;/td&gt;
&lt;td&gt;$586K&lt;/td&gt;
&lt;td&gt;onsite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1M-6M&lt;/td&gt;
&lt;td&gt;$105K&lt;/td&gt;
&lt;td&gt;$267K&lt;/td&gt;
&lt;td&gt;SAQ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;20K-1M&lt;/td&gt;
&lt;td&gt;$44K&lt;/td&gt;
&lt;td&gt;$81K&lt;/td&gt;
&lt;td&gt;SAQ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&amp;lt; 20K&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;SAQ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="external-audits"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;External Audits&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="29%" /&gt;
&lt;col width="71%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Level&lt;/th&gt;
&lt;th class="head"&gt;Cost Per Year&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Low End&lt;/td&gt;
&lt;td&gt;$20K-$30K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;$225K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Top 10%&lt;/td&gt;
&lt;td&gt;$500K+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you are big enough or unlucky enough to require an external audit, it isn't going to be cheap. Audits last a few weeks or more onsite, and cost anywhere from $20K-$30K on the low end.  They average around $225K a year, and about 10% of the audits cost over $500K. As you can see this is a really expensive annual cost, and should be avoided if possible.&lt;/p&gt;
&lt;p&gt;It is also important to point out that this is just the cost of the audit itself, if they find anything wrong in the audit, you will need to pay to fix any of the issues before they will certify you.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Here are some links where I got my data.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.networkworld.com/news/2010/030110-pci-compliance-audit-cost.html"&gt;http://www.networkworld.com/news/2010/030110-pci-compliance-audit-cost.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.elementps.com/element_payment_solutions/2009/02/pci-compliance-costs.html"&gt;http://blog.elementps.com/element_payment_solutions/2009/02/pci-compliance-costs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.infosecisland.com/blogview/12356-Five-Questions-to-Ask-Your-PCI-Auditor-Before-You-Hire-Them.html"&gt;https://www.infosecisland.com/blogview/12356-Five-Questions-to-Ask-Your-PCI-Auditor-Before-You-Hire-Them.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="pci-2-0"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;PCI 2.0&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On October 26th 2010, PCI DSS version 2.0 was released. Here are some of the highlights.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;132 changes, 2 new ones, the rest are clarifications or additional guidelines&lt;/li&gt;
&lt;li&gt;Added more guidelines around virtualization, and how it affects PCI&lt;/li&gt;
&lt;li&gt;Amazon web services (AWS) is now a Level 1 PCI compliant data center.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="nitty-gritty"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;Nitty Gritty&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that you know what PCI is all about, lets get down to the nitty gritty. The most common questions I'm asked is what is the easiest way to become PCI certified. Here is what I tell people.&lt;/p&gt;
&lt;p&gt;First off, avoid handling credit card data if you can help it. It has become a lot easier lately with Braintree and stripe. Years ago before these solutions were available, the only way to do it was to use an ugly hosted payment page on your credit card gateway, and it wasn't very good, and hard to integrate, so most people didn't use those solutions.&lt;/p&gt;
&lt;p&gt;Now you have no excuse, let the credit card processor handle all of the credit card data, and it will make your life easier. If you want to see how much easier, go to the &lt;a class="reference external" href="https://www.pcisecuritystandards.org"&gt;PCI security standards&lt;/a&gt; website and download the &lt;a class="reference external" href="https://www.pcisecuritystandards.org/documents/pci_saq_a_v2.doc"&gt;SAQ A&lt;/a&gt; and the &lt;a class="reference external" href="https://www.pcisecuritystandards.org/documents/pci_saq_c_v2.doc"&gt;SAQ C&lt;/a&gt; docs. You will notice that the SAQ A is much easier, and a lot less of a hassle.&lt;/p&gt;
&lt;p&gt;As great as the Briantree and stripe solutions are they can't solve all problems. One common problem is accepting credit card data over an API, more and more common these days with mobile applications. If you can't use one of the other solutions for one reason or another, you can check out &lt;a class="reference external" href="http://www.akamai.com/html/solutions/security/edge_tokenization.html"&gt;Edge Tokenization&lt;/a&gt; from Akamai, it will work for both API and web based payment forms. It is pretty expensive, but if you are already using some of akamai's other solutions then this might not be as big of an issue.&lt;/p&gt;
&lt;p&gt;If you still need/want to accept credit card data on your own server after everything that I said above, then you are going to need to know about some other things. For example, here are a list of common mistakes that most people make.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="common-pci-mistakes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;Common PCI Mistakes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is a list of common mistakes most people make. I'm listing them here so that you can catch these mistakes before it is too late. If I missed any, let me know.&lt;/p&gt;
&lt;div class="section" id="storing-credit-card-information-in-plain-text"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;Storing credit card information in plain text&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ideally, you should never store credit card information, but if you have to, you should always
encrypt the data, so that if someone gets ahold of your data, they won't be able to see it unless
they put in a lot of effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="default-passwords-not-changed"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;Default passwords not changed&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I'm always surprised to here how weak peoples passwords are, and how most of the time they are still using the first one that was given to them when they started. That is why if you are the one generating a password, make it a secure one, so that if the people don't change the password like you told them too, it will at least be a secure one to begin with.&lt;/p&gt;
&lt;p&gt;There are really good password management tools on the market today, I recommend using one of them. One of my favorites is &lt;a class="reference external" href="https://agilebits.com/onepassword"&gt;1password&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="remove-all-programs-not-needed-from-your-servers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;Remove all programs not needed from your servers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are a couple reasons why you would want to remove any programs/software from your computer if you are not using it. The first one, it will take up less space, and if it isn't running it will free up processor and RAM, a faster system is always good. The second reason is so that you don't have to maintain the security patches for something you aren't using. So, the first step you should do when you bring a new server online is to remove all of the stuff you aren't using. You can always add it back later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-a-firewall"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id29"&gt;Use a Firewall&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You should always use a firewall, it doesn't matter if it is a hardware firewall or a software firewall, use it, and never turn it off. In some of my production systems I run both a hardware firewall coming into my private network and then a software firewall on each system. Some people think this is overkill, but I would rather be safer then sorry.&lt;/p&gt;
&lt;p&gt;Just running the firewall is only part of it, you need to know how the firewall is setup, and why. You should always have a document around with a list of which ports are open and why. This will be very helpful later on, when you get audited and they want to know what ports are open, and the reasons for it.&lt;/p&gt;
&lt;p&gt;You should do a quarterly review of your firewalls to make sure they match your documentation, and to see if any of the ports that were previously open still need to be open. Systems change over time, and sometimes you will remove a service that isn't needed anymore, and when that happens you should also block the port.&lt;/p&gt;
&lt;p&gt;You could also use a service like &lt;a class="reference external" href="http://cloudflare.com"&gt;CloudFlare&lt;/a&gt; that protect your website from a range of online threats from spammers to SQL injection to DDOS. It is easy to setup, and your code changes should be minimal at most.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="poorly-coded-websites"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;Poorly coded websites&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If the programmers who are writing your web application aren't careful, and don't know what they are doing, they could write bad code which could result in SQL injection and other vulnerabilities.&lt;/p&gt;
&lt;p&gt;Cross Site Scripting (XSS) is becoming a more and more common way of attacking websites these days, so make sure you are careful of that as well.&lt;/p&gt;
&lt;p&gt;Make sure you always conduct code reviews, and use application penetration testing before you put your code into production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lack-of-monitoring-and-logging"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id31"&gt;Lack of monitoring and logging&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is amazing how many companies have no system or application monitoring, it is like they are running blind, they have no idea when something is going wrong until their customers tell them. You should have as much monitoring and logging as possible, so that you know what is happening with your system at all times. If you don't log when things are going well, then when stuff starts going bad you will have no idea what things are suppose to look like when things are good.&lt;/p&gt;
&lt;p&gt;Here is a list of tools that will help you with your logging and monitoring.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pingdom.com"&gt;Pingdom&lt;/a&gt; Is a website monitoring tool, they will tell you when your site is down.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.nagios.org/"&gt;Nagios&lt;/a&gt; offers complete monitoring and alerting for servers, switches, applications, and services.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cacti.net/"&gt;Cacti&lt;/a&gt; is a complete network graphing solution designed to harness the power of RRDTool's data storage and graphing functionality.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/dcramer/sentry"&gt;Sentry&lt;/a&gt; Open Source realtime event logging and aggregation platform&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://loggly.com/"&gt;Loggly&lt;/a&gt; Log management cloud service for centralized log search and analysis, time series data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://graphite.wikidot.com/"&gt;graphite&lt;/a&gt; Scalable Realtime Graphing server&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://collectd.org/"&gt;collectd&lt;/a&gt; is a daemon which collects system performance statistics periodically and provides mechanisms to store the values in a variety of ways, for example in RRD files.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mmonit.com/"&gt;monit&lt;/a&gt; Easy, proactive monitoring of Linux/Unix systems, network and cloud services.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://munin-monitoring.org/"&gt;munin&lt;/a&gt; Munin is a networked resource monitoring tool that can help analyze resource trends.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://NewRelic.com"&gt;New Relic&lt;/a&gt; is the only tool you need to pinpoint and solve performance issues in your Ruby, Java, .NET, PHP and Python apps.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://PagerDuty.com"&gt;Pager Duty&lt;/a&gt; Phone &amp;amp; SMS alerting and on-call scheduling for Nagios, Zenoss, Munin, Monit, and most other IT monitoring tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="missing-security-patches"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id32"&gt;Missing security patches&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is important that you regularly schedule applying all security patches on all of your systems. This is a no brainer but it is amazing how much this doesn't happen.&lt;/p&gt;
&lt;p&gt;You should also subscribe to all of the security alert email lists for any of the products that you are using, as well as paying attention the following list of websites below. The sooner you get notified of a potential problem the sooner you can fix it before it effects you.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.us-cert.gov/cas/"&gt;http://www.us-cert.gov/cas/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://seclists.org/"&gt;http://seclists.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.sans.org/newsletters/"&gt;http://www.sans.org/newsletters/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="not-using-ssl-for-payment-page"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id33"&gt;Not using SSL for payment page&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another no brainer, but sometimes it happens. You should add code to your web applications that check to make sure that the payment pages are served over SSL, if not, do a redirect to the SSL version of the page.&lt;/p&gt;
&lt;p&gt;An easy way to do this is to serve the whole site over SSL all of the time, and then do a simple redirect with your web server from port 80 (http) over to port 443(https). This will guarantee that all traffic is served over SSL all of the time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="logging-payment-information"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id34"&gt;Logging payment information&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the most common mistakes that I see is when someone has their logging setup to print out data from the payment form to the logs. This is great for debugging purposes but bad for PCI. You should always strip out the important information out of the request before logging it. You can replace the credit card number with **last4 and get the same result.&lt;/p&gt;
&lt;p&gt;Another common mistake that is similar is dumping all of the data when there is an error and emailing it to the developers. If you do this as well, make sure you strip out the credit card info first or else that person's credit card information is now emailed all over the place, which isn't good at all.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="credit-card-data-that-can-be-stored"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id35"&gt;Credit card data that can be stored&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is important that you NEVER EVER store credit card information in the database, even if it is encrypted. It isn't worth the hassle, risk and the cost of handling an external audit. But if you absolutely insist, here is something you need to know.&lt;/p&gt;
&lt;p&gt;If for some reason you ignore my advice and decide to store credit card data anyway, here is a little chart that will show you which data is allowed to be stored, and If it needs to be encrypted or not.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;According to 3.3 Mask PAN when displayed (the first six and last four digits are the maximum number of digits to be displayed). That means, you need to do something like this *****1234 Visa instead of the actual credit card number. This is pretty common these days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;According to 3.4 : Render PAN unreadable anywhere it is stored (including on portable digital media, backup media, and in logs) by using any of the following approaches:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One-way hashes based on strong cryptography (hash must be of the entire PAN) [ One-way hash functions such as the Secure Hash Algorithm (SHA) based on strong cryptography can be used to render cardholder data unreadable. Hash functions are appropriate when there is no need to retrieve the original number (one-way hashes are irreversible) To complicate the creation of rainbow tables it is recommended, but not a requirement, that a salt value be input to the hash function in addition to the PAN.]&lt;/li&gt;
&lt;li&gt;Truncation (hashing cannot be used to replace the truncated segment of PAN)&lt;/li&gt;
&lt;li&gt;Index tokens and pads (pads must be securely stored)&lt;/li&gt;
&lt;li&gt;Strong cryptography with associated key-management processes and procedures&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="30%" /&gt;
&lt;col width="32%" /&gt;
&lt;col width="38%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Storage Permitted&lt;/th&gt;
&lt;th class="head"&gt;Protection Required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td colspan="3"&gt;&lt;strong&gt;Cardholder Data&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Account Number&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cardholder data&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Expiration Date&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Service Code&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="3"&gt;&lt;strong&gt;Authentication Data&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Magnetic Strip&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CVV&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pin Data&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="tokenization"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id36"&gt;Tokenization&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you need to store credit card information, it is best to use a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Tokenization_(data_security)"&gt;tokenization&lt;/a&gt; service instead of storing it yourself. You store the credit card information in their system. They give you a unique token that you use for all future transactions against that credit card. These types of service are pretty common these days, just ask your credit card processor if they have such a service. Here are a couple of credit card processors that provide this sort of service.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.authorize.net/solutions/merchantsolutions/merchantservices/cim/"&gt;Authorize.net CIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.braintreepayments.com/services/payment-gateway"&gt;BrainTree Vault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stripe.com/docs/stripe.js"&gt;Stripe.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://recurly.com"&gt;Recurly.com subscription based billing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="data-centers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id37"&gt;Data Centers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When you are dealing with PCI compliance you need to worry about the full stack, not just your application, but also the server the application lives on, the network your server is connected to, and the data center your server lives in. The first thing you will want to do is contact your your hosting provider to see if they are PCI compliant, and if so, you might want to request a copy of their PCI documents for your records (you might need them later). Usually hosting providers that are PCI compliant brag about it on their web pages, so that is usually a good place to start.&lt;/p&gt;
&lt;p&gt;The smaller the hosting company that you deal with the smaller the chance you will be PCI compliant. If you are just using a shared hosting plan, and paying $20/month, most likely you are not compliant. You might get lucky, but I doubt it. If you are using a PAAS or a cloud provider, you will also most likely be out of luck.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hosting-in-the-cloud"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id38"&gt;Hosting in the Cloud&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://aws.amazon.com"&gt;Amazon Web Services&lt;/a&gt; (AWS) has recently had their data centers meet PCI compliance, but what is important to note is that just because the data center in compliant, doesn't mean that your application is going to be. If you put your application on EC2, and you accept credit card data that is getting processed on those EC2 instances, you will need to make sure that you also have an Intrusion Detection System (IDS) amongst other things in place or else you aren't PCI compliant. All of the good IDS's are hardware based, and have someone monitoring the traffic at all times. You can't install those systems in AWS, so you will need to rely on a software based solution, which isn't as good, and adds another layer of complexity to your network stack.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://Rackspace.com"&gt;RackSpace&lt;/a&gt; offers a &lt;a class="reference external" href="http://www.rackspace.com/hosting_solutions/hybrid_hosting/"&gt;hybrid cloud hosting&lt;/a&gt; setup, which allows you to have hardware firewall, IDS, Load balancers, cloud web servers and hardware database servers. But even in this setup, it isn't PCI compliant, at least I haven't been able to get RackSpace to tell me it is yet.&lt;/p&gt;
&lt;p&gt;There are other cloud providers that might be able to offer you a complete PCI compliant solution, but I'm guessing they are going to cost more money. If you know of one, please let me know and I'll update this. &lt;a class="reference external" href="http://www.terremark.com/services/security-services/governance-risk-compliance-management/pci-compliance.aspx"&gt;Terremark&lt;/a&gt; might have something.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-scanners"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id39"&gt;Security Scanners&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A key part of the PCI certification is the 3rd party security scanning requirement. Basically you have to pay one of the certified and approved security scanning companies to scan you network, server, application every so often, and if it finds any issues, you will need to fix those, and scan again until you pass their tests. Once you pass the scans they will give you a certificate that you can attach to the rest of your PCI documentation.&lt;/p&gt;
&lt;p&gt;I have used a company called &lt;a class="reference external" href="http://www.controlscan.com"&gt;ControlScan&lt;/a&gt; in the past, and I have also used &lt;a class="reference external" href="http://www.qualys.com"&gt;Qualys&lt;/a&gt;, but I'm sure there are a ton of others out there. Pick the one that looks the best for you. Here is a link to a list of &lt;a class="reference external" href="https://www.pcisecuritystandards.org/approved_companies_providers/approved_scanning_vendors.php"&gt;PCI approved scanning vendors&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="intrusion-detection-systems"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id40"&gt;Intrusion Detection Systems&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Intrusion Detection Systems (IDS) basically sit in front of your network and watch all of the network traffic coming into your network. It looks to see if it notices anything out of the ordinary, of if people are trying to use known attacks, and if it finds something it will let you know. They have hard ware and software based solutions. They range in price from free to thousands of dollars a month. They all have different features and abilities, it is best to pick one that has what you need, that you are comfortable maintaining.&lt;/p&gt;
&lt;p&gt;I have used &lt;a class="reference external" href="http://www.alertlogic.com"&gt;AlertLogic's&lt;/a&gt; hardware based IDS, and it works well. They have a pool of on call people who monitor the devices and if something gets triggered they look it over, and act accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hashing-credit-card-numbers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id41"&gt;Hashing credit card numbers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is a great example on why hashing credit card numbers isn't a good idea. I'm borrowing some of this from these two links.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.oreilly.com/rails2011/public/schedule/detail/19466"&gt;http://en.oreilly.com/rails2011/public/schedule/detail/19466&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.integrigy.com/security-resources/whitepapers/Integrigy_Hashing_Credit_Card_Numbers_Unsafe_Practices.pdf"&gt;http://www.integrigy.com/security-resources/whitepapers/Integrigy_Hashing_Credit_Card_Numbers_Unsafe_Practices.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just because you are following PCI rules doesn’t mean you are invincible, you still have to use your common sense.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PCI DSS section 3.4 &lt;a class="reference external" href="http://www.pcisecuritystandards.org/pdfs/pci_audit_procedures_v1-1.pdf"&gt;[pdf]&lt;/a&gt;:
Render PAN, at minimum, unreadable anywhere it is stored .. by using any of the following approaches: Strong one-way hash functions (hashed indexes)&lt;/p&gt;
&lt;p&gt;Verify that data is rendered unreadable using one of the following methods: one-way hashes (hashed indexes) such as SHA-1&lt;/p&gt;
&lt;p&gt;Basically what this is saying is that you are allowed to store the first 6 digits of a credit card (BIN) as well as the last 4 digits of the credit card. Credit cards are between 13-16 digits in length and the last digit is the check digit (&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Luhn_algorithm"&gt;Luhn algorithm&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's see how hard it would be to figure out this credit card number. 4012888888881881&lt;/p&gt;
&lt;p&gt;If we start with a full 16 digits that means that we have ￼10^16 or 10,000,000,000,000,000 (10 Quadrillion) Possible Card Numbers, if we didn't know anything about the card.&lt;/p&gt;
&lt;p&gt;Since we are storing the credit card type, we know this is a visa, visa credit cards all start with a 4 so that means that is could be 4XXXXXXXXXXXXXXX or ￼4,000,000,000,000,000 (4 Quadrillion) Possible Card Numbers, we just cut the number of possible cards in more then half.&lt;/p&gt;
&lt;p&gt;If we also store the bin (first 6 digits) and the last 4 digits, then it would look like this. 401288******1881 or 1,000,000 (1 million) possible card numbers.&lt;/p&gt;
&lt;p&gt;Starting with that lets try to write a simple cracker (Ruby)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;hashed_card_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;62163a017b168ad4a229c64ae1bed6ffd5e8fb2d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;masked_card_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;401288******1881&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;digest/sha1&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_hashed_card_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;hashed_card_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_six&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_four&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;999_999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;card_number_to_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;first_six&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%06d&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;last_four&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="n"&gt;hashed_to_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;Digest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:SHA1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card_number_to_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashed_card_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;hashed_card_number_to_test&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;card_number_to_test&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's run it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="no"&gt;Benchmark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;reverse_hashed_card_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;62163a017b168ad4a229c64ae1bed6ffd5e8fb2d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;401288&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;1881&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;
&lt;span class="mi"&gt;4012888888881881&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;33522081375122&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In 5.3 seconds it was able to crack the hash, if you use only a SHA-1 hash. We could possibly make it even faster if we did a luhn check on the number before we ran the hash, and if the luhn check fails then we know the number isn't valid and there is no need to run the hash. Since the hash function is going to be slower then the luhn check it should speed things up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rainbow-tables-salts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id42"&gt;Rainbow Tables + Salts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since we know that there is a finite number of credit cards, we could pre-calculate the hash code for every single one of the 10 Quadrillion possible card values, and store those in a lookup table. Then when ever I wanted to crack a credit card hash, all i would need is the credit card hash, and I would be able to figure out the value of that card, very quickly. Storing all of the known values in a table like this is called a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rainbow_tables"&gt;Rainbow table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ideally if you are going to hash a credit card, don't use SHA-1, or MD5, use one of the newer SHA versions, SHA-256 or above, and also use a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Salt_(cryptography)"&gt;salt&lt;/a&gt;. A salt is basically a second unique value that you always use when hashing, to generate a different salt then you would normally get with just the credit card number.&lt;/p&gt;
&lt;p&gt;Since I won't have your salt when I generate my rainbow table, my rainbow table will be no good. It adds yet another layer of security. Make sure you don't lose your SALT or else you will have to start over from scratch. Treat your salt like a password, and keep it safe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="do-i-really-have-to-worry-about-being-hacked"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id43"&gt;Do I really have to worry about being hacked?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is a short list of companies that have been hacked recently. If they can get hacked, so could you.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/T.K._Maxx#2007_credit_card_fraud"&gt;TJ Maxx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bank of America&lt;/li&gt;
&lt;li&gt;Citigroup&lt;/li&gt;
&lt;li&gt;BJ's wholesale club&lt;/li&gt;
&lt;li&gt;Hotels.com&lt;/li&gt;
&lt;li&gt;LexisNexis&lt;/li&gt;
&lt;li&gt;Polo Ralph Lauren&lt;/li&gt;
&lt;li&gt;Wachovoa&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Heartland_Payment_Systems#Security_breach"&gt;Heartland Payment Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hannaford&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-could-happen-if-you-were-hacked"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id44"&gt;What could happen if you were Hacked?&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Banned from accepting credit cards&lt;/li&gt;
&lt;li&gt;Loss of reputation and customers&lt;/li&gt;
&lt;li&gt;Fines up to $500,000 per incident&lt;/li&gt;
&lt;li&gt;Litigation (you could be sued)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-i-was-breached"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id45"&gt;What if I was breached?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the event of a security incident, merchants must take immediate action to:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Contain and limit the exposure. Conduct a thorough investigation of the suspected or confirmed loss or theft of account information within 24 hours of the compromise&lt;/li&gt;
&lt;li&gt;Alert all necessary parties. Be sure to notify: * Merchant Account Provider * Visa Fraud Control Group at (650) 432-2978 * Local FBI Office * U.S. Secret Service (if Visa payment data is compromised)&lt;/li&gt;
&lt;li&gt;Provide the compromised Visa accounts to Visa Fraud Control Group within 24 hours.&lt;/li&gt;
&lt;li&gt;Within four business days of the reported compromise, provide Visa with an incident report.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="build-pci-complaint-django-applications"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id46"&gt;Build PCI Complaint Django Applications&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I recently gave a talk on Build PCI Complaint Django Applications, at DjangoCon US 2012 in Washington D.C. Here are my slides and the video of my talk.&lt;/p&gt;
&lt;div class="section" id="slides"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id47"&gt;Slides&lt;/a&gt;&lt;/h3&gt;
&lt;div style="width: 710px;height: 612px;" id="slides_container"&gt; &lt;script async class="speakerdeck-embed" data-id="5048f7b290b276000202452f" data-ratio="1.2994923857868" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="video"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id48"&gt;Video&lt;/a&gt;&lt;/h3&gt;
&lt;iframe width="640" height="360" src="http://www.youtube.com/embed/9ZIPNWqjIEI?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="links"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id49"&gt;Links:&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.akamai.com/html/solutions/security/edge_tokenization.html"&gt;Akamai edge tokenization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pcisecuritystandards.org"&gt;PCI Security Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.americanexpress.com/datasecurity"&gt;American Express PCI pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.discovernetwork.com/fraudsecurity/disc.html"&gt;Discover Financial Services PCI pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jcb-global.com/english/pci/index.html"&gt;JCB International PCI pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.mastercard.com/sdp"&gt;MasterCard Worldwide PCI pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.visa.com/cisp"&gt;Visa Inc PCI pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.visaeurope.com/ais"&gt;Visa Europe PCI pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="pci"></category></entry><entry><title>Getting DjangoCMS up and running on ActiveState's Stackato</title><link href="http://kencochrane.net/blog/2012/01/getting-djangocms-up-and-running-on-stackato/" rel="alternate"></link><updated>2012-01-15T13:30:13-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2012-01-15:blog/2012/01/getting-djangocms-up-and-running-on-stackato/</id><summary type="html">&lt;p&gt;ActiveState has recently started their own PAAS based on &lt;a class="reference external" href="http://cloudfoundry.org/"&gt;CloudFoundry&lt;/a&gt; this blog post is to help you get up and running quickly with a Django CMS installation, and hopefully give you enough information to get your own applications on there as well.&lt;/p&gt;
&lt;p&gt;To keep things simple, I'll just go through the steps that are required in order to get this up and running and add some comments along the way. If I missed anything or if you have any questions, please ask in the comments.&lt;/p&gt;
&lt;div class="section" id="running-on-stackato"&gt;
&lt;h2&gt;Running on Stackato&lt;/h2&gt;
&lt;div class="section" id="register-for-an-account"&gt;
&lt;h3&gt;1. Register for an account&lt;/h3&gt;
&lt;p&gt;Go to &lt;a class="reference external" href="http://community.activestate.com/stackato"&gt;http://community.activestate.com/stackato&lt;/a&gt; and register for your account. They are currently in beta, and you need to be approved before they will give you access.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-the-client"&gt;
&lt;h3&gt;2. Install the client&lt;/h3&gt;
&lt;p&gt;There are a few different options, follow the steps outlined here. &lt;a class="reference external" href="http://docs.stackato.com/quick-start.html#stackato-client-setup"&gt;http://docs.stackato.com/quick-start.html#stackato-client-setup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I tried the option where you download the file, and rename it and put it in your path. It wasn't complicated, but it wasn't clean either. I chose this option because I didn't want to install &lt;a class="reference external" href="http://code.activestate.com/pypm/"&gt;pypm&lt;/a&gt;, so I'm not sure if that way is easier or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="register-your-client-to-the-cloud"&gt;
&lt;h3&gt;3. Register your client to the cloud&lt;/h3&gt;
&lt;p&gt;Now that you have the client installed you need to tell it which cloud to deploy too. With Stackato, you can run your own local cloud as well as using the sandbox that ActiveState provided. To make things simple, I'm going to use the sandbox. If you want to use the local cloud you will need to &lt;a class="reference external" href="http://docs.stackato.com/quick-start.html#accesssing-the-micro-cloud"&gt;read the directions&lt;/a&gt; on how to use the local cloud option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato target api.sandbox.activestate.com
&amp;gt; Successfully targeted to &lt;span class="o"&gt;[&lt;/span&gt;https://api.sandbox.activestate.com&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="login-to-stackato"&gt;
&lt;h3&gt;4. Login to stackato&lt;/h3&gt;
&lt;p&gt;Once you point your client in the correct location, you will need to login to the cloud. You can find your login information on your &lt;a class="reference external" href="https://account.activestate.com/"&gt;activestate account page&lt;/a&gt;. Type the following and answer the questions when prompted.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato login
&amp;gt; Successfully logged into &lt;span class="o"&gt;[&lt;/span&gt;https://api.sandbox.activestate.com&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="download-this-github-repo"&gt;
&lt;h3&gt;5. Download this github repo&lt;/h3&gt;
&lt;p&gt;To make things easier, I have made a simple django project that has all of the configuration information setup so that you don't need to do anything if you want to use djangoCMS. Look at my &lt;a class="reference external" href="https://github.com/kencochrane/django-cms-stackato"&gt;github repo&lt;/a&gt;, and see how I did things if you want to get your own application up and running. If you want to use djangoCMS, then all you have to do is follow these steps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/kencochrane/django-cms-stackato.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-cms-stackato
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deploy-the-project-to-stackato"&gt;
&lt;h3&gt;6. Deploy the project to stackato&lt;/h3&gt;
&lt;p&gt;Once you have your application ready, you can push the application to the cloud. When you do this it will prompt you for a bunch of questions, answer them and keep track of what you picked for a website url, because you will need that later. My application is called myblog, but you can put whatever you want, just change myblog with your name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato push myblog
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="initialize-the-database-optional"&gt;
&lt;h3&gt;7. Initialize the database (optional)&lt;/h3&gt;
&lt;p&gt;I have set this up so that it should happen automatically at deployment see the stackato.yml file for more details. If you want to run the commands outside of deployments this is what you can do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato run myblog python mycms/manage.py syncdb --noinput
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-south-migrations-optional"&gt;
&lt;h3&gt;8. Run south migrations (optional)&lt;/h3&gt;
&lt;p&gt;I have set this up so that it should happen automatically at deployment see the stackato.yml file for more details. If you want to run the commands outside of deployments this is what you can do. It is important to note &lt;em&gt;I had to run more then once since it was killed the first time. Maybe it took too long?&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato run myblog python mycms/manage.py migrate --noinput
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="collect-the-static-files-optional"&gt;
&lt;h3&gt;9. Collect the static files (optional)&lt;/h3&gt;
&lt;p&gt;I have set this up so that it should happen automatically at deployment see the stackato.yml file for more details. If you want to run the commands outside of deployments this is what you can do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato run myblog python mycms/manage.py collectstatic --noinput
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-the-django-admin-account"&gt;
&lt;h3&gt;10. Create the django admin account&lt;/h3&gt;
&lt;p&gt;Now that you have your application installed and you have your database setup, you need to create the django admin, you can do that with ths django management command.
Make sure you replace the variables with your values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato run myblog python mycms/manage.py createsuperuser --username&lt;span class="o"&gt;=&lt;/span&gt;admin --email&lt;span class="o"&gt;=&lt;/span&gt;admin@example.com --noinput
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="change-the-password-for-the-admin-user"&gt;
&lt;h3&gt;11. Change the password for the admin user&lt;/h3&gt;
&lt;p&gt;You need to set a password for the admin account so that you can login. Pick a more secure password then the example I have here. &lt;em&gt;(notice it is changepassword2 not changepassword)&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato run myblog python mycms/manage.py changepassword2 admin secret123P@ssw0rd!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="open-up-the-url-in-your-browser"&gt;
&lt;h3&gt;12. Open up the url in your browser&lt;/h3&gt;
&lt;p&gt;When you open up the URL that you picked when you deployed in your browser you should find the DjangoCMS pony welcome page. If not, try debugging using some of the tips below.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That is it, I did all the hard work, so you should be able to follow those simple steps and get djangoCMS up and running in no time. Once you get that working, play around with it, and let me know what you think. Have you tried the other PAAS options yet, if not check those out as well, and then let me know which ones you like better and why. I have written blog posts about most of them at this point, so feel free to check those out (links below), and have fun playing around.&lt;/p&gt;
&lt;div class="section" id="other-useful-information"&gt;
&lt;h3&gt;Other Useful Information&lt;/h3&gt;
&lt;div class="section" id="starting-an-application-if-it-isn-t-running"&gt;
&lt;h4&gt;Starting an application if it isn't running&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato start myblog
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="restarting-an-application"&gt;
&lt;h4&gt;Restarting an application&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato restart myblog
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="stopping-an-application"&gt;
&lt;h4&gt;Stopping an application&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato stop myblog
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-application-after-it-is-already-deployed"&gt;
&lt;h4&gt;Updating application after it is already deployed&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato update myblog
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="find-out-how-many-instances-you-have-running"&gt;
&lt;h4&gt;Find out how many instances you have running&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; stackato stats myblog
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="find-out-which-apps-you-have-installed-and-their-status"&gt;
&lt;h4&gt;Find out which apps you have installed, and their status&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato apps
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="find-out-what-logs-you-have-for-your-applications"&gt;
&lt;h4&gt;Find out what logs you have for your applications&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato files myblog logs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="viewing-logs-for-your-app"&gt;
&lt;h4&gt;Viewing logs for your app&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato logs myblog --all
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-cat-on-a-particular-log-file"&gt;
&lt;h4&gt;Running cat on a particular log file&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;stackato run myblog cat ../logs/myapp-err.log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="links"&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My github repo for this blog post: &lt;a class="reference external" href="https://github.com/kencochrane/django-cms-stackato"&gt;https://github.com/kencochrane/django-cms-stackato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackato Client command reference: &lt;a class="reference external" href="http://docs.stackato.com/commands.html#command-ref-client"&gt;http://docs.stackato.com/commands.html#command-ref-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;stackato.yml reference: &lt;a class="reference external" href="http://docs.stackato.com/client.html#configure-stackato-yml"&gt;http://docs.stackato.com/client.html#configure-stackato-yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackato quick start guide: &lt;a class="reference external" href="http://docs.stackato.com/quick-start.html"&gt;http://docs.stackato.com/quick-start.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackato Sandbox Ground Rules, Content Policy and Quotas: &lt;a class="reference external" href="http://docs.stackato.com/sandbox.html"&gt;http://docs.stackato.com/sandbox.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ActiveState Account page: &lt;a class="reference external" href="https://account.activestate.com/"&gt;https://account.activestate.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pip : &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;http://www.pip-installer.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git : &lt;a class="reference external" href="http://git-scm.com/"&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="my-other-articles-related-to-paas"&gt;
&lt;h3&gt;My other articles related to PAAS:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;My Experiences with ep.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;AppHosted.com Django Hosting Service Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;My Day in Gondor.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;Deploying my Django application to DotCloud.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/12/installing-djangocms-on-heroku-in-13-easy-steps/"&gt;Installing DjangoCMS on Heroku in 13 easy steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/"&gt;Installing DjangoCMS on dotCloud in 12 easy steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/"&gt;Developers guide to Running Django Applications on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2012/01/installing-django-application-on-openshift/"&gt;Installing a Django application on Red Hat's OpenShift PAAS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to Stackato. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="djangocms"></category><category term="stackato"></category><category term="python"></category><category term="hosting"></category><category term="paas"></category></entry><entry><title>Installing a Django application on Red Hat's OpenShift PAAS</title><link href="http://kencochrane.net/blog/2012/01/installing-django-application-on-openshift/" rel="alternate"></link><updated>2012-01-14T14:05:52-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2012-01-14:blog/2012/01/installing-django-application-on-openshift/</id><summary type="html">&lt;p&gt;It seems like everyone has their own &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Platform_as_a_service"&gt;PAAS&lt;/a&gt; solution these days, and if they don't have one yet, it is just a matter of time before they will. Red Hat has recently joined in on the fun with their &lt;a class="reference external" href="https://openshift.redhat.com"&gt;OpenShift&lt;/a&gt; platform.&lt;/p&gt;
&lt;p&gt;I decided to take it for a test drive, and share my results with you. This service is still in beta and things are changing all of the time, so these notes might not work in the future, take that into consideration when using it as a guide.&lt;/p&gt;
&lt;p&gt;There really isn't much python documentation for this platform, and what documentation there is, is either a little out of date, or missing some important steps. Hopefully this guide will help you get your application up and running.&lt;/p&gt;
&lt;p&gt;OpenShift is divided into two parts, Flex and Express.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://openshift.redhat.com/app/flex"&gt;Flex&lt;/a&gt;:&lt;/h2&gt;
&lt;blockquote&gt;
&amp;quot;Dedicated cloud solution.
Get more control over your apps, or move your existing applications to the cloud with ease! Flex is a dedicated cloud solution that provides everything you need to easily scale, provision, deploy, and monitor your applications.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Flex runs on top of your amazon EC2 account, and currently only supports Java and PHP. It is targeting the enterprise crowd and has more features compared to Express.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://openshift.redhat.com/app/express"&gt;Express&lt;/a&gt;:&lt;/h2&gt;
&lt;blockquote&gt;
&amp;quot;Shared cloud solution. Express is a free, cloud-based application platform for Java, Perl, PHP, Python, and Ruby applications. It's super-simple—your development environment is also your deployment environment: git push, and you're in the cloud!&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Express runs on Red Hat's servers, and currently supports Java, Ruby, PHP, Perl and Python apps. It doesn't have the same features of Flex, but if you don't need those advanced features, then express might be fine for you. Since I'm interested in deploying python apps, and Express is the only one that supports python apps, that is the one I'll show you today.&lt;/p&gt;
&lt;p&gt;To make things easier to show you how things work, I'll create a simple django application and walk you through the steps to deploying it. I'm going to deploy a djangoCMS to express that will connect to a mysql database.&lt;/p&gt;
&lt;div class="section" id="steps"&gt;
&lt;h3&gt;Steps:&lt;/h3&gt;
&lt;div class="section" id="create-an-account"&gt;
&lt;h4&gt;1. Create an account&lt;/h4&gt;
&lt;p&gt;Create an account by filling out the form at &lt;a class="reference external" href="http://openshift.redhat.com/"&gt;http://openshift.redhat.com/&lt;/a&gt; and don't forget your username and password, you will need that later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-perquisites"&gt;
&lt;h4&gt;2. Install Perquisites:&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git-scm.com/"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python.org"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;openshift client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Git:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'm not going to go over the steps to install git, for more info, you can get it from the git website. &lt;a class="reference external" href="http://git-scm.com/download"&gt;http://git-scm.com/download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you are using a Mac or linux, it most likely already has python installed, if you are using windows, you you don't have python installed. Goto the python website and you will find instructions on how to install python on your system. &lt;a class="reference external" href="http://python.org/download/"&gt;http://python.org/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OpenShift client:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For instructions on how to Install the client go to this page.  &lt;a class="reference external" href="https://openshift.redhat.com/app/express#mac"&gt;https://openshift.redhat.com/app/express#mac&lt;/a&gt; Here are my steps for Mac OSX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo gem install json_pure
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo gem install rhc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-domain"&gt;
&lt;h4&gt;3. Create a domain.&lt;/h4&gt;
&lt;p&gt;Now that you have everything installed, your first step is to create a domain. Run the following command and  replace $mydoman and $loginemail with your own domain and the login email you used when creating an account.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-create-domain -n &lt;span class="nv"&gt;$mydomain&lt;/span&gt; -l &lt;span class="nv"&gt;$loginemail&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-an-application"&gt;
&lt;h4&gt;4. Create an application&lt;/h4&gt;
&lt;p&gt;Now that you have a domain, you need to create an application that you can deploy to that domain. Running the following command will create a new wsgi application called 'blog'. You can name your application anything you want, within reason. We pick wsgi, because our python application will be wsgi compatible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-create-app -a blog -t wsgi-3.2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-mysql-to-your-app"&gt;
&lt;h4&gt;5. Add mysql to your app&lt;/h4&gt;
&lt;p&gt;We want to use mysql as our database backend for this blog, so we need to add mysql to our application using the command below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-ctl-app -a blog -e add-mysql-5.1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-phpmyadmin-to-help-you-manage-your-database"&gt;
&lt;h4&gt;6. Add phpmyadmin to help you manage your database&lt;/h4&gt;
&lt;p&gt;OpenShift doesn't give you direct access to your database, so you will need a way to manage your database a different way. They provide the ability to add PHPMyAdmin to your app so that you can get to your data. This step is optional, but recommended.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-ctl-app -a blog -e add-phpmyadmin-3.4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-this-upstream-repo-from-github"&gt;
&lt;h4&gt;7. Add this upstream repo from github&lt;/h4&gt;
&lt;p&gt;When you create your application, it will create a directory with a bunch of other files and directories in it. If you were starting from scratch and building up your application you would start from here. To make things easier I created a project on github that will allow you to get up and running with DjangoCMS much faster. In order to use my project you will need to run the following commands so that it will pull down the code into your project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;blog
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add upstream -m master git://github.com/kencochrane/django-cms-openshift.git
&lt;span class="nv"&gt;$ &lt;/span&gt;git pull -s recursive -X theirs upstream master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the code is downloaded, you can take a look at the code, change anything you want and when you are ready you can deploy the app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-the-app"&gt;
&lt;h4&gt;8. Deploying the app&lt;/h4&gt;
&lt;p&gt;To deploy all you need to do is push the repo upstream into open shift. To this, you just need to run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When it pushes you application into open shift it will do the following. (without jenkins add-on installed)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;stop app&lt;/li&gt;
&lt;li&gt;*pre_build&lt;/li&gt;
&lt;li&gt;*build&lt;/li&gt;
&lt;li&gt;start_dbs&lt;/li&gt;
&lt;li&gt;*deploy&lt;/li&gt;
&lt;li&gt;start_app&lt;/li&gt;
&lt;li&gt;*post_deploy&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;The steps marked with a * are scripts that are located in &lt;em&gt;.openshift/action_hooks/&amp;lt;script_name&amp;gt;&lt;/em&gt; if you have something in those files it will run them, and if not, it will pass right by. These are very helpful if you want something to happen at points of the deployment process. For example, in the deploy script you will notice that I have some code to kick off the django syncdb, migrate, and collect static commands. These will run every time I deploy the app.&lt;/p&gt;
&lt;p&gt;I have also created a django management command that will check to see if there is a django admin account created and if not, it will create one and set the default password. I had to do this because there is currently no way that I know of where you can kick off django management commands after the deployment is finished. It will only create the admin account once, and every other time it will just get ignored.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; It is important to note that if you want to do anything related to the database, you can't do it in the &lt;em&gt;pre_build&lt;/em&gt; or &lt;em&gt;build&lt;/em&gt; scripts, because the database isn't available yet. This one thing caused me lots of pain, because I couldn't figure out by my migrations were not working. If you do make the mistake of trying to do something database related in the &lt;em&gt;build&lt;/em&gt; script you will see an error like this.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;remote: ERROR 2003 (HY000): Can't connect to MySQL server on 'xxx.x.xx.x' (111)&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;That's it, you can now checkout your application at (default admin account is admin/&amp;lt;password given at deploy time&amp;gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://blog-$yourdomain.rhcloud.com"&gt;http://blog-$yourdomain.rhcloud.com&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Once you visit the page you should see the djangoCMS default page. First things first, login to the django admin, and change the password from the default password to something secure. Then get started building your own app.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="helpful-tips"&gt;
&lt;h3&gt;Helpful tips:&lt;/h3&gt;
&lt;div class="section" id="viewing-logs"&gt;
&lt;h4&gt;Viewing logs:&lt;/h4&gt;
&lt;p&gt;If you would like to view your logs to see what is going on with your application you just need to run this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-tail-files -a blog
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="application-information"&gt;
&lt;h4&gt;Application information:&lt;/h4&gt;
&lt;p&gt;If you would like more information about your application you can run this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-user-info
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also checkout the README file they add when you create an application, it is pretty helpful, and might answer some common questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-dependencies"&gt;
&lt;h4&gt;Application dependencies:&lt;/h4&gt;
&lt;p&gt;OpenShift uses virtualenv but it doesn't use pip, it depends on the dependencies be listed in the setup.py file. During the deploy process I did notice that it installed pip, so it might be possible to add a requirements.txt file, and then in your build action_hook script call pip install -r &amp;lt;path&amp;gt;/requirements.txt but I'm not sure if this is supported, or if it will cause problems, so it might be best to stick with what they have for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="static-media"&gt;
&lt;h4&gt;Static media:&lt;/h4&gt;
&lt;p&gt;If you look in wsgi/static/.htaccess there a rewrite rule to get the media to work correctly, you can use this trick for other apache tricks if you want. For more information on this checkout the README file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-it-open-shift-running"&gt;
&lt;h4&gt;What is it open shift running:&lt;/h4&gt;
&lt;p&gt;Red Hat linux with Apache / mod_wsgi, and mysql 5.1&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-type-of-apps-do-they-support"&gt;
&lt;h4&gt;What type of apps do they support?&lt;/h4&gt;
&lt;p&gt;Here is the current link which can be found if you run this commands and look at the types.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-create-app -h

raw-0.1, php-5.3, jbossas-7.0, rack-1.1, jenkins-1.4, perl-5.10, wsgi-3.2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-else-does-it-support"&gt;
&lt;h4&gt;What else does it support?&lt;/h4&gt;
&lt;p&gt;Things are changing all of the time, but if you run this command you will get a list of the current supported addons.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-ctl-app -L

List of supported embedded cartridges:

Obtaining list of cartridges &lt;span class="o"&gt;(&lt;/span&gt;please excuse the delay&lt;span class="o"&gt;)&lt;/span&gt;...

    - metrics-0.1
    - mysql-5.1
    - jenkins-client-1.4
    - 10gen-mms-agent-0.1
    - phpmyadmin-3.4
    - rockmongo-1.1
    - mongodb-2.0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="web-based-control-panel"&gt;
&lt;h4&gt;Web based control panel:&lt;/h4&gt;
&lt;p&gt;They offer a web based control panel to do some of the things you can do with the command line, which will be nice, but it doesn't work right now. It doesn't display the correct information, and it doesn't even show the applications I have created, so I don't trust it. Hopefully these issues will get fixed in the future, and this tool will make it easier for less technical people to get started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h4&gt;Conclusion:&lt;/h4&gt;
&lt;p&gt;It is nice to see another platform on the market, it is still pretty rough, and there isn't much documentation, but I found it usable. I'm sure once they stabilize things, they will spend more time on the documentation side of things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-helpful-openshift-links"&gt;
&lt;h4&gt;Other Helpful OpenShift links:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kencochrane/django-cms-openshift"&gt;My GitHub repo for this article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/openshift/django-example"&gt;https://github.com/openshift/django-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.ianweller.org/2011/05/12/openshift-express-first-thoughts/"&gt;http://blog.ianweller.org/2011/05/12/openshift-express-first-thoughts/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="my-other-articles-related-to-paas"&gt;
&lt;h4&gt;My other articles related to PAAS:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;My Experiences with ep.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;AppHosted.com Django Hosting Service Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;My Day in Gondor.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;Deploying my Django application to DotCloud.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/12/installing-djangocms-on-heroku-in-13-easy-steps/"&gt;Installing DjangoCMS on Heroku in 13 easy steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/"&gt;Installing DjangoCMS on dotCloud in 12 easy steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/"&gt;Developers guide to Running Django Applications on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h4&gt;Update&lt;/h4&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to openShift. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="djangocms"></category><category term="openshift"></category><category term="python"></category><category term="hosting"></category><category term="paas"></category></entry><entry><title>Installing DjangoCMS on Heroku in 13 easy steps</title><link href="http://kencochrane.net/blog/2011/12/installing-djangocms-on-heroku-in-13-easy-steps/" rel="alternate"></link><updated>2011-12-31T14:25:11-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-12-31:blog/2011/12/installing-djangocms-on-heroku-in-13-easy-steps/</id><summary type="html">&lt;p&gt;Do you want to use Django-cms on Heroku but don't know where to start? All you need to do is follow these 13 easy steps, and they will get you on your way.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a place to store your project&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkdir -p ~/projects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Go into the projects directory&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ cd ~/projects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Clone git repo from github, requires git client.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git clone git://github.com/kencochrane/django-cms-heroku.git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Go into the new project directory&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ cd django-cms-heroku&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Creating the virtualenv (using virtualenvwrapper, virtualenv, and pip)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkvirtualenv --no-site-packages --distribute django-cms-heroku&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sign-Up for a Heroku account. &lt;a class="reference external" href="https://api.heroku.com/signup"&gt;https://api.heroku.com/signup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the Heroku client. &lt;a class="reference external" href="http://devcenter.heroku.com/articles/quickstart"&gt;http://devcenter.heroku.com/articles/quickstart&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The first time you use the Heroku client you will need to login using the same information you used when you signed up. Follow the prompts, and it will finish your install.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ heroku login&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create your heroku application&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ heroku create --stack cedar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Push your code into heroku&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git push heroku master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sync your database and create your admin account.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ heroku run python mycms/manage.py syncdb --all&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Run your database migrations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ heroku run python mycms/manage.py migrate --fake&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open application in your browser and start using djangoCMS on heroku.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ heroku open&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you get comfortable with how things work, you could add more plug-ins, create your own custom templates and then change your DEBUG setting to False. So go ahead &lt;a class="reference external" href="https://github.com/kencochrane/django-cms-heroku/fork"&gt;fork my project on github&lt;/a&gt;  and get started.&lt;/p&gt;
&lt;p&gt;After you make changes to your local project directory, you can test it on the server by running the git push command again.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;For more info about Heroku and django-cms and what you can do with with it. check out their docs&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://devcenter.heroku.com/categories/platform-basics"&gt;http://devcenter.heroku.com/categories/platform-basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.django-cms.org/en/documentation/"&gt;https://www.django-cms.org/en/documentation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Links:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt; : &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;http://pypi.python.org/pypi/virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pip&lt;/strong&gt; : &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;http://www.pip-installer.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virtualenvwrapper&lt;/strong&gt; : &lt;a class="reference external" href="http://www.doughellmann.com/projects/virtualenvwrapper/"&gt;http://www.doughellmann.com/projects/virtualenvwrapper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git&lt;/strong&gt; : &lt;a class="reference external" href="http://git-scm.com/"&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</summary><category term="django"></category><category term="djangocms"></category><category term="heroku"></category><category term="paas"></category></entry><entry><title>Installing DjangoCMS on dotCloud in 12 easy steps</title><link href="http://kencochrane.net/blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/" rel="alternate"></link><updated>2011-12-31T13:26:42-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-12-31:blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/</id><summary type="html">&lt;p&gt;Do you want to use Django-cms on dotcloud but don't know where to start? All you need to do is follow these 12 easy steps, they will get you on your way.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a place to store your project&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkdir -p ~/projects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Go into the projects directory&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ cd ~/projects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Clone git repo from github, requires git client.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git clone git://github.com/kencochrane/django-cms-dotcloud.git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Go into the new project directory&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ cd django-cms-dotcloud&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Creating the virtualenv (using virtualenvwrapper, virtualenv, and pip)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkvirtualenv --no-site-packages --distribute django-cms-dotcloud&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Installing the dotCloud client  &lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/install/"&gt;http://docs.dotcloud.com/firststeps/install/&lt;/a&gt; (here are the steps for Linux and Mac OSX)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ sudo pip install -U dotcloud&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sign up for a dotcloud account &lt;a class="reference external" href="https://www.dotcloud.com/accounts/register/"&gt;https://www.dotcloud.com/accounts/register/&lt;/a&gt; if you haven't already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The first time you use the dotcloud account you will need to add your api key. So type dotcloud and follow the steps. You can find your API key at &lt;a class="reference external" href="http://www.dotcloud.com/account/settings"&gt;http://www.dotcloud.com/account/settings&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create your dotcloud application&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud create mycmsapp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Push your code into dotcloud&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud push mycmsapp .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Find out your application url.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud url mycmsapp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open url in your browser and start using djangoCMS on dotcloud.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Optional: If you don't like the URL they gave you, you can use your custom domain. Assuming your application was ramen.www and your domain was www.example.com you would do the following.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud alias add ramen.www www.example.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you get comfortable with how things work, you could add more plug-ins, create your own custom templates and then change your DEBUG setting to False. So go ahead &lt;a class="reference external" href="https://github.com/kencochrane/django-cms-dotcloud/fork"&gt;fork my project on github&lt;/a&gt;  and get started.&lt;/p&gt;
&lt;p&gt;After you make changes to your local project directory, you can test it on the server by running the dotcloud push command again.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;For more info about dotcloud and django-cms and what you can do with with it. check out their docs&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/platform-overview/"&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.django-cms.org/en/documentation/"&gt;https://www.django-cms.org/en/documentation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;strong&gt;dotcloud&lt;/strong&gt; : &lt;a class="reference external" href="http://dotcloud.com"&gt;http://dotcloud.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt; : &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;http://pypi.python.org/pypi/virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pip&lt;/strong&gt; : &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;http://www.pip-installer.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virtualenvwrapper&lt;/strong&gt; : &lt;a class="reference external" href="http://www.doughellmann.com/projects/virtualenvwrapper/"&gt;http://www.doughellmann.com/projects/virtualenvwrapper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git&lt;/strong&gt; : &lt;a class="reference external" href="http://git-scm.com/"&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</summary><category term="django"></category><category term="djangocms"></category><category term="dotcloud"></category><category term="paas"></category></entry><entry><title>Using New Relic with supervisord and gunicorn</title><link href="http://kencochrane.net/blog/2011/12/using-new-relic-with-supervisord-and-gunicorn/" rel="alternate"></link><updated>2011-12-30T14:53:35-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-12-30:blog/2011/12/using-new-relic-with-supervisord-and-gunicorn/</id><summary type="html">&lt;p&gt;New Relic recently added support for python to their awesome web application performance tool, and I have been playing with it on a number of projects.&lt;/p&gt;
&lt;p&gt;Installing and configuring new relic is pretty well covered in their own &lt;a class="reference external" href="http://newrelic.com/docs/python/"&gt;documentation&lt;/a&gt;, so there is no reason for me to repeat that here. One thing that isn't covered in the documentation is how to use new relic if you are using supervisord to control your gunicorn processes, and I'll take this time right now to show you what I did.&lt;/p&gt;
&lt;p&gt;Setting up new relic with supervisord and gunicorn is pretty easy. All that you need to do, is change your supervisor.conf file and then update your supevisor config, and you are good to go.&lt;/p&gt;
&lt;p&gt;Here is the supervisor.conf file for my awesome app, before I installed new relic.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: These are not my real conf files, they have been changed to protect the guilty, so please excuse any typos.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[program:awesome_app]
directory=/opt/apps/awesome_home/awesome_app/
command=/opt/apps/awesome_home/bin/python2.6 /opt/apps/awesome_home/bin/gunicorn_django -c /opt/apps/awesome_home/awesome_app/conf/gunicorn.conf
user=aweman
autostart=true
autorestart=true
environment=HOME=&amp;#39;/opt/apps/awesome_home/awesome_app/&amp;#39;,DJANGO_SETTINGS_MODULE=&amp;#39;settings&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After I installed new relic. All you need to do is add the 'newrelic-admin run-program' command before the 'gunicorn_django' command and add an ENV variable called NEW_RELIC_CONFIG_FILE that is pointing to your newrelic.ini file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[program:awesome_app]
directory=/opt/apps/awesome_home/awesome_app/
command=/opt/apps/awesome_home/bin/newrelic-admin run-program /opt/apps/awesome_home/bin/gunicorn_django -c /opt/apps/awesome_home/awesome_app/conf/gunicorn.conf
user=aweman
autostart=true
autorestart=true
environment=HOME=&amp;#39;/opt/apps/awesome_home/awesome_app/&amp;#39;,DJANGO_SETTINGS_MODULE=&amp;#39;settings&amp;#39;,NEW_RELIC_CONFIG_FILE=/opt/apps/awesome_home/awesome_app/conf/newrelic.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that you have the new configuration setup, you will need to let supervisord know that you have changed t he configuration for that app. If you run the update command it will prompt supervisord to reread the configuration file for that app, and reload the config, and then restart the application with the new configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;supervisorctl update
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another thing that is important to note here, is the fact that New Relic currently doesn't work well with Gunicorn in gevent mode. If you try to use gevent with gunicorn and new relic, it may not start up at all, or just not work as it should. Here is what they say in the &lt;a class="reference external" href="http://newrelic.com/docs/python/status-of-python-agent"&gt;Known Issues&lt;/a&gt; section of their docs.&lt;/p&gt;
&lt;blockquote&gt;
Gunicorn gevent mode - When using gevent mode of gunicorn and the 'newrelic-admin run-program' command is used to wrap the invocation of gunicorn, the hosted web application can fail in strange ways. One way this is manifesting is with requests blocking for a period of 1 minute.
The cause of the problem is believed in this case to specifically relate to the order in which module imports are occuring. The monkey patching performed by gevent is not working properly for the case where the Python threading module is imported before the gevent monkey patching routine is run.&lt;/blockquote&gt;
&lt;p&gt;Because of this, I have changed my gunicorn's to use eventlet when using new relic, and that seems to work fine. I normally prefer to use gevent, so hopefully they will be able to fix the issue with gevent so I can revert back to that setup.&lt;/p&gt;
&lt;p&gt;All and all I have been pretty happy with new relic, it has helped us find issues with our code that would have been a pain otherwise. There support has been awesome, and they have been adding new fixes/ improvements all the time. Can't wait to see what else they have in store for the future. I would try it out if you can, they have a lite version that is free which even includes server monitoring.&lt;/p&gt;
</summary><category term="django"></category><category term="supervisor"></category><category term="gunicorn"></category><category term="newrelic"></category></entry><entry><title>What are the best python companies to work for?</title><link href="http://kencochrane.net/blog/2011/12/what-are-the-best-python-companies-to-work-for/" rel="alternate"></link><updated>2011-12-30T14:08:16-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-12-30:blog/2011/12/what-are-the-best-python-companies-to-work-for/</id><summary type="html">&lt;p&gt;I was looking at the pycon US 2012 website when I stumbled upon the huge list of &lt;a class="reference external" href="https://us.pycon.org/2012/sponsors/"&gt;sponsors&lt;/a&gt;, which is really impressive. It got me thinking. Are all of these companies using python? If so, which ones are the best companies to work for?&lt;/p&gt;
&lt;p&gt;If it was up to you, and location and money wasn't a factor, what company would you work for and why? If you already work at one of these companies, can you share what it is you use python for, and what it is like working there?&lt;/p&gt;
&lt;p&gt;Here is a list of companies that use Python, in no particular order (most of these are pycon US 2012 sponsors). If I missed a company, please let me know.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;DropBox&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;surveymonkey&lt;/li&gt;
&lt;li&gt;nebula&lt;/li&gt;
&lt;li&gt;nasuni&lt;/li&gt;
&lt;li&gt;microsoft&lt;/li&gt;
&lt;li&gt;gondor&lt;/li&gt;
&lt;li&gt;facebook&lt;/li&gt;
&lt;li&gt;eventbrite&lt;/li&gt;
&lt;li&gt;new relic&lt;/li&gt;
&lt;li&gt;zeomega&lt;/li&gt;
&lt;li&gt;CashStar.com&lt;/li&gt;
&lt;li&gt;linode&lt;/li&gt;
&lt;li&gt;dotcloud&lt;/li&gt;
&lt;li&gt;ccp games&lt;/li&gt;
&lt;li&gt;revolution systems&lt;/li&gt;
&lt;li&gt;canonical&lt;/li&gt;
&lt;li&gt;bit.ly&lt;/li&gt;
&lt;li&gt;activestate&lt;/li&gt;
&lt;li&gt;caktus group&lt;/li&gt;
&lt;li&gt;disqus&lt;/li&gt;
&lt;li&gt;leapfrog online&lt;/li&gt;
&lt;li&gt;spotify&lt;/li&gt;
&lt;li&gt;snoball&lt;/li&gt;
&lt;li&gt;evite&lt;/li&gt;
&lt;li&gt;plaidcloud&lt;/li&gt;
&lt;li&gt;mozilla&lt;/li&gt;
&lt;li&gt;lab305&lt;/li&gt;
&lt;li&gt;walt disney animation studios&lt;/li&gt;
&lt;li&gt;white oak technologies&lt;/li&gt;
&lt;li&gt;aldebaran robotics&lt;/li&gt;
&lt;li&gt;cloud foundry&lt;/li&gt;
&lt;li&gt;stratasan&lt;/li&gt;
&lt;li&gt;myyearbook.com&lt;/li&gt;
&lt;li&gt;threadless&lt;/li&gt;
&lt;li&gt;cisco&lt;/li&gt;
&lt;li&gt;kontagent&lt;/li&gt;
&lt;li&gt;toast driven&lt;/li&gt;
&lt;li&gt;accense technology&lt;/li&gt;
&lt;li&gt;net-ng&lt;/li&gt;
&lt;li&gt;truveris&lt;/li&gt;
&lt;li&gt;kelly creative tech&lt;/li&gt;
&lt;li&gt;aarki&lt;/li&gt;
&lt;li&gt;freshbooks&lt;/li&gt;
&lt;li&gt;wisertogether&lt;/li&gt;
&lt;li&gt;bitbucket&lt;/li&gt;
&lt;li&gt;eucalyptus&lt;/li&gt;
&lt;li&gt;fwix&lt;/li&gt;
&lt;li&gt;imaginary landscape&lt;/li&gt;
&lt;li&gt;cox media group&lt;/li&gt;
&lt;li&gt;openstack&lt;/li&gt;
&lt;li&gt;devsar&lt;/li&gt;
&lt;li&gt;emma&lt;/li&gt;
&lt;li&gt;shining panda&lt;/li&gt;
&lt;li&gt;vocollect&lt;/li&gt;
&lt;li&gt;bigdoor&lt;/li&gt;
&lt;li&gt;reddit&lt;/li&gt;
&lt;li&gt;dreamhost&lt;/li&gt;
&lt;li&gt;Red hat&lt;/li&gt;
&lt;li&gt;Quora&lt;/li&gt;
&lt;li&gt;Yelp&lt;/li&gt;
&lt;li&gt;mixpanel&lt;/li&gt;
&lt;li&gt;justin.tv&lt;/li&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;li&gt;Digg&lt;/li&gt;
&lt;li&gt;Urban Airship&lt;/li&gt;
&lt;li&gt;Rackspace&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Post your answers in the comment section below, and I'll update the post with the most common answers and best responses.&lt;/p&gt;
&lt;p&gt;Update 12-30-2011 6:30PM EST: Added Rackspace to the list.&lt;/p&gt;
</summary><category term="python"></category><category term="work"></category></entry><entry><title>Standardizing Python WSGI deployment</title><link href="http://kencochrane.net/blog/2011/12/standardizing-python-wsgi-deployment/" rel="alternate"></link><updated>2011-12-30T13:49:26-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-12-30:blog/2011/12/standardizing-python-wsgi-deployment/</id><summary type="html">&lt;p&gt;Over the past year I have been testing all of the new python platform as a service companies that have popped up, and I have posted my notes on my blog so that everyone can learn from my experiences.  &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;dotcloud.com&lt;/a&gt;, &lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/"&gt;Heroku&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;All and all, the platforms were very similar, they allowed you to easily host your python/django project without having to worry about managing a server or other typical system administration duties. Some of the services were more advanced and had more features then others, but since it was still early in the game, that was expected.&lt;/p&gt;
&lt;p&gt;The one thing that was different between each service was the way that you have your python project setup.  This might not seem like a big deal, but because of the little differences between providers it required me to change my test project every time I wanted to test out a new providers service. These little changes weren't a big deal for me, but it could be a barrier of entry for less technical people. It also makes it harder for someone to change services if they wanted. This probably sounds like a good idea to the platform providers because it makes it a little harder for people to leave their service, but I don't think that was their intention. Looking at the different platforms, and their implementations, you can see they all make sense, and it was just their own way of solving a problem because there was no standard available.&lt;/p&gt;
&lt;p&gt;Before I started programmed in python, I came from a Java background. In Java they have already solved the deployment problem with their WAR files. For those of you that aren't familiar with Java or WAR files, basically WAR files are just java projects that are laid out in a common directory structure, with a few required configuration files (web.xml, etc) that the application server uses when deploying the application. This directory structure is then zipped up for easy portability. All of the different Java application servers know how to read these files and deploy the applications. It makes installing applications really easy, and if you ever need to change application servers, it shouldn't require any changes at all, assuming you stuck with the standard format. &lt;a class="reference external" href="http://en.wikipedia.org/wiki/WAR_file_format_(Sun)"&gt;Java WAR files on Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was lucky enough to attend DjangoCon US 2011 in Portland Oregon this year. At the conference there was a Django Hosting Panel moderated by Sean O'Connor where the different hosting providers were asked questions about their platforms. If you didn't get a chance to see it, it is available on blip.tv here. &lt;a class="reference external" href="http://blip.tv/djangocon/django-hosting-panel-5572201"&gt;http://blip.tv/djangocon/django-hosting-panel-5572201&lt;/a&gt; &lt;em&gt;Fun Fact: That is me in the front row with the blue shirt and green hat.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;During the panel, Sean asked if there was any plans for working on interoperability between the different platforms. Andrew Godwin referenced Java's WAR format and also talked about how he has already started to talk to others about this idea at DjangoCon EU and would like to see it move forward. The others in the panel seemed to agree that something could be done, but it didn't seem like it was urgent to them, or if they really cared/wanted to do it. I can understand their reluctance, because I'm sure they have more important things to work on, and this would be very low on their list of things to do. After all whatever comes from this, is going to require changes to their platform in order to support it.&lt;/p&gt;
&lt;p&gt;That is why I think we (the developer community), need to come up with a standard, propose it to the rest o the python community, with input from the different platform providers, and then leave it up to the different providers to decide if they are going to support it or not. It would be great if everyone supported it, but because this isn't going to make anyone money in the short term, it will be hard to force anyone to do it.&lt;/p&gt;
&lt;p&gt;I'm willing to help to create the standard, but where do we start, and whom do we submit the proposal too, the PSF?&lt;/p&gt;
&lt;p&gt;I think the easiest place to start would be to look at the different platforms and find out what they have in common, and go from there. Off the top of my head, I'm pretty sure they all support virtualenv and pip for requirements. They are also all wsgi based, but I think that is where the commonality stops.&lt;/p&gt;
&lt;p&gt;For example they all have a different way for specifying application settings. ep.io has an ini file, dotcloud has a yml file, and gondor has a .gondor/config file. It shouldn't be too hard to come up with a standard format with sane attributes.&lt;/p&gt;
&lt;p&gt;We could probably all agree on a common project structure, and where to put the common files (requirements.txt for pip requirements and put it in the root of the project, etc.).&lt;/p&gt;
&lt;p&gt;Something that will be important is to make the standard solid but flexible. Since all of these platforms are a little different we will need to allow some way for them to have a custom section or file that will be platform dependent, so that they can extend the standard without breaking it. These extensions won't be supported by everyone, but it will allow the platform providers the flexibility to move forward without getting held back with a standard process which is normally a slow process.&lt;/p&gt;
&lt;p&gt;That is also why versioning is important, make sure it is obvious which version of the standard the application is using, so that it doesn't break as changes in the standard are made in the future.&lt;/p&gt;
&lt;p&gt;As you can see, with a little bit of effort I have a nice start, but where do we go from here? What do you think, is this a good idea? Do you want to help move it forward? Post some comments below, and lets continue this discussion into 2012.&lt;/p&gt;
</summary><category term="python"></category><category term="deployment"></category><category term="hosting"></category></entry><entry><title>Developers guide to Running Django Applications on Heroku</title><link href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/" rel="alternate"></link><updated>2011-11-30T10:00:00-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-11-30:blog/2011/11/developers-guide-for-running-django-apps-on-heroku/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://Heroku.com"&gt;Heroku&lt;/a&gt; the platform as a service (PAAS) company, very popular in the Ruby on Rails community, has now started opening up their platform to languages besides Ruby. They now offer support for Python, Java, Clojure, Node.js, and Scala on their new Cedar stack. Heroku's Cedar stack is still in beta, but that shouldn't stop you from trying it out, and that is just what I'm going to do.&lt;/p&gt;
&lt;p&gt;6 months ago I wrote a series of blog posts that reviewed all of the cool new django hosting services that were popping up. My goal was to look at them all, and compare them to find out what they had to offer, and to see if I could use them on my future projects. I'm going to review Heroku using the same process that I used to review those other services, so that I can we can compare apples to apples.&lt;/p&gt;
&lt;p&gt;For those of you who are not familiar with my other blog posts, feel free to check them out now &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;dotcloud.com&lt;/a&gt;, &lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those of you that are lazy, I'll sum it up pretty quickly. What I'm trying to do is pretty simple, I sign up for the service, and just looking at the documentation available, can I get my blog application up and running, and what did I have to do, in order for it to work. I'll describe each step along the way, as a helpful guide for others who might be trying to do the same with their application. If I come across an error, I will tell you what the error was, and how I fixed it, so that if you get the same error, hopefully what I did to fix my problem, will also fix yours.&lt;/p&gt;
&lt;div class="section" id="heroku-django-documentation"&gt;
&lt;h2&gt;Heroku Django Documentation&lt;/h2&gt;
&lt;p&gt;Before you start using any new platform, you should take the time to read the documentation. I know it doesn't sound like fun,but trust me, it will save you a lot of pain and frustration later on. Here are some links that I found helpful.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Quickstart guide&lt;/strong&gt;: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/quickstart"&gt;http://devcenter.heroku.com/articles/quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python articles&lt;/strong&gt;: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/python"&gt;http://devcenter.heroku.com/articles/python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django article&lt;/strong&gt;: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/django"&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dev Center&lt;/strong&gt;: &lt;a class="reference external" href="http://devcenter.heroku.com/"&gt;http://devcenter.heroku.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Heroku account&lt;/li&gt;
&lt;li&gt;Heroku command line client&lt;/li&gt;
&lt;li&gt;Python 2.7, virtualenv, pip, git&lt;/li&gt;
&lt;li&gt;Must use pip to manage dependencies with a requirements.txt file&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="signing-up-for-heroku"&gt;
&lt;h2&gt;Signing up for Heroku&lt;/h2&gt;
&lt;p&gt;Signing up was as simple as can be, all I needed to do was follow this link: &lt;a class="reference external" href="https://api.heroku.com/signup"&gt;https://api.heroku.com/signup&lt;/a&gt; and fill out my email address. Go into my email and click on the link they sent, which took me to a page that had me pick my password, and I was done. The whole process took less then 1 minute. Can't beat that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="verifying-you-heroku-account"&gt;
&lt;h2&gt;Verifying you Heroku account&lt;/h2&gt;
&lt;p&gt;When you sign up for an account, you have limited access to some features (add-ons, etc.) until you verify your account. Verifing your account is easy all you have to do is enter your credit card information. This proves to them you are real, and also allows you to use some of the paid features. I recommend that you verify your account so that you can get access to some of the nice free add-ons that are available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-the-heroku-command-line-client"&gt;
&lt;h2&gt;Installing the heroku command line client&lt;/h2&gt;
&lt;p&gt;I'm using a mac so I'm going to install the following version of the heroku command line client (toolbelt).
&lt;a class="reference external" href="http://toolbelt.herokuapp.com/osx/download"&gt;http://toolbelt.herokuapp.com/osx/download&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click on link, download the file.&lt;/li&gt;
&lt;li&gt;Find the file that was downloaded (heroku-toolbelt.pkg) and double click it.&lt;/li&gt;
&lt;li&gt;Follow prompts; enter password when prompted, and click close.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="test-heroku-command-line-client"&gt;
&lt;h2&gt;Test heroku command line client&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open terminial&lt;/li&gt;
&lt;li&gt;Type &amp;quot;heroku version&amp;quot; you should see something like this &amp;quot;heroku-gem/2.14.0&amp;quot; if so, it worked. if not, you did something wrong.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="login-to-heroku-from-command-line-client"&gt;
&lt;h2&gt;Login to heroku from command line client&lt;/h2&gt;
&lt;p&gt;Logging into the client will try to find your ssh key, and upload it to heroku for pushing code later on. If you don't have a key it will prompt you to create one. If you have more then one it will ask you which one you want to use.&lt;/p&gt;
&lt;div class="section" id="no-key-found-example"&gt;
&lt;h3&gt;No key found example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku login
Enter your Heroku credentials.
Email: adam@example.comPassword:
Could not find an existing public key.
Would you like to generate one? &lt;span class="o"&gt;[&lt;/span&gt;Yn&lt;span class="o"&gt;]&lt;/span&gt;
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="found-more-then-one-key-example"&gt;
&lt;h3&gt;Found more then one key example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku login
Enter your Heroku credentials.
Email: &amp;lt;my email&amp;gt;
Password:
Found the following SSH public keys:
1&lt;span class="o"&gt;)&lt;/span&gt; apphosted.key.pub
2&lt;span class="o"&gt;)&lt;/span&gt; id_rsa.pub
Which would you like to use with your Heroku account? 2
Uploading ssh public key /Users/ken/.ssh/id_rsa.pub
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-your-django-application-ready"&gt;
&lt;h2&gt;Getting your Django application ready&lt;/h2&gt;
&lt;p&gt;Now that you have an account and the client installed, you are ready to get started. If you are starting from scratch I recommend following the steps in this tutorial. &lt;a class="reference external" href="http://devcenter.heroku.com/articles/django"&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt; . If you are like me and already have an application that you want to install on to Heroku, keep reading.&lt;/p&gt;
&lt;p&gt;Since I already have a project, I'm going to tell you what I needed to do in order to get my blog application up and running on heroku. I followed the instructions from the heroku tutorial and went from there. Heroku depends on git, so I'm using a copy of my blog app that is hosted on github: &lt;a class="reference external" href="https://github.com/kencochrane/kencochrane_blog_heroku"&gt;https://github.com/kencochrane/kencochrane_blog_heroku&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /Users/ken/projects/github

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://kencochrane@github.com/kencochrane/kencochrane_blog_heroku.git kencochrane_heroku
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_heroku

&lt;span class="c"&gt;# making a new virtual environment using virtualenvwrapper.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv --no-site-packages --distribute kencochrane_heroku
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It should automatically activate the environment for you. If it doesn't, run this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;workon kencochrane_heroku
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that I have my virtualenv, I need to install my requirements using pip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-django-application-on-heroku"&gt;
&lt;h2&gt;Creating django application on heroku&lt;/h2&gt;
&lt;p&gt;Creating an application on heroku is easy, you just need to run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku create --stack cedar
Creating some-name-4741... &lt;span class="k"&gt;done&lt;/span&gt;, stack is cedar
http://some-name-4741.herokuapp.com/ | git@heroku.com:some-name-4741.git
Git remote heroku added
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-django-application-to-heroku"&gt;
&lt;h2&gt;Deploying django application to Heroku&lt;/h2&gt;
&lt;p&gt;Once you are ready you can deploy your django application to Heroku.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything went well, it should look something like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
Counting objects: 209, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to 4 threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;176/176&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;209/209&lt;span class="o"&gt;)&lt;/span&gt;, 271.89 KiB, &lt;span class="k"&gt;done&lt;/span&gt;.
Total 209 &lt;span class="o"&gt;(&lt;/span&gt;delta 28&lt;span class="o"&gt;)&lt;/span&gt;, reused 192 &lt;span class="o"&gt;(&lt;/span&gt;delta 23&lt;span class="o"&gt;)&lt;/span&gt;

-----&amp;gt; Heroku receiving push
-----&amp;gt; Python/Django app detected
-----&amp;gt; Preparing virtualenv version 1.6.4
       New python executable in ./bin/python
       Installing setuptools............done.
       Installing pip...............done.
-----&amp;gt; Django settings injection
       Injecting code into blog/settings.py to &lt;span class="nb"&gt;read &lt;/span&gt;from DATABASE_URL

&amp;lt;removed a lot of output that doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t need to be shown&amp;gt;

       Successfully installed South django-activitysync django-debug-toolbar django-disqus django-memcache-status django-tagging django-xmlrpc feedparser httplib2 oauth2 python-memcached python-twitter simplejson yolk docutils Pygments psycopg2 Django
       Cleaning up...
-----&amp;gt; Discovering process types
       Procfile declares types         -&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;none&lt;span class="o"&gt;)&lt;/span&gt;
       Default types &lt;span class="k"&gt;for &lt;/span&gt;Python/Django -&amp;gt; web
-----&amp;gt; Compiled slug size is 10.3MB
-----&amp;gt; Launching... &lt;span class="k"&gt;done&lt;/span&gt;, v5
       http://some-name-4741.herokuapp.com deployed to Heroku
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-application-to-heroku-failed-now-what"&gt;
&lt;h2&gt;Deploying application to Heroku failed, now what?&lt;/h2&gt;
&lt;p&gt;The very first time you push to master you will get something like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master

The authenticity of host &lt;span class="s1"&gt;&amp;#39;heroku.com (50.19.85.132)&amp;#39;&lt;/span&gt; can&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t be established.
RSA key fingerprint is 8b:48:5e:67:0e:c9:16:47:32:f2:87:0c:1f:c8:60:ad.
Are you sure you want to &lt;span class="k"&gt;continue &lt;/span&gt;connecting &lt;span class="o"&gt;(&lt;/span&gt;yes/no&lt;span class="o"&gt;)&lt;/span&gt;? yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is normal, just type 'yes', and you will never be prompted for this again.&lt;/p&gt;
&lt;div class="section" id="django-app-must-be-in-a-package-subdirectory"&gt;
&lt;h3&gt;Django app must be in a package subdirectory&lt;/h3&gt;
&lt;p&gt;If you django project isn't setup correctly, you will get an error like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
Counting objects: 199, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to 4 threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;167/167&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;199/199&lt;span class="o"&gt;)&lt;/span&gt;, 270.86 KiB, &lt;span class="k"&gt;done&lt;/span&gt;.
Total 199 &lt;span class="o"&gt;(&lt;/span&gt;delta 26&lt;span class="o"&gt;)&lt;/span&gt;, reused 192 &lt;span class="o"&gt;(&lt;/span&gt;delta 23&lt;span class="o"&gt;)&lt;/span&gt;


-----&amp;gt; Heroku receiving push
-----&amp;gt; Python app detected
 !     Django app must be in a package subdirectory
 !     Heroku push rejected, failed to compile Python app


To git@heroku.com:some-name-4741.git
 ! &lt;span class="o"&gt;[&lt;/span&gt;remote rejected&lt;span class="o"&gt;]&lt;/span&gt; master -&amp;gt; master &lt;span class="o"&gt;(&lt;/span&gt;pre-receive hook declined&lt;span class="o"&gt;)&lt;/span&gt;
error: failed to push some refs to &lt;span class="s1"&gt;&amp;#39;git@heroku.com:some-name-4741.git&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This failed, because django app must be in a package subdirectory.. So you need to change the way my django app is setup. Move all of the files under a django project directory except the .git directory and .gitignore and requirements.txt files. For an example of what this looks like, check out the project directory structure on my repo in github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-push-rejected-no-cedar-supported-app-detected"&gt;
&lt;h3&gt;Heroku push rejected, no Cedar-supported app detected&lt;/h3&gt;
&lt;p&gt;Another error you can get is this one. &amp;quot;Heroku push rejected, no Cedar-supported app detected&amp;quot;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
Counting objects: 204, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to 4 threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;171/171&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;204/204&lt;span class="o"&gt;)&lt;/span&gt;, 271.34 KiB, &lt;span class="k"&gt;done&lt;/span&gt;.
Total 204 &lt;span class="o"&gt;(&lt;/span&gt;delta 27&lt;span class="o"&gt;)&lt;/span&gt;, reused 192 &lt;span class="o"&gt;(&lt;/span&gt;delta 23&lt;span class="o"&gt;)&lt;/span&gt;

-----&amp;gt; Heroku receiving push
 !     Heroku push rejected, no Cedar-supported app detected

To git@heroku.com:cold-summer-4741.git
 ! &lt;span class="o"&gt;[&lt;/span&gt;remote rejected&lt;span class="o"&gt;]&lt;/span&gt; master -&amp;gt; master &lt;span class="o"&gt;(&lt;/span&gt;pre-receive hook declined&lt;span class="o"&gt;)&lt;/span&gt;
error: failed to push some refs to &lt;span class="s1"&gt;&amp;#39;git@heroku.com:cold-summer-4741.git&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had this error and I couldn't figure it out. After searching through all of the heroku python docs (all 2 of them), I didn't find anything, so I started doing some trial and error testing, and I finally figure out what was wrong. My django project directory was kencochrane_blog, and this had an underscore, and when I changed it to just kenblog (no more underscore), it worked. I couldn't find anything anywhere that said you can't use underscores for your django app name, so they might want to update their documentation, or possibly fix the bug. I'm not sure if this is by design or not, maybe someone can let me know.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="check-django-application-status-on-heroku"&gt;
&lt;h2&gt;Check Django application status on heroku&lt;/h2&gt;
&lt;p&gt;Now that you have pushed your application out onto Heroku how do you know if it is actually running? The Heroku client has a command called ps, which will tell you what your processes are doing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku ps

Process       State               Command
------------  ------------------  ------------------------------
web.1         crashed &lt;span class="k"&gt;for &lt;/span&gt;2m      python kenblog/manage.py runserver 0...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My django application looks like it crashed. Most likely because I didn't setup the database yet, lets look at the logs to see what is causing the problems to be sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="checking-django-application-logs-on-heroku"&gt;
&lt;h2&gt;Checking Django application logs on Heroku&lt;/h2&gt;
&lt;p&gt;The Heroku client has a nifty logs command that you can use to view the last chunk of logs for your application. It will combine all of your logs into one view, so that you don't have to have more then one log process running. You can call it directly and get an output similar to the shell command 'tail' and you can all use the '--tail' option to follow the logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku logs --tail
2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Deploy 5f194d2 by kencochrane@2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Release v7 created by kencochrane@
2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from crashed to created
2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from created to starting
2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;slugc&lt;span class="o"&gt;]&lt;/span&gt;: Slug compilation finished
2011-11-27T18:40:03+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: Starting process with &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;python kenblog/manage.py runserver 0.0.0.0:12033 --noreload&lt;span class="sb"&gt;`&lt;/span&gt;
2011-11-27T18:40:04+00:00 app&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: Unexpected error: &lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exceptions.NameError&amp;#39;&lt;/span&gt;&amp;gt;, NameError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name &amp;#39;DATABASES&amp;#39; is not defined&amp;quot;&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt;, &amp;lt;traceback object at 0x1a7b128&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
2011-11-27T18:40:05+00:00 app&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: There is no South database module &lt;span class="s1"&gt;&amp;#39;south.db.None&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;your database. Please either choose a supported database, check &lt;span class="k"&gt;for &lt;/span&gt;SOUTH_DATABASE_ADAPTER&lt;span class="o"&gt;[&lt;/span&gt;S&lt;span class="o"&gt;]&lt;/span&gt; settings, or remove South from INSTALLED_APPS.
2011-11-27T18:40:06+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from starting to crashed
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks like it is an issue with the settings file. If you wanted to take a look at the settings file to see if we can find out what is wrong you can run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# (your path will be different)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run cat kenblog/settings.py

&amp;lt;normal settings file stuff with the following added at the end.&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urlparse&lt;/span&gt;
&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uses_netloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uses_netloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.postgresql_psycopg2&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unexpected error:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is odd, not sure why this is like this since I'm seeing the DATABASES variable above. Let's check to see if the environment variables are there. (the output has been changed to protect the innocent, but you still get the picture). You can also use the command 'heroku config' if you just want to see your application configuration options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run env
Running env attached to terminal... up, run.6
&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres://blah:somethingelse@ec2-555-55-555-555.compute-1.amazonaws.com/morestuff
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;37265
&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/app
&lt;span class="nv"&gt;PYTHONUNBUFFERED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xterm
&lt;span class="nv"&gt;COLUMNS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;153

&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bin:/usr/local/bin:/usr/bin:/bin
&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/app
&lt;span class="nv"&gt;SHARED_DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres://blah:evenmorestuff@ec2-555-55-555-555.compute-1.amazonaws.com/morestuff
&lt;span class="nv"&gt;LINES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;32
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This output looks good the DATABASE_URL env variable is there, so that is OK. Looking more closely at my settings.py file I didn't have a DATABASES variable because the last time I used this project, the other hosting provider didn't require that I have one. So I have added a blank DATABASES variable, and that seems to have fixed my issue. Heroku, should make the error message a little nicer, add more notes to their documentation, or even better make their code handle the case when there is no DATABASES variable in the settings file.  I have submitted a patch to fix this, so hopefully that will get rolled out in the near future. (&lt;a class="reference external" href="https://github.com/heroku/heroku-buildpack-python/pull/8"&gt;https://github.com/heroku/heroku-buildpack-python/pull/8&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Now if we redeploy the app and look at the logs, they look much better.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku logs
2011-11-27T18:59:25+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Deploy 96be00f by kencochrane@
2011-11-27T18:59:25+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Release v8 created by kencochrane@
2011-11-27T18:59:25+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from crashed to created
2011-11-27T18:59:26+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from created to starting
2011-11-27T18:59:26+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;slugc&lt;span class="o"&gt;]&lt;/span&gt;: Slug compilation finished
2011-11-27T18:59:31+00:00 app&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: 0 errors found
2011-11-27T18:59:31+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from starting to up
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-django-management-commands-on-heroku"&gt;
&lt;h2&gt;Running django management commands on Heroku&lt;/h2&gt;
&lt;p&gt;Running django management commands are easy you just need to run the following command and replace &amp;lt;command&amp;gt; with the management command you want to run. There are a few examples below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run python kenblog/manage.py &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="running-django-shell-on-heroku"&gt;
&lt;h3&gt;Running django shell on Heroku&lt;/h3&gt;
&lt;p&gt;If you need to use the interactive python shell with django, you still can, you just need to run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run python kenblog/manage.py shell
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="syncing-django-database-on-heroku"&gt;
&lt;h3&gt;Syncing Django Database on Heroku&lt;/h3&gt;
&lt;p&gt;Now that our application is starting like it should let's sync the db.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run python kenblog/manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-django-south-migrations-on-heroku"&gt;
&lt;h3&gt;Running Django South Migrations on Heroku&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run python kenblog/manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets look at our processes now&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku ps
Process       State               Command
------------  ------------------  ------------------------------
run.5         &lt;span class="nb"&gt;complete &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;21m    cat kenblog/settings.py
run.6         &lt;span class="nb"&gt;complete &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;18m    env
run.7         &lt;span class="nb"&gt;complete &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;1m     python kenblog/manage.py syncdb
run.8         &lt;span class="nb"&gt;complete &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;1m     python kenblog/manage.py migrate
web.1         up &lt;span class="k"&gt;for &lt;/span&gt;4m           python kenblog/manage.py runserver..
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things are looking better, we are up, and it also shows our old commands that we ran.&lt;/p&gt;
&lt;p&gt;if you need to work with the processes you have the following options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ps:dynos &lt;span class="o"&gt;[&lt;/span&gt;QTY&lt;span class="o"&gt;]&lt;/span&gt;                 &lt;span class="c"&gt;# scale to QTY web processes&lt;/span&gt;
ps:restart &lt;span class="o"&gt;[&lt;/span&gt;PROCESS&lt;span class="o"&gt;]&lt;/span&gt;           &lt;span class="c"&gt;# restart an app process&lt;/span&gt;
ps:scale &lt;span class="nv"&gt;PROCESS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;AMOUNT1 ...  &lt;span class="c"&gt;# scale processes by the given amount&lt;/span&gt;
ps:stop PROCESS                &lt;span class="c"&gt;# stop an app process&lt;/span&gt;
ps:workers &lt;span class="o"&gt;[&lt;/span&gt;QTY&lt;span class="o"&gt;]&lt;/span&gt;               &lt;span class="c"&gt;# scale to QTY background processes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="opening-your-django-application-in-a-web-browser"&gt;
&lt;h2&gt;Opening your django application in a web browser&lt;/h2&gt;
&lt;p&gt;If you run this command it will open a web browser and hopefully your site is running as it should&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku open
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-django-and-gunicorn-on-heroku"&gt;
&lt;h2&gt;Running django and gunicorn on heroku&lt;/h2&gt;
&lt;p&gt;By default heroku deploys with the built in django runserver, which isn't recommended for production. If you are playing around it is ok, but once you get past that, the first thing you should do is switch to something better like guincorn. Switching is quick and painless, and you will be glad that you did.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add gunicorn==0.13.4 to your requirements file.&lt;/li&gt;
&lt;li&gt;create a new file called Procfile at the same level as your requirements.txt file with the following in it.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;web: python kenblog/manage.py run_gunicorn -b &lt;span class="s2"&gt;&amp;quot;0.0.0.0:$PORT&amp;quot;&lt;/span&gt; -w 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add gunicorn to the installed_apps in settings.py&lt;/p&gt;
&lt;p&gt;then&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -am &lt;span class="s2"&gt;&amp;quot;use gunicorn&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at your logs you will see it up and running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku logs
2011-11-27T21:06:24+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;slugc&lt;span class="o"&gt;]&lt;/span&gt;: Slug compilation started
2011-11-27T21:06:32+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Deploy 7b2eec1 by kencochrane@
2011-11-27T21:06:32+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Release v8 created by kencochrane@
2011-11-27T21:06:32+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from created to starting
2011-11-27T21:06:35+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: Starting process with &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;python kenblog/manage.py run_gunicorn -b &lt;span class="s2"&gt;&amp;quot;0.0.0.0:4075&amp;quot;&lt;/span&gt; -w 3&lt;span class="sb"&gt;`&lt;/span&gt;
2011-11-27T21:06:36+00:00 app&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: Validating models...
2011-11-27T21:06:37+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from starting to up
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-django-celery-background-tasks-on-heroku"&gt;
&lt;h2&gt;Running django/celery background tasks on Heroku&lt;/h2&gt;
&lt;p&gt;Heroku offers you two types of processes, a web process and a worker process. Web processes are used for serving web pages, etc. Worker processes are used for items that run in the background. The heroku tutorial goes over how to setup background task using celery and kombu (&lt;a class="reference external" href="http://devcenter.heroku.com/articles/django"&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt;) if you want more info I would check that out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="serving-django-static-media-on-heroku"&gt;
&lt;h2&gt;Serving Django Static media on Heroku&lt;/h2&gt;
&lt;p&gt;I'm not sure how to serve up static media on heroku, to get my app working I just used the built in &amp;quot;django.views.static.serve&amp;quot; views for now, this isn't ideal and you would want a more permanent solution. A more long term solution would be to push all static media into Amazon s3 and then use Amazon cloudfront to serve everything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uploading-files-to-heroku-with-django"&gt;
&lt;h2&gt;Uploading files to Heroku with Django&lt;/h2&gt;
&lt;p&gt;Heroku allows you to upload files to their app's &amp;quot;Emphemeral Filesystem&amp;quot;: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/dyno-isolation#ephemeral_filesystem"&gt;http://devcenter.heroku.com/articles/dyno-isolation#ephemeral_filesystem&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Which the app can use as a temporary scratchpad, but no files it writes are visible to any other &amp;quot;Each dyno gets its own ephemeral filesystem, with a fresh copy of the most recently deployed code. During its lifetime the dyno can use the filesystem as a temporary scratchpad, but no files it writes are visible to any other dyno (including other dynos in the application) and any files written will be discarded the moment the dyno is stopped or restarted.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This means you can't use this space to store uploaded files, but it should allow you to upload it there for a minute, and then send it over to Amazon S3 for a more permant storage solution. You could use a tool like Django Queued storage for this: &lt;a class="reference external" href="https://github.com/jezdez/django-queued-storage"&gt;https://github.com/jezdez/django-queued-storage&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="databases"&gt;
&lt;h2&gt;Databases&lt;/h2&gt;
&lt;p&gt;Heroku gives each app a 5MB shared postgresql database for FREE. If you pay $15/month you get upgraded to 20GB of space. They also offer dedicated database instances if you need that. See this page for more details. &lt;a class="reference external" href="http://www.heroku.com/pricing#0-0"&gt;http://www.heroku.com/pricing#0-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They also have a bunch of other addons (redis, mongodb, couchdb, amazon RDS) that you should be able to tie into, see the addons page for a complete list. &lt;a class="reference external" href="http://addons.heroku.com/"&gt;http://addons.heroku.com/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-django-caching-on-herku"&gt;
&lt;h2&gt;Setting up Django Caching on Herku&lt;/h2&gt;
&lt;p&gt;To use memcache on Heroku, I went to the add-on page and installed the free memcache addon. Once I did this I can run the heroku config command to find out my config settings. I then use that information in my django settings file so that I can have access to caching in my app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku config
...
&lt;span class="nv"&gt;MEMCACHE_PASSWORD&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; xxxxxxxxxxxx
&lt;span class="nv"&gt;MEMCACHE_SERVERS&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; instance.hostname.net
&lt;span class="nv"&gt;MEMCACHE_USERNAME&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; xxxxxxxxxxxx
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They also offer redis if you prefer that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-email-from-django-on-heroku"&gt;
&lt;h2&gt;Sending Email from django on Heroku&lt;/h2&gt;
&lt;p&gt;If you need to send or receive email in your application there are a few email add-ons that you can use. Pick the one you want and then run the 'heroku config' command described above to get your settings, and update your django settings accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-size"&gt;
&lt;h2&gt;Application size&lt;/h2&gt;
&lt;p&gt;You application and all of it's dependencies can't be more then 100MB in size.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-pricing"&gt;
&lt;h2&gt;Heroku Pricing&lt;/h2&gt;
&lt;p&gt;Directly from this page: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/how-much-does-a-dyno-cost"&gt;http://devcenter.heroku.com/articles/how-much-does-a-dyno-cost&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dynos cost $0.05 per hour, prorated to the second. For example, an app with four dynos is charged $0.20 per hour for each hour that the four dynos are running.&lt;/p&gt;
&lt;p&gt;Pricing is based on calendar time. If you set your app to four dynos, you will be charged $0.20 per hour regardless of the traffic your site serves during that time.&lt;/p&gt;
&lt;p&gt;Each application receives 750 free dyno hours per month. For example if you have 1 web dyno running for all of April, and a worker dyno running half the time you would have 330 dyno-hours billed that month or $16.50 (720 web dyno hours + 360 worker dyno hours - 750 free dyno hours).&lt;/p&gt;
&lt;p&gt;See this page for more details: &lt;a class="reference external" href="http://www.heroku.com/pricing#0-0"&gt;http://www.heroku.com/pricing#0-0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I haven't really had much time to really play with Heroku, and stress test it at all, but I have to say it is pretty impressive to begin with. There are still some rough edges, but I'm sure they will have those smoothed out before they remove the beta tag. The thing that impresses me the most is all of the addons that you have access to out of the box. I'm not sure how many of these work with the new platform, or with django right now, but I'm sure it is only a matter of time before they are available.&lt;/p&gt;
&lt;p&gt;I would highly recommend signing up and trying out their service, it is free so what do you have to lose?&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to Heroku. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="heroku"></category><category term="hosting"></category><category term="deployment"></category><category term="paas"></category></entry><entry><title>DjangoMaine.com - Django User group in Portland Maine</title><link href="http://kencochrane.net/blog/2011/09/djangomainecom-django-user-group-portland-maine/" rel="alternate"></link><updated>2011-09-26T22:04:10-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-09-26:blog/2011/09/djangomainecom-django-user-group-portland-maine/</id><summary type="html">&lt;p&gt;When I was at DjangoCon a few weeks ago, it was great hanging out with all of the fellow Djangonauts talking about Django and all of other great technologies. Now that I'm home, I have decided to get off my butt and do something I should have done a while ago.&lt;/p&gt;
&lt;p&gt;Without further ado, I am pleased to announce the creation of DjangoMaine.com, a new Django user group based in Portland Maine. We plan on meeting monthly to discuss Django and other python related technologies. We are currently looking for members, and topic ideas for future meetings. If you have any ideas or you are interesting in hearing more, check out our website &lt;a class="reference external" href="http:///www.DjangoMaine.com"&gt;http:///www.DjangoMaine.com&lt;/a&gt;&lt;/p&gt;
</summary><category term="django"></category><category term="django-maine"></category><category term="python"></category></entry><entry><title>I'll never work for a big company again</title><link href="http://kencochrane.net/blog/2011/08/ill-never-work-for-a-big-company-again/" rel="alternate"></link><updated>2011-08-31T22:28:30-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-08-31:blog/2011/08/ill-never-work-for-a-big-company-again/</id><summary type="html">&lt;p&gt;I recently had my 3 year anniversary at &lt;a class="reference external" href="http://CashStar.com"&gt;CashStar&lt;/a&gt;, and it got me thinking about how fast the last 3 years have gone. When I first started at CashStar there were only a handful of people, and we had nothing, and it was great. We had no products, no customers, which might sound bad at first, but we also didn't have any customer, or production support issues to slow us down. We could go into work and put in 8 really productive hours, and feel good about yourself when you left that day.&lt;/p&gt;
&lt;p&gt;Over time, we built our products and signed customers, and slowly over time the company grew to the size we are today, which is around 50 people. I'm no where as productive as I was when we started, I'm lucky if I can sit at my desk for an hour a day. If I need to get anything done I normally do it at night or on the weekend, which means I end up working a ton of hours in order to get the same productivity level I had when we first started.&lt;/p&gt;
&lt;p&gt;The funny thing is, even with all of these distractions, I'm still much more productive then I ever was when I worked for a big company. Working for a big company felt like I was walking, working for a startup makes you feel like you are running in comparison.&lt;/p&gt;
&lt;p&gt;In my past I have worked for companies that had 10,000, 2,500 and 800 people respectively. Even though they are very different in size, they all felt like a big company. The more I think about it, the more I realize that I don't think I could ever work for a big company again. Working for a big company has a different feel to it, and you normally have to worry about office politics and other things that you don't have to worry about in a small company.  It can be very painful at times when you want to get something done at a big company and you can't.&lt;/p&gt;
&lt;p&gt;I have worked at a few big companies and I have worked with people at other big companies for a while, and one thing I noticed a while ago, is that there are some really smart people working at big companies and there are also some dumb people who work at big companies. You don't see many dumb people at small companies, mainly because there is no place to hide. In a small company you need to carry your own weight, and if you don't it is pretty obvious. In a large company it isn't as obvious to find the slacker.&lt;/p&gt;
&lt;p&gt;I always wondered why the big companies hired the dumb people, and i think I came up with a theory. Basically it boils down to this. When you are a small company you don't have that much work, so you can get by with less people. When you have less people to hire, you want to make sure you get the best of the best, the top 1%. So you wait until great people come along, and you hire those.&lt;/p&gt;
&lt;p&gt;So you only hire great people, and things are going well, and the company grows. Eventually you will get to the point where you now have all the great people in the local area working at your company. You have a choice to make, you can either lower your standards a little or you can start importing people from other areas, which will cost more money. If you are really successful you can afford to import great talent from all over. Most likely you can't do that, so you lower your standards a little, and you keep growing. As your company gets bigger and bigger eventually you have lowered your standards enough where the occasional dummy will sneak in, and once one dummy gets in, it is all over.&lt;/p&gt;
&lt;p&gt;The other side of the coin is that as you get bigger, the company needs to add structure and process to control all of the less then great people, which makes it less fun for the great people, who start to leave the company. Most companies don't mind at this point because all of the products that the great people have built are already finished, so they just need to be maintained, and they can do that with cheaper (not as smart or experienced) people. The managers in charge of these products look like heros because they saved some money on their budget due to the lower salaries, and they get promoted. It is just a matter of time before the company slows to a crawl and stops being productive.&lt;/p&gt;
&lt;p&gt;Now of course what I'm saying is a little over dramatic, and not all big companies are like this, but there is some truth to what I'm saying, and if you ever worked at a big company or with a big company, you know what I'm talking about.  I'm not saying that only dummies work in big companies, because if that were true those companies would go out of business very quickly. I know a lot of really smart people who work at big companies, and they are happy.&lt;/p&gt;
&lt;p&gt;Now that I say I would never want to work for a big company again, I guess there would need to be a handful of exceptions to the rule. Here is my list of big companies I might want to work for and my reasons. Of course I reserve the right to change my mind if the right company comes along, with the right opportunity.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amazon.com"&gt;Amazon&lt;/a&gt; - They aren't just an e-commerce company, they are actually a technology company as well. They have built their own products (kindle) and have their own services (AWS). They are innovators and trend setters and that sounds like a cool company to work for.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://netflix.com"&gt;Netflix&lt;/a&gt; - They revolutionized the movie rental market, and are now the leaders in streaming movies. They handle something around &lt;a class="reference external" href="http://www.worldtvpc.com/blog/netflix-traffic-overtakes-web-surfers/"&gt;30% of all internet traffic&lt;/a&gt; on a given night, which is unreal. I have also heard they also have &lt;a class="reference external" href="http://www.slideshare.net/reed2001/culture-1798664?src=embed"&gt;great benefits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://apple.com"&gt;Apple&lt;/a&gt; - Probably the best product company in the last 100 years. They make cool stuff, that everyone loves. I'm sure they work you hard to get everything perfect, but to be able to say I helped built that new gizmo that someone was using, would be priceless.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://espn.com"&gt;ESPN&lt;/a&gt; - I love sports, I love everything about them, working at ESPN would be a dream job.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://rackspace.com"&gt;RackSpace&lt;/a&gt; - Even though they are hosting company, they are a trend setting hosting company and they are building products as well. They are driving force behind OpenStack, and they have some really cool cloud server products as well. The whole company looks like it would be fun to work at.&lt;/p&gt;
&lt;p&gt;I'm sure there are a few more companies that I missed, if I remember I will be sure to update this post. Leave a comment with the big company you wouldn't mind working for, and why, and see if you can convince me to add it to my list.&lt;/p&gt;
</summary><category term="work"></category><category term="startup"></category></entry><entry><title>django-clickstream</title><link href="http://kencochrane.net/blog/2011/08/django-clickstream/" rel="alternate"></link><updated>2011-08-12T10:48:29-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-08-12:blog/2011/08/django-clickstream/</id><summary type="html">&lt;p&gt;Track a visitors movements across your site.&lt;/p&gt;
&lt;p&gt;Possible uses:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;See what they were doing before they got an error.&lt;/li&gt;
&lt;li&gt;Use it for analytics and usability testing to see how people are moving around your site, and where you are losing people.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inspired by OpenSymphony's Java project of the same name. &lt;a class="reference external" href="http://code.google.com/p/clickstream/"&gt;http://code.google.com/p/clickstream/&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django 1.1 or newer&lt;/li&gt;
&lt;li&gt;Django sessions need to be enabled&lt;/li&gt;
&lt;li&gt;Django south 0.7 or newer for migrations&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="settings"&gt;
&lt;h3&gt;Settings&lt;/h3&gt;
&lt;div class="section" id="custom-settings"&gt;
&lt;h4&gt;Custom Settings&lt;/h4&gt;
&lt;p&gt;Add the following properties to your settings file if you want to override the default settings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clickstream-ignore-paths"&gt;
&lt;h4&gt;CLICKSTREAM_IGNORE_PATHS&lt;/h4&gt;
&lt;p&gt;Default = ()&lt;/p&gt;
&lt;p&gt;Takes a list of regular expressions for paths that you want to ignore if it is picked up by these clicks won't be tracked.&lt;/p&gt;
&lt;p&gt;CLICKSTREAM_IGNORE_PATHS = ('^/private/', '^/dont-track-me/', 'super-secret.txt')&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clickstream-ignore-anonymous"&gt;
&lt;h4&gt;CLICKSTREAM_IGNORE_ANONYMOUS&lt;/h4&gt;
&lt;p&gt;Default = False&lt;/p&gt;
&lt;p&gt;If you only want to track people that are logged in, change to True&lt;/p&gt;
&lt;p&gt;CLICKSTREAM_IGNORE_ANONYMOUS = False&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clickstream-ignore-ip"&gt;
&lt;h4&gt;CLICKSTREAM_IGNORE_IP&lt;/h4&gt;
&lt;p&gt;Default = ()&lt;/p&gt;
&lt;p&gt;A list of IP's that you don't want to track&lt;/p&gt;
&lt;p&gt;CLICKSTREAM_IGNORE_IP = ('127.0.0.1', '10.10.10.10, '8.8.8.8')&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="middleware"&gt;
&lt;h4&gt;Middleware&lt;/h4&gt;
&lt;p&gt;Add 'clickstream.middleware.ClickStreamMiddleware' to your MIDDLEWARE_CLASSES settings
it needs to be after 'django.contrib.sessions.middleware.SessionMiddleware' in the list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="app"&gt;
&lt;h4&gt;App&lt;/h4&gt;
&lt;p&gt;Add clickstream to INSTALLED_APPS&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sync-tables-migrate"&gt;
&lt;h4&gt;Sync Tables + Migrate&lt;/h4&gt;
&lt;p&gt;Run './manage.py syncdb' to load up the tables in your database.&lt;/p&gt;
&lt;p&gt;Run './manage.py migrate' to run the south migrations&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="clickstream"></category></entry><entry><title>Setting up Django with Green Unicorn, nginx, supervisord and fabric on CentOS 5.5</title><link href="http://kencochrane.net/blog/2011/06/django-gunicorn-nginx-supervisord-fabric-centos55/" rel="alternate"></link><updated>2011-06-27T06:48:18-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-06-27:blog/2011/06/django-gunicorn-nginx-supervisord-fabric-centos55/</id><summary type="html">&lt;p&gt;When I first started working with django I deployed my apps using apache and mod_python. Then after a little while I started playing with nginx and switched my setup so that nginx was serving the static content and reverse proxied requests back to apache and mod_python. Not too long after that, I switched out mod_python with mod_wsgi and ran mod_wsgi in daemon mode.&lt;/p&gt;
&lt;p&gt;This setup worked well for a while, but one thing I never really liked was the fact that I needed to run apache which is pretty heavy even when you strip out all the unused modules. Apache is great, but all I was really using it for was a router between nginx and mod_wsgi, I wasn't using any of the other features in apache.&lt;/p&gt;
&lt;p&gt;I looked at fastcgi and uswgi and they looked good, but for one reason or another I never made the jump. Recently I have been hearing a lot of good things about green unicorn, so I decided to check it out. When I first looked at it, it was fairly new and because of this a little concerned with stability, so I kept and eye on it and watched it mature.&lt;/p&gt;
&lt;p&gt;While I was waiting for green unicorn to mature I ended up doing a lot of research on the &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;new python hosting services&lt;/a&gt; that recently hit the market. Three out of the five services that I looked were using green unicorn, the other two were using uWSGI.&lt;/p&gt;
&lt;p&gt;The fact that these three services are basing there new businesses on green unicorn gave it a lot of credibility. Not too long after that I started playing with green unicorn to see what it would take to get my sites up and running.&lt;/p&gt;
&lt;p&gt;The first thing that I noticed was that I didn't need to create a wsgi file if I used their gunicorn_django command, which was pretty sweet. The fact that they built it into the service shows you that django is a first class citizen.&lt;/p&gt;
&lt;p&gt;The second thing that I noticed was that I needed a way to start up green unicorn and keep it running, something that apache does for you with mod_wsgi. I did a little bit of research and found out that supervisord would work perfectly for what I needed to do with green unicorn.&lt;/p&gt;
&lt;p&gt;Because seeing is better then reading, I'll guide you throw the steps that you will need to do in order to get your system setup in a way that will make using green unicorn very easy, especially if you want to run more then one website on your server. I'm going to use a 256MB rackspace cloud instance running centos 5.5.&lt;/p&gt;
&lt;div class="section" id="create-a-rackspace-cloud-server"&gt;
&lt;h2&gt;Create a rackspace cloud server&lt;/h2&gt;
&lt;p&gt;Go into the rackspace cloud server management website and allocate yourself a new 256MB CentOS 5.5 server or if you prefer do the same thing using their API. Now that you have a server and the root password, follow along step by step to get you system all setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-and-versions"&gt;
&lt;h2&gt;Software and versions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RackSpace Cloud Server 256MB&lt;/li&gt;
&lt;li&gt;CentOS 5.5&lt;/li&gt;
&lt;li&gt;Python 2.6.6&lt;/li&gt;
&lt;li&gt;nginx 1.0.4&lt;/li&gt;
&lt;li&gt;supervisord 3.0a10&lt;/li&gt;
&lt;li&gt;virtualenv 1.6.1&lt;/li&gt;
&lt;li&gt;pip 1.0.1&lt;/li&gt;
&lt;li&gt;gunicorn 0.12.2&lt;/li&gt;
&lt;li&gt;fabric 1.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bitbucket-project"&gt;
&lt;h2&gt;Bitbucket project&lt;/h2&gt;
&lt;p&gt;To make things easier I have created a django bootstrap project directory with all of the file used in the blog post. It is located here, so feel free to clone and fork.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bitbucket.org/kencochrane/django-gunicorn-nginx-supervisord-bootstrap/"&gt;https://bitbucket.org/kencochrane/django-gunicorn-nginx-supervisord-bootstrap/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="login-to-server"&gt;
&lt;h2&gt;Login to server&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh root@&amp;lt;RackSpaceIP&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update-packages"&gt;
&lt;h2&gt;Update packages&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum -y update
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-packages"&gt;
&lt;h2&gt;Install packages&lt;/h2&gt;
&lt;p&gt;You might not need all of these right now, but I normally need these down the line, so doing them all now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum -y install emacs readline-devel ncurses-devel libevent-devel glib2-devel libjpeg-devel freetype-devel bzip2 bzip2-devel bzip2-libs openssl-devel pcre pcre-devel gpg make gcc yum-utils unzip
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-a-django-user-as-a-system-user"&gt;
&lt;h2&gt;Add a django user as a system user&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;useradd -d /opt/django -m -r django
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="set-password-for-django-to-what-ever-you-want"&gt;
&lt;h2&gt;Set password for django to what ever you want&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;passwd django
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-directories"&gt;
&lt;h2&gt;Setup directories&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /opt/django
mkdir -p /opt/django/apps
mkdir -p /opt/django/logs
mkdir -p /opt/django/logs/nginx
mkdir -p /opt/django/logs/apps
mkdir -p /opt/django/configs
mkdir -p /opt/django/scripts
mkdir -p /opt/django/htdocs
mkdir -p /opt/django/tmp
mkdir -p /opt/django/configs/nginx
mkdir -p /opt/django/configs/supervisord
mkdir -p /opt/django/apps/my_app
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-blank-html-page"&gt;
&lt;h2&gt;Add blank html page&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;nothing here&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; &amp;quot;&lt;/span&gt; &amp;gt; /opt/django/htdocs/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-zlib"&gt;
&lt;h2&gt;Install Zlib&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# download from zlib.net&lt;/span&gt;
mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
wget http://www.zlib.net/zlib-1.2.5.tar.gz
tar -xvzf zlib-1.2.5.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;zlib-1.2.5
./configure -s
make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-python-2-6-6"&gt;
&lt;h2&gt;Install python 2.6.6&lt;/h2&gt;
&lt;p&gt;CentOS 5.5 doesn't come with python2.6 pre installed so we need to do that on our own.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
wget http://www.python.org/ftp/python/2.6.6/Python-2.6.6.tgz
tar -xvzf Python-2.6.6.tgz
&lt;span class="nb"&gt;cd &lt;/span&gt;Python-2.6.6
./configure --enable-shared
make
make altinstall
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-the-following-to-etc-profile"&gt;
&lt;h2&gt;Add the following to /etc/profile&lt;/h2&gt;
&lt;p&gt;We need to add the lib path to the LD_LIBRARY_PATH or else you will get an error saying it can't find libpython2.6.so.1.0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LD_LIBRARY_PATH&lt;/span&gt;:/usr/local/lib/:/usr/local/lib64/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="source-the-new-profile"&gt;
&lt;h2&gt;Source the new profile&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source&lt;/span&gt; /etc/profile
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-distribute"&gt;
&lt;h2&gt;Install distribute&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
curl -O http://python-distribute.org/distribute_setup.py
python2.6 distribute_setup.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-pip-virtualenv"&gt;
&lt;h2&gt;Install Pip &amp;amp; virtualenv&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
curl -O -k https://raw.github.com/pypa/pip/master/contrib/get-pip.py
python2.6 get-pip.py
pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-supervisor"&gt;
&lt;h2&gt;Install supervisor&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install supervisor
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-mercurial"&gt;
&lt;h2&gt;Install mercurial&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install mercurial
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-nginx"&gt;
&lt;h2&gt;Install NGINX&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
wget http://nginx.org/download/nginx-1.0.4.tar.gz
tar -xzvf nginx-1.0.4.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;nginx-1.0.4
./configure --sbin-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/sbin --with-http_ssl_module --with-http_stub_status_module
make
/etc/init.d/nginx stop
sleep 2
sudo make install
sudo chmod +x /usr/local/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="install-my-app"&gt;
&lt;h3&gt;Install my app&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-first-virtualenv"&gt;
&lt;h2&gt;Add first virtualenv&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/django/apps/my_app/
virtualenv --distribute --no-site-packages v0.1

&lt;span class="c"&gt;# make this a post_create hook?&lt;/span&gt;
touch /opt/django/apps/my_app/v0.1/.venv

&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/django/apps/my_app/v0.1/
hg clone https://bitbucket.org/kencochrane/django-gunicorn-nginx-supervisord-bootstrap my_app

ln -s /opt/django/apps/my_app/v0.1 /opt/django/apps/my_app/current

ln -s /opt/django/apps/my_app/current/my_app/conf/nginx.conf /opt/django/configs/nginx/myapp.conf

ln -s /opt/django/apps/my_app/current/my_app/conf/supervisord.conf /opt/django/configs/supervisord/myapp.conf

&lt;span class="c"&gt;# activate the ve&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; /opt/django/apps/my_app/current/bin/activate
&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/django/apps/my_app/current/my_app/
./bootstrap.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-nginx"&gt;
&lt;h2&gt;Configure nginx&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# as root&lt;/span&gt;
mkdir -p /etc/nginx
ln -s /opt/django/apps/my_app/current/my_app/server/etc/nginx.conf /etc/nginx/nginx.conf
ln -s /usr/local/nginx/conf/mime.types /etc/nginx/mime.types
ln -s /opt/django/apps/my_app/current/my_app/server/init.d/nginx /etc/init.d/nginx
chmod 755 /etc/init.d/nginx
chkconfig --add nginx
chkconfig nginx on
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-supervisord"&gt;
&lt;h2&gt;Configure Supervisord&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# as root&lt;/span&gt;
ln -s /opt/django/apps/my_app/current/my_app/server/etc/supervisord.conf  /etc/supervisord.conf
ln -s /opt/django/apps/my_app/current/my_app/server/init.d/supervisord /etc/init.d/supervisord
chmod 755 /etc/init.d/supervisord
chkconfig --add supervisord
chkconfig supervisord on
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="firewall"&gt;
&lt;h2&gt;Firewall&lt;/h2&gt;
&lt;p&gt;We need to open up the firewall so that we are allowed connection, if you don't know anything about this, check out these links.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://cloudservers.rackspacecloud.com/index.php/Firewalls"&gt;http://cloudservers.rackspacecloud.com/index.php/Firewalls&lt;/a&gt;
&lt;a class="reference external" href="http://cloudservers.rackspacecloud.com/index.php/Introduction_to_iptables"&gt;http://cloudservers.rackspacecloud.com/index.php/Introduction_to_iptables&lt;/a&gt;
&lt;a class="reference external" href="http://cloudservers.rackspacecloud.com/index.php/Sample_iptables_ruleset"&gt;http://cloudservers.rackspacecloud.com/index.php/Sample_iptables_ruleset&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Open http port 80&lt;/span&gt;
iptables -I RH-Firewall-1-INPUT -p tcp --dport 80 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bashrc-file-changes"&gt;
&lt;h2&gt;.bashrc file changes&lt;/h2&gt;
&lt;p&gt;I can't remember where I saw this little trick, if you know please let me know so that I can give them credit. If you put a file in your mercurial directory called .venv, when you cd into the directory this little bash hack will automatically activate your virtual environment for you. This allows you to have something similar to virtualenvwrapper in this custom setup.&lt;/p&gt;
&lt;p&gt;Add this code to the .bashrc file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;emacs /opt/django/.bashrc
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# User specific aliases and functions&lt;/span&gt;
has_virtualenv&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -e .venv &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;deactivate &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
        &lt;span class="nb"&gt;source &lt;/span&gt;bin/activate
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

venv_cd &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; has_virtualenv
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;alias cd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;venv_cd&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#end of changes&lt;/span&gt;

&lt;span class="c"&gt;# source the file to get new changes in active shell&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; /opt/django/.bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="change-permissions-of-the-django-home-directory-to-django"&gt;
&lt;h2&gt;Change permissions of the django home directory to django&lt;/h2&gt;
&lt;p&gt;This cleans up and left over root ownership&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chown -R django:django /opt/django/*
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="switch-to-django-user"&gt;
&lt;h2&gt;Switch to django user&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;su - django
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="start-up-nginx"&gt;
&lt;h2&gt;Start up nginx&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service nginx start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="startup-supervisord"&gt;
&lt;h2&gt;Startup supervisord&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service supervisord start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="test-nginx-and-supervisord"&gt;
&lt;h2&gt;Test Nginx and supervisord&lt;/h2&gt;
&lt;p&gt;Check supervisord status&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;supervisorctl status
my_app                           RUNNING    pid 13594, uptime 0:00:05
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To check nginx go to the IP or domain name for your rackspace server in your browser and make sure it worked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-the-application-using-fabric"&gt;
&lt;h2&gt;Updating the application using fabric&lt;/h2&gt;
&lt;p&gt;Inside of the bitbucket project directory there is a file called fabfile.py. This file will allow you to update the application from your machine whenever you want just by calling one command.&lt;/p&gt;
&lt;p&gt;It will prompt you for your hostname and password for the django user. Then it will go out to the rackspace server and pull and update the app and restart the application in supervisord. It is very basic for right now, but should get you started if you want to do more advanced stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fab update_server
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now that we have everything setup, if you want to add a new application to our setup all we need to do is.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create a new directory under apps&lt;/li&gt;
&lt;li&gt;create the virtualenv&lt;/li&gt;
&lt;li&gt;run the bootstrap to install the software&lt;/li&gt;
&lt;li&gt;make sure that the application has a supervisord and nginx configuration file&lt;/li&gt;
&lt;li&gt;symlink those files to the correct locations in the config directory&lt;/li&gt;
&lt;li&gt;run any python management commands you might need to run (syncdb, migrate, etc)&lt;/li&gt;
&lt;li&gt;reload supervisord and nginx&lt;/li&gt;
&lt;li&gt;you should be good to go.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope this was helpful to someone besides myself, if it was helpful for you please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="deployment"></category><category term="gunicorn"></category><category term="supervisord"></category><category term="fabric"></category><category term="centos5"></category><category term="nginx"></category><category term="linux"></category></entry><entry><title>Django Hosting Roundup: (Ep.io vs Gondor.io vs DotCloud vs Heroku vs AppHosted vs DjangoZoom) Who wins?</title><link href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/" rel="alternate"></link><updated>2011-06-06T22:03:59-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-06-06:blog/2011/06/django-hosting-roundup-who-wins/</id><summary type="html">&lt;div class="section" id="updates"&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Updated 2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments below.&lt;/li&gt;
&lt;li&gt;Updated 1/26/2012: Updated Gondor.io with info from Donald Stufft.&lt;/li&gt;
&lt;li&gt;Updated 01/24/2012: changed gondor.io to include SSL support&lt;/li&gt;
&lt;li&gt;Updated 01/01/2012: Added Heroku and updated ep.io, gondor.io, and dotcloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;For the past 6 weeks I have been trying out all of the new django/python hosting services that are currently available today, and I have been writing about my experiences along the way. It only makes sense to conclude this series of articles with one last article comparing all of the services against each other. It is important to note that many of these services are still in development and aren't even available to the general public, so I'll try to keep this article up to date as these services change over time. With that said, don't take my word for it, go out and try all of these services on your own and find out which one you like the best, you won't be disappointed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quick-recap"&gt;
&lt;h2&gt;Quick Recap&lt;/h2&gt;
&lt;div class="section" id="ep-io"&gt;
&lt;h3&gt;ep.io&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;My Experiences with ep.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pretty solid offering, with a nice set of features and a decent price. Good set of documentation.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: Epio closed down on May 31st 2012 ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gondor-io"&gt;
&lt;h3&gt;gondor.io&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;My day in gondor.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Their website has a nice list of features that they expect to have once they officially launch, but most of those features aren't available yet. The documentation is a little light, but the service has a lot of potential.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dotcloud-com"&gt;
&lt;h3&gt;dotCloud.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;Deploying my Django application to dotcloud.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They have a ton of money ($10M), and with it, a ton of features. They are very developer friendly, but you need to be pretty technical, it isn't quite ready for beginners. Good set of documentation.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Full disclosure&lt;/strong&gt;: I now work for dotCloud]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apphosted-com"&gt;
&lt;h3&gt;AppHosted.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com Django Hosting Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built with security, stability and scalability on their mind from the beginning. They have a solid offering, and they look to be targeting enterprise customers who will pay more for that peace of mind.  They are currently lacking some key features, which I'm sure they will be adding soon.  Good set of documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="djangozoom-com"&gt;
&lt;h3&gt;DjangoZoom.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/djangozoom-com-review/"&gt;DjangoZoom.com Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built to be fast and easy to use, still missing some key features, but I'm sure they will be available by the time they go live. Decent amount of documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-com"&gt;
&lt;h3&gt;Heroku.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/"&gt;Developers guide for running django apps on Heroku&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Originally built as a Ruby on Rails service, they have now added support for python. The service is still in beta, but it has a lot of potential. It looks a lot like what dotCloud is offering, with the ability to run code from almost any language, and a ton of different add-ons for lots of different services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="awards"&gt;
&lt;h2&gt;Awards&lt;/h2&gt;
&lt;div class="section" id="fastest-deployments"&gt;
&lt;h3&gt;Fastest Deployments:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt; - Zoom is right, it doesn't take long to configure your application and have it up and running on their servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easiest-to-use"&gt;
&lt;h3&gt;Easiest To Use:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt; - No command line interface needed, just a web browser, a project in a git repo that it has access too, and a few questions answered and your app is up and running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-features"&gt;
&lt;h3&gt;Most Features:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dotcloud.com"&gt;dotCloud.com&lt;/a&gt; - They raised $10 Million, and they are spending it on hiring people, buying companies, and building services. They have a bunch of services currently and they don't plan on stopping, their roadmap has everything on it, and I think if you give them enough time they will eventually have a service for everything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-developer-friendly"&gt;
&lt;h3&gt;Most Developer Friendly:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dotcloud.com"&gt;dotCloud.com&lt;/a&gt; - They give lots of features without handcuffing the developer. They are the only company with full database and shell access. They do a good job of offering the same type of service a developer could get if they built it themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="best-overall-value"&gt;
&lt;h3&gt;Best Overall Value:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt; - This one is hard since most of the services don't have any pricing listed, but currently ep.io is in the lead, they offer reasonable prices with a nice Free tier. This allows developers to try out the service for FREE, as well as run smaller pet projects that they might not have tried before because they didn't want to pay for hosting. They have the second most features available, second to only dotCloud, and there service is pretty solid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easiest-project-setup"&gt;
&lt;h3&gt;Easiest Project Setup:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://apphosted.com"&gt;apphosted.com&lt;/a&gt; - Their goal was to make it real easy to get your project up onto their servers without having to change your project, and they did that, there was very little if any changes I needed to make in order to get my application up on their servers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="django-feature-hosting-matrix"&gt;
&lt;h2&gt;Django Feature Hosting Matrix&lt;/h2&gt;
&lt;p&gt;To make things easier when comparing all of the different services I have built this matrix with all of the information I compiled from each of the services. I don't know the answers for all services, but I'll update it when I find out those answers. If you know the answers feel free to post a comment to let me know.&lt;/p&gt;
&lt;p&gt;I have included all of the new django services as well as google app engine and webfaction.com, a tradition hosting service. This should make it a little easier to see how these new services compare to other hosting options.&lt;/p&gt;
&lt;iframe width='775' height='500' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0AtuyQoTrXCavdDdyQ1RCX29FcDhQeDgzMXp0NGpGeWc&amp;single=true&amp;gid=0&amp;output=html&amp;widget=true'&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="who-wins"&gt;
&lt;h2&gt;Who wins?&lt;/h2&gt;
&lt;p&gt;It is really hard to pick just one winner,  mainly because most of these services are still in beta and not quite finished yet. Also because each service is a little different, and it will depend on what you are trying to do. So, go out try them out, and let me know which one you picked.&lt;/p&gt;
&lt;p&gt;The real winner is us, the developers, and the python community in general. We now have a bunch of really cool services that will make our lives better, and that is awesome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you"&gt;
&lt;h2&gt;Thank you!&lt;/h2&gt;
&lt;p&gt;I want to thank all of the people who made these services, and gave me early access to their systems so that I could play around with them. I wish them the best of luck, and hope they all are really successful, and they are around for a long time.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="hosting"></category><category term="apphosted"></category><category term="python"></category><category term="deployment"></category><category term="dotcloud"></category><category term="epio"></category><category term="gondor"></category><category term="djangozoom"></category><category term="heroku"></category><category term="paas"></category></entry><entry><title>DjangoZoom.com Review</title><link href="http://kencochrane.net/blog/2011/06/djangozoom-com-review/" rel="alternate"></link><updated>2011-06-05T11:17:11-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-06-05:blog/2011/06/djangozoom-com-review/</id><summary type="html">&lt;p&gt;This is part five in my series on django hosting services. Previously, I looked at &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;dotcloud.com&lt;/a&gt; and now I'm looking at &lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;DjangoZoom.com is the brain child of Nate Aune and Shimon Rura and is based in Boston, Massachusetts. It was founded in 2010 at &lt;a class="reference external" href="http://startupweekend.org/"&gt;StartupWeekend Boston&lt;/a&gt; and was a finalist in the &lt;a class="reference external" href="http://www.masschallenge.org/"&gt;MassChallenge&lt;/a&gt;. Their office is in the &lt;a class="reference external" href="http://dogpatchlabs.com/"&gt;Dogpatch Labs&lt;/a&gt; space for startups in Cambridge, Massachusetts. They are currently still in a closed beta, but they were nice enough to send me an invite to check it out.&lt;/p&gt;
&lt;p&gt;Normally when I check out a service for the first time, I look over the documentation to see what it can do, and what it can't do, and what I need to do in order to get my app up and running. DjangoZoom has a nice collection of documents that help guide you through the process of getting your application up and running on their platform. You need to be logged in, in order to read the documents, so I won't be able to link to any documents here, but if you are lucky enough to get an invite to DjangoZoom, I would check out the documents first, they will make the process much easier. They answer most of the common questions that you will have, and if you can't find your answer you can send them a message and they are very fast to respond.&lt;/p&gt;
&lt;p&gt;After reading the documents I learned a few things. First off, DjangoZoom is a little different then the other services, all of the previous services that I have reviewed ep.io, dotcloud, apphosted, gondor.io, had a command line client that you use to push your application up onto their servers.&lt;/p&gt;
&lt;p&gt;DjangoZoom doesn't have a command line client at all, they only have a web based control panel that you use to install and configure your application. Also, instead of pushing your application code up on to their servers, they pull the code down from your code repository at build time. Most of the other services try and make it so that you can run any python/wsgi based application, where as DjangoZoom, is only supporting Django applications.&lt;/p&gt;
&lt;p&gt;Not having a command line client has it's pros and cons. The main advantage of not having a command line client is simplicity. No need to install anything on your machine in order to deploy your code, all you need is a web browser. You can deploy your code from anywhere you have an internet connection. Making the application deployment as easy as possible will open up their service to people that are less technical, and might not be comfortable installing a command line client and running commands. The disadvantages of using just a web based console is that you are limited to what you can do in a browser. This is going to be less and less of an issue going forward as web browsers are getting more and more powerful all of the time. Also, just because they only offer a web based console now, doesn't mean they can't add a command line client later.&lt;/p&gt;
&lt;p&gt;Just like all of the other reviews I'm going to test out the system by deploying my blog onto their system and see how it goes.  My blog is currently hosted on bitbucket.org which uses mercurial, and currently djangozoom.com only offers support for git. In order to use djangozoom.com I needed to make a fork of my blog and put it on github. You can find my fork here: &lt;a class="reference external" href="https://github.com/kencochrane/kencochrane_blog"&gt;https://github.com/kencochrane/kencochrane_blog&lt;/a&gt; . They recommend github for git hosting, but you can use just about any git repo that is publicly accessible. If you have a private git repo, and you are on github just add the user djangozoom as a collaborator on your project. If you aren't on github and you have a private repo, you can add their public key to your repo, and it will give them permission to access your git repository from their servers.&lt;/p&gt;
&lt;div class="section" id="install-process"&gt;
&lt;h2&gt;Install Process&lt;/h2&gt;
&lt;p&gt;Once I had my code up on github I needed to make a few changes in order for it to work correctly, nothing major just needed to make my settings.py file a little more standard, which was pretty typical for the other services as well. Now that I had that done, I was ready to login to DjangoZoom and setup my application. Registering and logging into DjangoZoom was pretty straight forward, it was the same process as most online services, so just about anyone could do it with their eyes closed.&lt;/p&gt;
&lt;p&gt;After I logged in, I was able to add my application, here are the steps that I took to get my application up and running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clicked on &amp;quot;add a new project&amp;quot;&lt;/p&gt;
&lt;p&gt;Put in repo url: git://github.com/kencochrane/kencochrane_blog.git&lt;/p&gt;
&lt;p&gt;(Only SSH authentication is supported, so use either an unauthenticated public URL, or an SSH url (e.g. &lt;a class="reference external" href="mailto:git&amp;#64;github.com"&gt;git&amp;#64;github.com&lt;/a&gt;:yourname/project.git.   On github.org, use the Git Read-Only URL if your repo is public, or the SSH URL if private.)&lt;/p&gt;
&lt;p&gt;Hit Next.&lt;/p&gt;
&lt;p&gt;Entered my title &amp;quot;kencochrane_blog&amp;quot;&lt;/p&gt;
&lt;p&gt;selected django 1.3&lt;/p&gt;
&lt;p&gt;settings module : mysite.settings&lt;/p&gt;
&lt;p&gt;static media location : &amp;quot;static /site-media&amp;quot;&lt;/p&gt;
&lt;p&gt;no additional directories to add to python path&lt;/p&gt;
&lt;p&gt;put in my requirements.txt file, so that it knows where to find my pip requirements. You don't need to do this, djangozoom will scan your projects and find this out for you, but it didn't work for me, I have an issue with my application that I wasn't able to find, and it was causing issues with their autoscanner. I think this is more my fault then theirs.&lt;/p&gt;
&lt;p&gt;not putting in any extra requirements.&lt;/p&gt;
&lt;p&gt;base(repo) python package: put mysite.settings because my settings.py and root urls.py are at the top level of your repository. normally I don't do this, but I was following the example of this repo &lt;a class="reference external" href="https://github.com/natea/mezzanine-site"&gt;https://github.com/natea/mezzanine-site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Checked the &amp;quot;ready to roll, deploy my project now&amp;quot; check box and hit next&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first I had some errors with my requirements, I needed to remove django and mysql and update the python-twitter lib. Once I did that, it worked like a charm. The whole deploy process only took 2 minutes and 45 seconds.&lt;/p&gt;
&lt;p&gt;Wow that was fast, pretty impressive considering it needed to pull down all of the code from github, and download a ton of dependencies, and then do what ever it needs to do to set it up on to their servers. After talking with them about this, they said they hope to get it even faster, which would be pretty impressive.&lt;/p&gt;
&lt;p&gt;Now that I have my app deployed I can change some of the settings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I created an alias to for my app to &lt;a class="reference external" href="http://kencochrane.djangozoom.net"&gt;http://kencochrane.djangozoom.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also add a hostname like kencochrane.net.&lt;/p&gt;
&lt;p&gt;you can add a wildcard hostname as well. *.kencochrane.net.&lt;/p&gt;
&lt;p&gt;You can create a django superuser.&lt;/p&gt;
&lt;p&gt;You can also run any of your manage.py commands right from the web console.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This whole process was pretty straight forward and didn't take long to complete. Now that I have done it with one application, it will be much easier for the next one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cool-feature-request"&gt;
&lt;h2&gt;Cool Feature Request&lt;/h2&gt;
&lt;p&gt;Currently DjangoZoom makes it really easy to deploy your application to their servers. What would be cool is if they would make it easy to deploy common django applications to their service. For example on their blog they have a video to show how easy it is to &lt;a class="reference external" href="http://djangozoom.com/blog/2011/03/15/deploying-django-cms-45-seconds-djangozoom/"&gt;deploy django-cms to DjangoZoom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the video it shows them going out to github, forking and copying the link to the project, and then making some minor changes on the djangozoom settings page to get it to work correctly, and then it deploys. These steps weren't complicated but you needed to know what to do in order to get it to work. What if they made this a one step process?&lt;/p&gt;
&lt;p&gt;Click on a &amp;quot;install django-cms&amp;quot; link, and then their service would do what it needs to do to get it up and running on their service, and then returns you to a page where you can configure the app, add a django admin user, change the url, etc. That would allow someone who doesn't know anything about django an easy way to get a django-cms based website in no time. They could add one click installs for all kinds of common django projects, and expand outside of the developer community, which would expand their customer base. Those customers are the ones that really don't want to worry about server deploys and server management, and they are the ones that will pay more for those features.&lt;/p&gt;
&lt;p&gt;I'm sure this feature isn't on their roadmap, but I just thought I would throw it out there and see what people have to say about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="djangozoom-com-status"&gt;
&lt;h2&gt;DjangoZoom.com status&lt;/h2&gt;
&lt;p&gt;DjangoZoom is still in closed beta, which means they are not done with it yet, and there may be some occasional bugs that pop up here and there, but that is expected. Another thing about a beta is that not all of the features are finished yet. So before you jump in and try and get your application up and running, check and make sure that your application can run correctly on the service with the features they have available so far. Here is a run down of all the different features your application might need and where they stand in DjangoZoom today.&lt;/p&gt;
&lt;div class="section" id="logging"&gt;
&lt;h3&gt;Logging&lt;/h3&gt;
&lt;p&gt;You currently can't view your django or nginx logs at this time, they are working on this feature and hope to have it so that you can view your logs in the web based console in the future. In the meantime you can use a tool like django-sentry to view your django-logs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h3&gt;SSL&lt;/h3&gt;
&lt;p&gt;Not available yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="caching"&gt;
&lt;h3&gt;Caching&lt;/h3&gt;
&lt;p&gt;They currently don't support a caching server, they want to make sure they set it up correctly so that it is reliable and so that it is secure. In the meantime you can use django local memory caching.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;p&gt;They support PostgreSQL 8.4, if you are using mysql you will need to convert your app to support PostgreSQL. Since the Django ORM handles this by default, this shouldn't be a big deal unless you did something custom. No direct database access available. Loading data into system only supported by using django dumpdata/loaddata&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background-tasks"&gt;
&lt;h3&gt;Background tasks&lt;/h3&gt;
&lt;p&gt;Not available yet, celery support possible in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cronjobs"&gt;
&lt;h3&gt;Cronjobs&lt;/h3&gt;
&lt;p&gt;Not supported, they recommend &lt;a class="reference external" href="http://packages.python.org/APScheduler/"&gt;Advanced Python Scheduler&lt;/a&gt; or  &lt;a class="reference external" href="https://github.com/reavis/django-cron"&gt;django-cron&lt;/a&gt; which should run on their system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-access"&gt;
&lt;h3&gt;Shell Access&lt;/h3&gt;
&lt;p&gt;Not supported&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;p&gt;Not available yet, one planned for the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line-client"&gt;
&lt;h3&gt;Command line client&lt;/h3&gt;
&lt;p&gt;Not available yet, one planned for the future. Use the web base control panel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control"&gt;
&lt;h3&gt;Version control&lt;/h3&gt;
&lt;p&gt;Currently only supports git.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="videos"&gt;
&lt;h3&gt;Videos&lt;/h3&gt;
&lt;p&gt;Here are some videos of the DjangoZoom.com deployment process.&lt;/p&gt;
&lt;p&gt;&lt;iframe title="YouTube video player" width="480" height="390" src="http://www.youtube.com/embed/NCQxqw94Cgs" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;&lt;iframe title="YouTube video player" src="http://www.youtube.com/embed/DSe6R1ByS5k" width="480" frameborder="0" height="390"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I really enjoyed playing with DjangoZoom, it is quick and easy to use, it is still missing some key features that some people will need, but I'm sure they will add those soon enough. I wish them luck, and I can't wait to see them go live to the general public.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update:&lt;/h2&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to DjangoZoom. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="deployment"></category><category term="hosting"></category><category term="djangozoom"></category><category term="paas"></category></entry><entry><title>AppHosted.com Django Hosting Service Review</title><link href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/" rel="alternate"></link><updated>2011-05-18T12:17:48-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-05-18:blog/2011/05/apphosted-com-django-hosting-review/</id><summary type="html">&lt;p&gt;This post is the fourth in my series about the new Django hosting services that just recently hit the market. Previously I have reviewed &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt; , &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt; , and &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;dotCloud.com&lt;/a&gt; .This post reviews &lt;a class="reference external" href="http://AppHosted.com"&gt;AppHosted.com&lt;/a&gt; , another similar service that is currently in beta. I was lucky enough to get a sneak peak of this service before it was released to the general public, and here are my notes and impressions for the short time I had to play with the new service.&lt;/p&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://AppHosted.com"&gt;AppHosted.com&lt;/a&gt; uses a similar concept as the other django hosting services, they provide you with a command line client called metro that you use to interact with the service. Like the other command line clients, it is pretty much just a nice wrapper around their API, so anything you can do with the metro client you can do with their API. The client is used to configure your service and push your files up into their servers. Once the application is created and your code has been uploaded to their server, you can use their web based control panel to configure or manage your application.&lt;/p&gt;
&lt;p&gt;So that we can compare apples to apples I will go through the process of installing my blog onto the service so that we can see how it works with apphosted compared to the other services. It will also hopefully provide a very simple how to guide on how to install your application onto AppHosted.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-steps"&gt;
&lt;h2&gt;First Steps&lt;/h2&gt;
&lt;p&gt;Like all new projects the first thing that I like to do is create a new project directory and a new virtual environment for the project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# move into my projects directory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~projects/

&lt;span class="c"&gt;# make my virtual environment apphosted&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv apphosted

&lt;span class="c"&gt;# clone my blog&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;hg clone https://bitbucket.org/kencochrane/kencochranenet kencochrane_apphosted

&lt;span class="c"&gt;# move into the new project directory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_apphosted
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that I have a local working copy of my blog code and a new virtual environment I'm ready to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line-interface"&gt;
&lt;h2&gt;Command Line Interface&lt;/h2&gt;
&lt;p&gt;AppHosted has a command line client called Metro, it uses this client to configure and upload your application onto the apphosted servers. Metro only has three dependencies: httplib2, paramiko, and pycrypto, if you don't have them installed pip should handle that for you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# install the metro client&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install metroclient

Downloading/unpacking metroclient
Running setup.py egg_info &lt;span class="k"&gt;for &lt;/span&gt;package metroclient
Requirement already satisfied &lt;span class="o"&gt;(&lt;/span&gt;use --upgrade to upgrade&lt;span class="o"&gt;)&lt;/span&gt;: httplib2 in /Users/ken/.virtualenvs/apphosted/lib/python2.6/site-packages &lt;span class="o"&gt;(&lt;/span&gt;from metroclient&lt;span class="o"&gt;)&lt;/span&gt;
Requirement already satisfied &lt;span class="o"&gt;(&lt;/span&gt;use --upgrade to upgrade&lt;span class="o"&gt;)&lt;/span&gt;: paramiko in /Library/Python/2.6/site-packages &lt;span class="o"&gt;(&lt;/span&gt;from metroclient&lt;span class="o"&gt;)&lt;/span&gt;
Requirement already satisfied &lt;span class="o"&gt;(&lt;/span&gt;use --upgrade to upgrade&lt;span class="o"&gt;)&lt;/span&gt;: pycrypto&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;1.9 in /Library/Python/2.6/site-packages &lt;span class="o"&gt;(&lt;/span&gt;from paramiko-&amp;gt;metroclient&lt;span class="o"&gt;)&lt;/span&gt;
Installing collected packages: metroclient
Running setup.py install &lt;span class="k"&gt;for &lt;/span&gt;metroclient
changing mode of build/scripts-2.6/metro from 644 to 755
changing mode of /Users/ken/.virtualenvs/apphosted/bin/metro to 755
Successfully installed metroclient
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="initial-data-django-admin-user"&gt;
&lt;h2&gt;Initial Data &amp;amp; Django admin user&lt;/h2&gt;
&lt;p&gt;At the moment Apphosted.com doesn't provide an easy way to create a django admin user, in order to create this user in your appHosted.com database you need to create it on a local database and then export that data into a fixture called initial_data.json.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# locally I run this command to dump the data, so that I can load on app hosted.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py dumpdata &amp;gt; initial_data.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is another way to create the django admin user, which I'll describe a little later. This would also be the same way that you would import any application data that you need in order for your application to run correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="metro-client"&gt;
&lt;h2&gt;Metro Client&lt;/h2&gt;
&lt;p&gt;One of the goals for appHosted.com was that they didn't want to require that you make lots of changes to your project directory structure  in order to use their service. In order to do this they need to do a lot more work to figure out what it is you want to do, and if they can't figure it out, they will ask you some questions.&lt;/p&gt;
&lt;p&gt;Now that we have our project directory and our initial_data.json file all ready, lets go ahead and deploy the application. Activate the virtual environment and go into your project directory. Kick off the metro client and answer the questions that pop up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# run the metro client.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;metro

Metro Application Manager 1.21
Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; Lumentica,  http://www.lumentica.com

Application directory &lt;span class="o"&gt;(&lt;/span&gt;i.e. path to project&lt;span class="o"&gt;)&lt;/span&gt;: ./
Application name: kencochraneblog
Application version: 0.1
Application description: Ken&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s AppHosted Blog
Application modules &lt;span class="o"&gt;(&lt;/span&gt;extra; comma-separated&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;South&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.7.3, django-activitysync&lt;span class="o"&gt;==&lt;/span&gt;0.2.2, django-debug-toolbar&lt;span class="o"&gt;==&lt;/span&gt;0.8.4, django-disqus&lt;span class="o"&gt;==&lt;/span&gt;0.3.4, django-memcache-status&lt;span class="o"&gt;==&lt;/span&gt;1.0.1, django-tagging&lt;span class="o"&gt;==&lt;/span&gt;0.3.1, django-xmlrpc&lt;span class="o"&gt;==&lt;/span&gt;0.1.2, &lt;span class="nv"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;4.1, &lt;span class="nv"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.6.0, &lt;span class="nv"&gt;oauth2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.2.0, python-memcached&lt;span class="o"&gt;==&lt;/span&gt;1.47, python-twitter&lt;span class="o"&gt;==&lt;/span&gt;0.8.1, &lt;span class="nv"&gt;simplejson&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;2.1.2, &lt;span class="nv"&gt;wsgiref&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.1.2, &lt;span class="nv"&gt;yolk&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.4.1, &lt;span class="nv"&gt;docutils&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.6, &lt;span class="nv"&gt;Pygments&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.3.1
WSGI module &lt;span class="o"&gt;(&lt;/span&gt;optional&lt;span class="o"&gt;)&lt;/span&gt;:
Paste config &lt;span class="o"&gt;(&lt;/span&gt;optional&lt;span class="o"&gt;)&lt;/span&gt;:
Fixtures &lt;span class="o"&gt;(&lt;/span&gt;optional; comma-separated&lt;span class="o"&gt;)&lt;/span&gt;:
Sync database and load fixtures? &lt;span class="o"&gt;(&lt;/span&gt;y/n&lt;span class="o"&gt;)&lt;/span&gt;: y
Use SSL? &lt;span class="o"&gt;(&lt;/span&gt;y/n&lt;span class="o"&gt;)&lt;/span&gt;: n
Force SSL: &lt;span class="o"&gt;(&lt;/span&gt;y/n&lt;span class="o"&gt;)&lt;/span&gt;: n
Build complete.
Upload to AppHosted? &lt;span class="o"&gt;(&lt;/span&gt;y/n&lt;span class="o"&gt;)&lt;/span&gt;: y
AppHosted Username: kencochrane
AppHosted Password:
Deploying...
:: Configuring application environment...
:: Configuring application permissions...
:: Configuring application server...
:: Application deployed to server successfully...
:: Application deployment complete...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What did this do for us? It takes our application, and uploads it to their server, and then it installs all of our dependencies that we listed above. Then it configures it according to our answers, and tries to start it up, if we told it to, it will sync our database and load our fixtures. It also takes all of this information and stores it in a file called metro.config, so that we don't need to type that in every time if nothing has changed.&lt;/p&gt;
&lt;p&gt;You might have noticed that I needed to manually enter in all of my dependencies when prompted, when I asked about this, I was told that if I didn't enter all of the dependencies it would scan the project for a pip style requirements.txt file, and use that to load all of your dependencies. I haven't had a chance to test that out yet, since I already entered my requirements by hand, and once you do it, you don't need to do it again.&lt;/p&gt;
&lt;p&gt;My blog uses south for migration management, and at the time of this writing there is a bug, and it isn't correctly kicking off the migrate command during the database sync process. They are aware of the issue and they are working on a fix, but there is a work around in the meantime. I'll describe the work around shortly.&lt;/p&gt;
&lt;p&gt;Once your application is deployed it will almost immediately be available at &lt;a class="reference external" href="http:/"&gt;http:/&lt;/a&gt;/&amp;lt;your-app-name&amp;gt;.apphosted.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="log-files"&gt;
&lt;h2&gt;Log Files&lt;/h2&gt;
&lt;p&gt;In order to view the log files, you need to log into the web control panel and from there you can download the logs that you are interested in. At the moment they only support downloading the log files, which is a little inconvenient, it would be nice to have the ability to tail the logs, or see the last 50 or 100 lines in the control panel. I asked about this, and they agreed and said it is on their list of things to work on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-access"&gt;
&lt;h2&gt;Shell Access&lt;/h2&gt;
&lt;p&gt;Metro gives you the ability to shell into your application directory, so that you can kick off django management commands, and other cool things. One important thing to note is that when you login to the shell, it is a jailed shell, and you only have access to your own project, and with limited command access. This is done for security reasons. It is nice to know that your application runs in it's own jailed area, and no one else's applications can access your information.&lt;/p&gt;
&lt;p&gt;Setting up the shell access requires a few steps. Follow these directions to get the full details: &lt;a class="reference external" href="http://docs.apphosted.com/apphosted/apphosted_shell.html"&gt;http://docs.apphosted.com/apphosted/apphosted_shell.html&lt;/a&gt; , but basically it requires the following.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;create a ssh key if you don't already have one.&lt;/li&gt;
&lt;li&gt;Login to the web console and add your public key.&lt;/li&gt;
&lt;li&gt;In the web console browse over to your application Settings-&amp;gt;Tools page and click on the “Update Public Keys” button. (Don't forget about this step, or you won't be able to login.&lt;/li&gt;
&lt;li&gt;Use the metro client to open the shell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It would be real cool if we didn't have to do step 3, why can't it automatically update the public keys for all apps? I'm guessing it is a security reason. The first time, I didn't hit the update public keys button and I couldn't figure out why it wasn't working, and luckily one quick email to the support line, and they let me know what I did wrong, and I was up and running in no time.&lt;/p&gt;
&lt;p&gt;This is how you can kick off the shell, there are a bunch of command line args that you can pass as well, just do metro --help and it will show them all to you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;metro -s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: There is currently a bug that is preventing me from logging into the shell from my MacBook Pro OS X 10.6.7 using Python 2.6.1 . When I do it gives me this error. I have informed appHosted, and they said it looks like an issue with paramiko and python 2.6.1 on the Mac, not sure if it affects other python versions on other operating systems. They are working on the issue.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;metro -s
Metro Application Manager 1.21
Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; Lumentica,  http://www.lumentica.com

Application name: kencochraneblog
AppHosted Username: kencochrane
AppHosted Password:
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
File &lt;span class="s2"&gt;&amp;quot;/Users/ken/.virtualenvs/apphosted/bin/metro&amp;quot;&lt;/span&gt;, line 75, in run_shell
ssh.connect&lt;span class="o"&gt;(&lt;/span&gt;host, &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app_name, &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;port&lt;span class="o"&gt;)&lt;/span&gt;
File &lt;span class="s2"&gt;&amp;quot;/Library/Python/2.6/site-packages/paramiko/client.py&amp;quot;&lt;/span&gt;, line 278, in connect
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;family, socktype, proto, canonname, sockaddr&lt;span class="o"&gt;)&lt;/span&gt; in socket.getaddrinfo&lt;span class="o"&gt;(&lt;/span&gt;hostname, port, socket.AF_UNSPEC, socket.SOCK_STREAM&lt;span class="o"&gt;)&lt;/span&gt;:
gaierror: &lt;span class="o"&gt;[&lt;/span&gt;Errno 8&lt;span class="o"&gt;]&lt;/span&gt; nodename nor servname provided, or not known
Error: &lt;span class="o"&gt;[&lt;/span&gt;Errno 8&lt;span class="o"&gt;]&lt;/span&gt; nodename nor servname provided, or not known
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="work-arounds"&gt;
&lt;h2&gt;Work Arounds&lt;/h2&gt;
&lt;p&gt;Now that you know how to shell into your application, you can also kick off django management commands. I mentioned earlier that there was another way to create the django admin user, well here is how you do it. Login to the metro shell and then kick off the createsuperuser django management command. Logging into the shell and finding things isn't easy do to the added security so to save you some trouble this is what I did. Python isn't in your path so you need to put the fully qualified path to the virtual env's python. Not sure if the jailed shell allows you to edit your .profile if so, it might be nice to configure this so that you don't always have to do the full path.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create superuser (django admin)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;/ve/kencochraneblog/bin/python /app/kencochraneblog/mysite/manage.py createsuperuser

&lt;span class="c"&gt;# kicking off south migrations by hand.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;/ve/kencochraneblog/bin/python /app/kencochraneblog/mysite/manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My application's name is kencochraneblog, so make sure you replace my application name with yours, it should be something like this. replace app_name,django_project_dir and command with your variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;/ve/&amp;lt;app_name&amp;gt;/bin/python /app/&amp;lt;app_name&amp;gt;/&amp;lt;django_project_dir&amp;gt;/manage.py &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="background-tasks"&gt;
&lt;h2&gt;Background Tasks&lt;/h2&gt;
&lt;p&gt;AppHosted also supports background tasks via celery, they don't have the documentation created yet, but it should be available soon. They are also planning on supporting a cron like service, not sure if it will be cron, or something similar, but it should do, what you need it to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;p&gt;AppHosted provides a pretty nice API that allows you to do anything that the metro client does. This will allow you to write your own automation and management scripts to interact with your application. If you practice continuous deployment, it will allow you to automatically deploy the latest version of code on a post commit hook, if all of your tests pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h2&gt;Services&lt;/h2&gt;
&lt;p&gt;Right now they only support memcache for caching, and PostgreSQL for databases, but they plan on adding more services as they move forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I have been playing with AppHosted for a few weeks now, and I'm pretty happy with what they have so far. They still have a few issues to work out and they are still a work in progress, but I have been seeing improvements all of the time, so it will only be a matter of time before they are ready for the general public. Every time I came across an issue, they were quick to reply to my emails and solve my issues, or tell me where I was going wrong.  If you have any more questions I recommend checking out their documentation &amp;#64; &lt;a class="reference external" href="http://docs.apphosted.com/index.html"&gt;http://docs.apphosted.com/index.html&lt;/a&gt; . Check them out, and make sure you let me know what you think.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;They are now open to the general public.&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update:&lt;/h3&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to apphosted. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="hosting"></category><category term="apphosted"></category><category term="python"></category><category term="deployment"></category><category term="paas"></category></entry><entry><title>Django Job Opening @ CashStar.com (Portland, ME)</title><link href="http://kencochrane.net/blog/2011/05/django-job-opening-cashstar-portland-me/" rel="alternate"></link><updated>2011-05-15T17:23:23-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-05-15:blog/2011/05/django-job-opening-cashstar-portland-me/</id><summary type="html">&lt;p&gt;I work for a company called &lt;a class="reference external" href="http://CashStar.com"&gt;CashStar&lt;/a&gt;, most people have never heard of us, but a lot of people have used our products without even knowing it. CashStar is the man behind the curtain so to speak. We created an e-gift card platform that is used by some of the largest companies in the United States. Here is a short list of some of our customers: The Home Depot, Gap, Old Navy, Banana Republic, Staples, Coach, Starbucks, CVS, Chilis, Regal Cinemas, Pottery Barn, The CheeseCake Factory, Dell, Pizza Hut, and many more. To see the full list follow this link: &lt;a class="reference external" href="http://www.cashstar.com/all-egift-card-clients/"&gt;http://www.cashstar.com/all-egift-card-clients/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another thing that most people don't know is that we power that platform using the awesome python framework called &lt;a class="reference external" href="http://DjangoProject.com"&gt;Django&lt;/a&gt;. Using Python and Django, our small engineering team in Portland, Maine has taken our startup which didn't exist 3 years ago and turned it into a leader in the electronic gift card market. Due to this phenomenal growth, we need to expand our engineering team. We are currently looking for developers as well as QA folks to join our team. You will need to work on site in Portland Maine, and be legally allowed to work in the United States.&lt;/p&gt;
&lt;p&gt;If you are interested in joining a fun, fast paced startup, please send the following to &lt;a class="reference external" href="mailto:kencochrane&amp;#64;gmail.com"&gt;kencochrane&amp;#64;gmail.com&lt;/a&gt; with the subject line &amp;quot;CashStar.com Engineering Openings&amp;quot;. Failure to follow these simple directions will automatically disqualify you from these positions.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Resume&lt;/li&gt;
&lt;li&gt;Links to any projects you worked on recently&lt;/li&gt;
&lt;li&gt;Links to your github, bitbucket, stackoverflow, etc. accounts&lt;/li&gt;
&lt;li&gt;Availability (when you could start)&lt;/li&gt;
&lt;li&gt;How and when is best to contact you.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="more-about-cashstar-com"&gt;
&lt;h2&gt;More about CashStar.com:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;All engineers receive a top of the line MacBook Pro and a 24&amp;quot; monitor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Our technology stack:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Celery&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Mercurial&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;gunicorn&lt;/li&gt;
&lt;li&gt;memcached&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;li&gt;virtualenv + pip&lt;/li&gt;
&lt;li&gt;Selenium&lt;/li&gt;
&lt;li&gt;Hudson&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We have a fully stocked kitchen with all kinds of snacks and all of the soda and coffee you can drink, and at least one free company lunch per week.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We are located in the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Old_Port"&gt;Old Port&lt;/a&gt; section of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Portland,_Maine"&gt;Portland Maine&lt;/a&gt;. If you have never visited Portland Maine before, you are missing out, it was ranked #1 on forbes.com's &lt;a class="reference external" href="http://www.forbes.com/2009/04/01/cities-city-ten-lifestyle-real-estate-livable-cities.html"&gt;America's Most Livable Cities&lt;/a&gt; in 2009, and it was also ranked &lt;a class="reference external" href="http://www.bonappetit.com/magazine/2009/10/americas_foodiest_small_town_2009"&gt;America's Foodiest Small Town&lt;/a&gt; by Bon Appetit Magazine in 2009. Located right on the coast, and only a 90 minute drive to Boston, it is a great place to live and an even better place to raise a family.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;CashStar is privately held and has received venture funds from a multi-billion dollar global investment firm.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any questions feel free to contact me&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;email&lt;/strong&gt;: &lt;a class="reference external" href="mailto:KenCochrane&amp;#64;gmail.com"&gt;KenCochrane&amp;#64;gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;twitter&lt;/strong&gt;: &amp;#64;KenCochrane&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;linkedin&lt;/strong&gt;: &lt;a class="reference external" href="http://www.linkedin.com/in/kencochrane"&gt;http://www.linkedin.com/in/kencochrane&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="cashstar"></category><category term="jobs"></category><category term="django"></category><category term="python"></category></entry><entry><title>Deploying my Django application to dotCloud</title><link href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/" rel="alternate"></link><updated>2011-04-26T07:07:55-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-04-26:blog/2011/04/deploying-my-django-application-to-dotcloud/</id><summary type="html">&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;
&lt;p class="last"&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/"&gt;Deploying my Django application to dotCloud Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have recently wrote about &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt; and &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, two new python/django hosting services that are currently in beta. Another new service that has just recently hit the scene and is causing a lot of waves is &lt;a class="reference external" href="http://dotcloud.com"&gt;DotCloud.com&lt;/a&gt;. DotCloud is a little different for a number of reasons. Their service isn't targeting any one technology stack like ep.io and gondor.io with Python/Django/wsgi.&lt;/p&gt;
&lt;p&gt;DotCloud's goal is to provide a bunch of different independent services that you can use as building blocks to build your application. If you need a database, take your pick from one of the many they support. Need an application that uses Django or Rails on the front end, and Java in the backend, that is fine, you can do that too. They realize that most developers don't stick to one standard technology stack for all of their applications, so this allows you the flexibility to use the best tool for the job. It also gives you a nice playground to try out new services and see how they run without having to install, configure and maintain the service just for testing.&lt;/p&gt;
&lt;p&gt;DotCloud was part of the Y Combinator summer class of 2010, and they just recently &lt;a class="reference external" href="http://techcrunch.com/2011/03/22/paas-dotcloud-raises-10m-from-jerry-yang-benchmark-and-others/"&gt;raised $10 Million&lt;/a&gt;. With access to that much money, I'm guessing they will be hiring a bunch of people pretty quickly, and I'm sure we will be seeing their services expand as well.&lt;/p&gt;
&lt;p&gt;Like all new technologies, I want to play with them, and see if they live up to all of the hype. I was lucky enough to get a beta invite a few weeks ago, and I have been playing with it since. I decided that the best way to test it out would be to deploy my blog, and see how hard it would be. Here are the steps that I took to get my django based blog up and running on DotCloud. I ran into a few issues and I made sure that I put those in as well, so that if you get the same issue you can see how I solved it.&lt;/p&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Before I get started with any new service the first thing I usually do is look at the documentation. DotCloud has a nice list of documents along with some tutorials on how to get started. These 3 documents were the ones that I used the most.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/django/"&gt;http://docs.dotcloud.com/tutorials/django/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/components/mysql/"&gt;http://docs.dotcloud.com/components/mysql/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/firststeps/"&gt;http://docs.dotcloud.com/tutorials/firststeps/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-steps"&gt;
&lt;h2&gt;First Steps:&lt;/h2&gt;
&lt;p&gt;Like all cool services these days, dotcloud uses a python based CLI, so before we can get started we need to install the dotcloud client and configure it so that we can start using it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# create my dotcloud virtual environment.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv dotcloud

&lt;span class="c"&gt;# install dotcloud client using pip&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install dotcloud

&lt;span class="c"&gt;# create our application namespace called kencochrane&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud create kencochrane

&lt;span class="c"&gt;#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted&lt;/span&gt;
&lt;span class="c"&gt;#&amp;lt;key goes here&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the client all setup, and an application namespace, now we can start building our service. I have forked my blog repository on bitbucket so that I could make dotcloud specific changes to it and not effect my original repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# go into projects directory&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects

&lt;span class="c"&gt;# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally&lt;/span&gt;
hg clone https://bitbucket.org/kencochrane/kencochranenet_dotcloud kencochrane_dotcloud

&lt;span class="c"&gt;# go into the new directory.&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading through the documentation tells me that I need to create a wsgi.py file and put in the root of my project. Using &lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/django/#djangowsgipy"&gt;http://docs.dotcloud.com/tutorials/django/#djangowsgipy&lt;/a&gt; as a template, I created my wsgi.py file below. I had issues with the default template and I needed to add a directory to the sys.path so that wsgi could find my django apps correctly. Here is my finished file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c"&gt;# Ken added this, only thing that is different from the example template (not counting settings file name)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysite.settings&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt;
&lt;span class="n"&gt;djangoapplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;djangoapplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DotCloud uses &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/#requirements-files"&gt;PIP requirements files&lt;/a&gt; to manage your project dependencies. We already have our pip requirements file where it needs to be and named correctly so we don't need to do anything, but if we didn't have one, we would need to create one and put it in the root, and call it requirements.txt&lt;/p&gt;
&lt;p&gt;DotCloud requires that we put all of our static media in a directory called 'static' in the root of our project.  Because my static media is already found elsewhere, I need to create a directory called static and move all of my files into it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# we need to create a static directory to serve static media from (/static) .&lt;/span&gt;
mkdir -p static
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you use the django admin then you will need to create a postinstall script that will create a symlink under static for your django admin media files. Here is what mine looks like. If you use this as a template, don't forget to change the DJANGO_SETTINGS_MODULE variable to match your project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="c"&gt;# To import anything under django.*, we must set this variable.&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysite.settings&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Import the admin module. The media directory is right under it!&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.admin&lt;/span&gt;
&lt;span class="c"&gt;# Retrieve the absolute path of the admin module.&lt;/span&gt;
&lt;span class="n"&gt;admindir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contrib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Add /media behind it.&lt;/span&gt;
&lt;span class="n"&gt;mediadir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admindir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Compute the path of the symlink under the static directory.&lt;/span&gt;
&lt;span class="n"&gt;staticlink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;admin_media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# If the link already exists, delete it.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;islink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staticlink&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staticlink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Install the correct link.&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mediadir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;staticlink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make the script executable.&lt;/span&gt;
chmod +x postinstall
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we changed our location of our static media, we need to remember to update our settings.py file with the new settings. Here are my changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# edit settings.py file to the following.&lt;/span&gt;
&lt;span class="n"&gt;ADMIN_MEDIA_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/admin_media/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# change MEDIA_URL&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Deployment&lt;/p&gt;
&lt;p&gt;Now that we have our application's project structure all setup and configured the way dotcloud wants it, we can start up some services and then deploy our app. If you want to find out what services they have available, you can run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# find out which services that are available.&lt;/span&gt;
dotcloud deploy -h

You can chose among the following services:
  java          host any Java servlet &lt;span class="o"&gt;(&lt;/span&gt;also Clojure, Play!, and much more&lt;span class="o"&gt;)&lt;/span&gt;
  mysql         the worlds most popular open &lt;span class="nb"&gt;source &lt;/span&gt;database
  nodejs        run JavaScript processes &lt;span class="o"&gt;(&lt;/span&gt;including web apps&lt;span class="o"&gt;)&lt;/span&gt;
  php           host any PHP web app: Drupal, WordPress...
  php-worker    run background PHP processes
  postgresql    the worlds most advanced open &lt;span class="nb"&gt;source &lt;/span&gt;database
  python        host any Python/WSGI web app: Django, Pylons, Web2py...
  python-worker run background Python processes
  rabbitmq      AMQP message queue server
  redis         advanced key-value store
  ruby          host any Ruby/Rack web app: Rails, Sinatra...
  ruby-worker   run background Ruby processes
  smtp          authenticated SMTP relay to send e-mails reliably
  static        host static HTTP content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need a database for our blog, since it was originally setup to use mysql, lets use that one here. Start up a new mysql service called 'kencochrane.mysql'&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# start up the database service.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud deploy -t mysql kencochrane.mysql
Created &lt;span class="s2"&gt;&amp;quot;kencochrane.mysql&amp;quot;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's make sure that it was created, and find out some more about our new database instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# get the information about our new service&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud info kencochrane.mysqlcluster: wolverine
config:
    mysql_password: password_was_changed
created_at: 1303671517.96066
name: kencochrane.mysql
namespace: kencochrane
ports:
-   name: ssh
    url: ssh://dotcloud@mysql.kencochrane.dotcloud.com:3912
-   name: mysql
    url: mysql://root:password_was_changed@mysql.kencochrane.dotcloud.com:3913
state: running
&lt;span class="nb"&gt;type&lt;/span&gt;: mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see from above, we have a mysql database, it is running, and it lets us know the ssh and mysql urls and ports, along with the root password. Lets create our database. To do that we will login to the server and run some sql commands. (the sensitive information has been changed)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# connect to dotcloud mysql server instance&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run kencochrane.mysql -- mysql -u root -p

&lt;span class="c"&gt;# mysql -u root -p&lt;/span&gt;
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or &lt;span class="se"&gt;\g&lt;/span&gt;.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# create the user and database and give user permissions to database.&lt;/span&gt;

Type &lt;span class="s1"&gt;&amp;#39;help;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;\h&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;help. Type &lt;span class="s1"&gt;&amp;#39;\c&amp;#39;&lt;/span&gt; to clear the current input statement.

mysql&amp;gt; create database blogdb;
Query OK, 1 row affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; create user &lt;span class="s1"&gt;&amp;#39;blog_username&amp;#39;&lt;/span&gt; identified by &lt;span class="s1"&gt;&amp;#39;strong_password&amp;#39;&lt;/span&gt;;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.05 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; grant all on blogdb.* to &lt;span class="s1"&gt;&amp;#39;blog_user&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.04 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; flush privileges;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;;Bye
Shared connection to mysql.kencochrane.dotcloud.com closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have our database all setup, we need to change our settings file so that it has all of the new information. Here is what mine looks like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# update your settings.py file.&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blogdb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blog_username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;strong_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysql.kencochrane.dotcloud.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3913&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further it is important to know the following. Dotcloud will pay attention to your .hgignore files. If you have a settings file in your .hgignore file so that it doesn't get saved in the repo, it will not push those changes up to the cloud. You will need to remove it from the .hgignore in order to get those files out there. It is also import to remember that only changes that are committed are pushed, so don't forget to commit your changes. If you wanted to be tricky you could use a post install script to pull down the file from a secure location and install it that way, if you want to make things super secure.&lt;/p&gt;
&lt;p&gt;Now that we have that behind us, lets get going. First we need to create a new python service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# deploy a new python app called kencochrane.blog&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud deploy --type python kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Service is now created so all we have to do is push our application to the new service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# push out your changes to the server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push kencochrane.blog .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now your code is out in the cloud, you just need to sync your database and run the migrations to get your database all setup, and you should be good to go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# sync the database&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run kencochrane.blog python current/mysite/manage.py syncdb

&lt;span class="c"&gt;# we use south so run migrate&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run kencochrane.blog python current/mysite/manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;now it works, just go to &lt;a class="reference external" href="http://blog.kencochrane.dotcloud.com/"&gt;http://blog.kencochrane.dotcloud.com/&lt;/a&gt; to see.&lt;/p&gt;
&lt;p&gt;If you need to look at the logs to see how it is going you can do it two ways. The first way will tail your logs for you to your console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud logs kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Open up a shell&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud ssh kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# nginx access and error logs.&lt;/span&gt;
/var/log/nginx/&amp;lt;app_name&amp;gt;.&lt;span class="o"&gt;{&lt;/span&gt;access,error&lt;span class="o"&gt;}&lt;/span&gt;.log

&lt;span class="c"&gt;# wsgi error logs&lt;/span&gt;
/var/log/supervisor/uswgi.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# restart the service&lt;/span&gt;
dotcloud restart kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DotCloud runs on Amazon's EC2 service, and last week while I was doing my testing, I was getting a bunch of errors, I wasn't sure if the errors were because this is a beta service, and they are still bugs in it, or if it was related to the amazon issues. Either way, I listed those errors below incase anyone else gets them. If I got the error I would just run the command again until it worked, sometimes it took 3 times before everything worked fine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# attempt 1&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push kencochrane.blog .DotCloud service unavailable &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No JSON object could be decoded&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.
Please try again later. If the problem persists, send an email to support@dotcloud.com.

&lt;span class="c"&gt;# attempt 2&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push kencochrane.blog .
&lt;span class="c"&gt;# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog&lt;/span&gt;
&lt;span class="c"&gt;# hg&lt;/span&gt;
remote: Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;[uploader.dotcloud.com]:1060,[174.129.15.77]:1060&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching &lt;span class="k"&gt;for &lt;/span&gt;changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added 1 changesets with 3 changes to 3 files
Scheduling build
Fetching logs...
Build started...
mkdir: cannot create directory &lt;span class="sb"&gt;`&lt;/span&gt;126:afdea9036e83&lt;span class="s1"&gt;&amp;#39;: File exists&lt;/span&gt;
&lt;span class="s1"&gt;Failed to fetch tarball (&amp;lt;type &amp;#39;&lt;/span&gt;exceptions.ValueError&lt;span class="s1"&gt;&amp;#39;&amp;gt;: Failed to extract the tarball, abort.)&lt;/span&gt;
&lt;span class="s1"&gt;Build finished.&lt;/span&gt;
&lt;span class="s1"&gt;Shared connection to blog.kencochrane.dotcloud.com closed.&lt;/span&gt;

&lt;span class="s1"&gt;# 3rd time is a charm, it finally works.&lt;/span&gt;
&lt;span class="s1"&gt;$ dotcloud push kencochrane.blog .# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog&lt;/span&gt;
&lt;span class="s1"&gt;# hg&lt;/span&gt;
&lt;span class="s1"&gt;remote: Warning: Permanently added &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;uploader.dotcloud.com&lt;span class="o"&gt;]&lt;/span&gt;:1060,&lt;span class="o"&gt;[&lt;/span&gt;174.129.15.77&lt;span class="o"&gt;]&lt;/span&gt;:1060&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching &lt;span class="k"&gt;for &lt;/span&gt;changes
no changes found
Scheduling build
Fetching logs...
Build started...
.
. all of the files &lt;span class="o"&gt;(&lt;/span&gt;trimmed &lt;span class="k"&gt;for &lt;/span&gt;space&lt;span class="o"&gt;)&lt;/span&gt;
.
Fetched code revision 126:afdea9036e83
.
. all the requirments &lt;span class="o"&gt;(&lt;/span&gt;trimmed &lt;span class="k"&gt;for &lt;/span&gt;space&lt;span class="o"&gt;)&lt;/span&gt;
.
Cleaning up...
Reloading nginx configuration: nginx.
uwsgi: stopped
uwsgi: started
Build finished.

Shared connection to blog.kencochrane.dotcloud.com closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion:&lt;/h2&gt;
&lt;p&gt;Setting up my blog on DotCloud was fairly straightforward, the documentation helped guide me along the way. I did run into a few road blocks that stopped me in my tracks for a little while, but after some digging I was able to get past those issues. Hopefully this post will help you overcome the same issues I had, and make your deployment a little more smooth.&lt;/p&gt;
&lt;p&gt;The service is very flexible, which is going to be good for most developers, but with the added flexibility they added some complexity that doesn't exist on the other services. For example ep.io and gondor.io handle all database and user creation for you, so you don't need to know what commands to run to create the database and the user, and they also automatically add the database connection strings to your settings file. I for one don't mind the extra complexity considering I'm going to get the ability to have direct access to my database so that I can do what I want. Others, might not want to worry about that. If you are building an application for a client that isn't very tech savy, the more things that are automated the better.&lt;/p&gt;
&lt;p&gt;DotCloud is still in beta, and if you take a look at their &lt;a class="reference external" href="http://docs.dotcloud.com/components/roadmap/"&gt;roadmap&lt;/a&gt;, they have very ambitious goals. I for one can't wait to see how they progress. I have only gone into a few of the many things that dotcloud has to offer, I recommend that you try it out for yourself and leave me a comment letting me know how you liked it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-time"&gt;
&lt;h2&gt;Next time:&lt;/h2&gt;
&lt;p&gt;I have been lucky enough to get a sneak peak at &lt;a class="reference external" href="http://apphosted.com"&gt;http://apphosted.com&lt;/a&gt; a python/django hosting service similar to gondor.io and ep.io. I'm currently playing with the service now, once I'm finished I'll post my findings.&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update:&lt;/h3&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I &lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/"&gt;accepted a job with dotCloud&lt;/a&gt;. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;
&lt;p class="last"&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/"&gt;Deploying my Django application to dotCloud Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="deployment"></category><category term="hosting"></category><category term="dotcloud"></category><category term="paas"></category></entry><entry><title>My Day in Gondor.io</title><link href="http://kencochrane.net/blog/2011/04/my-day-gondorio/" rel="alternate"></link><updated>2011-04-22T06:12:41-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-04-22:blog/2011/04/my-day-gondorio/</id><summary type="html">&lt;p&gt;The other day I wrote about a new &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;Django hosting service called ep.io&lt;/a&gt;
, after I made that post, I was lucky enough to get an invite for the private beta of &lt;a class="reference external" href="http://gondor.io"&gt;gondor.io&lt;/a&gt;, which is similar to &lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt; but from the folks over at &lt;a class="reference external" href="http://eldarion.com/"&gt;Eldarion&lt;/a&gt;. In order to test out the service I decided to take my Dango blog application and deploy it to Gondor and I kept notes along the way, here are those notes.&lt;/p&gt;
&lt;p&gt;The sign up process was pretty typical, register and then validate your email address. Once into the system you are offered the ability to create a site. So I created my site &amp;quot;KenCochrane_blog&amp;quot; and it gave me a key which I'll use later on. Not knowing where to start I headed over to the &lt;a class="reference external" href="https://gondor.io/support/"&gt;documentation&lt;/a&gt;. Which, as of this writing, is pretty basic, which is understandable since they are still in beta. I'm assuming the documentation will get better as they move forward. The current documentation and this blog post should get you enough information to get going.&lt;/p&gt;
&lt;div class="section" id="setting-up-my-development-environment"&gt;
&lt;h2&gt;Setting up my development environment:&lt;/h2&gt;
&lt;p&gt;Gondor uses a file to store your login credentials, so that you don't need to type it in everytime. It is pretty basic, here is how I installed mine on my MacBook Pro (OSX 10.6).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# create the file, and edit it.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;emacs ~/.gondor

&lt;span class="c"&gt;# copy this into the file.&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;auth&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;my_username&amp;gt;
&lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;my_password&amp;gt;

&lt;span class="c"&gt;# change the permissions so that only you can access it.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;chmod 600 ~/.gondor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like all cool projects these days, gondor uses pip and virtualenv, I'm assuming you already have virtualenv and pip installed so I'll move onto the fun stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make my virtualenv called gondor&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv gondor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From this point on, all of these commands are done in the new gondor virtual environment that I just created. Gondor uses a command line client to manage your application, we need to install that before we can do anything.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install gondor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since I'm going to need to make changes to my blog, I decided to fork it and make all of my changes to gondor on the new fork. The new fork is on bitbucket and it is called kencochranenet_gondor. Now that I have it forked I can pull it down locally.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# go to my projects directory and clone my blog.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects
&lt;span class="nv"&gt;$ &lt;/span&gt;hg clone https://bitbucket.org/kencochrane/kencochranenet_gondor kencochranenet_gondor
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;kencochranenet_gondor/mysite
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have some code to deploy, lets introduce the code to gondor. We use the init command inside of our django project and it will create a .gondor directory with a config file and some defaults.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gondor init &amp;lt;site_key&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gondor expects your project to be in a certain layout in order to work. For more info see the documentation: &lt;a class="reference external" href="https://gondor.io/support/project-layout/"&gt;https://gondor.io/support/project-layout/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since my blog didn't have everything in the right place, I need to add some directories and move some files around. One of the files I needed to add was deploy/wsgi.py, here is what it contains. Notice the two sys.path.insert lines. I added those because the &lt;a class="reference external" href="https://gondor.io/support/setting-up-django/"&gt;gondor documentation&lt;/a&gt; told me too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pardir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pardir&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pardir&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIHandler&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mysite.settings&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also had to add the same sys.path lines to my manage.py settings. Here is my new manage.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.management&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;execute_manager&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pardir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pardir&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pardir&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;settings&lt;/span&gt; &lt;span class="c"&gt;# Assumed to be in the same directory.&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: Can&amp;#39;t find the file &amp;#39;settings.py&amp;#39; in the directory containing &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s"&gt;. It appears you&amp;#39;ve customized things.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;You&amp;#39;ll have to run django-admin.py, passing it your settings module.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;(If the file settings.py does indeed exist, it&amp;#39;s causing an ImportError somehow.)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;execute_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gondor will automagically add your database and other settings to your app for you at deployment, and in order for that to work correctly you need to add the following at the end of your settings.py file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;local_settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My blog is using south to manage south migrations, so we need to edit the .gondor/config file to enable this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# edit .gondor/config changed migrations to migrations=south&lt;/span&gt;
emacs .gondor/config

&lt;span class="c"&gt;# change this line&lt;/span&gt;
&lt;span class="nv"&gt;migrations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="c"&gt;# to&lt;/span&gt;
&lt;span class="nv"&gt;migrations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; south
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have made all of the changes that we need. I need to commit all of my changes. It is important to note that because gondor uses mecurial or git for managing your project files, you need to always remember to add new files and commit all changes before you try to deploy your application.&lt;/p&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h3&gt;Deployment:&lt;/h3&gt;
&lt;p&gt;Next step is deployment. Before we get there, we need to create a new instance. Gondor allows you to deploy multiple versions of your code, this lets you have a production version and development versions all running at the same time. Gondor calls these different deployments 'instances'. We run the 'gondor create master' command, which will create a new instance called, you guessed it, 'master', and this is what you should see.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gondor create master
Reading configuration... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;
Creating instance on Gondor... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;

Run: gondor deploy master HEAD
Visit: http://jg437.o1.gondor.io/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This created the master instance and tells us what our url for the instance will be. Now according to the log message I just need to run 'gondor deploy master HEAD' and that will deploy my app. Lets do that now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gondor deploy master HEAD
  Reading configuration... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;
  ERROR: could not map &lt;span class="s1"&gt;&amp;#39;HEAD&amp;#39;&lt;/span&gt; to a SHA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it didn't work, after lots of digging, I realized that the code was assuming I was on a branch called HEAD, which wasn't correct. I think HEAD is the default git branch, and in mercirual, it is default. Just to be sure, I checked my mercurial branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hg summary

parent: 122:76f0c2271b7f tip
 gondor settings
branch: default
commit: &lt;span class="o"&gt;(&lt;/span&gt;clean&lt;span class="o"&gt;)&lt;/span&gt;

update: &lt;span class="o"&gt;(&lt;/span&gt;current&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the quick 'hg summary' command lets me know that my branch is default, so I then made the changes to my command and reran the script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gondor deploy master default

Reading configuration... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;
Building tarball from default... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;
Pushing tarball to Gondor...
Deploying... &lt;span class="o"&gt;[&lt;/span&gt;failed&lt;span class="o"&gt;]&lt;/span&gt;

pip has failed installing your requirements. Here is the output we saw:

Downloading/unpacking &lt;span class="nv"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.2.5 &lt;span class="o"&gt;(&lt;/span&gt;from -r mysite/requirements/project.txt &lt;span class="o"&gt;(&lt;/span&gt;line 1&lt;span class="o"&gt;))&lt;/span&gt;
Creating supposed download cache at /var/gondor/instances/.cache-i194/pip-download
  Storing download in cache at ./.cache-i194/pip-download/http%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2FD%2FDjango%2FDjango-1.2.5.tar.gz
  Running setup.py egg_info &lt;span class="k"&gt;for &lt;/span&gt;package Django

Downloading/unpacking MySQL-python&lt;span class="o"&gt;==&lt;/span&gt;1.2.3c1 &lt;span class="o"&gt;(&lt;/span&gt;from -r mysite/requirements/project.txt &lt;span class="o"&gt;(&lt;/span&gt;line 2&lt;span class="o"&gt;))&lt;/span&gt;
  Storing download in cache at ./.cache-i194/pip-download/http%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2FM%2FMySQL-python%2FMySQL-python-1.2.3c1.tar.gz
  Running setup.py egg_info &lt;span class="k"&gt;for &lt;/span&gt;package MySQL-python
    sh: mysql_config: not found
    Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
      File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line 14, in &amp;lt;module&amp;gt;
      File &lt;span class="s2"&gt;&amp;quot;/var/gondor/instances/.cache-i194/pip-build/MySQL-python/setup.py&amp;quot;&lt;/span&gt;, line 15, in &amp;lt;module&amp;gt;
        metadata, &lt;span class="nv"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_config&lt;span class="o"&gt;()&lt;/span&gt;
      File &lt;span class="s2"&gt;&amp;quot;setup_posix.py&amp;quot;&lt;/span&gt;, line 43, in get_config
        &lt;span class="nv"&gt;libs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mysql_config&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;libs_r&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      File &lt;span class="s2"&gt;&amp;quot;setup_posix.py&amp;quot;&lt;/span&gt;, line 24, in mysql_config
        raise EnvironmentError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%s not found&amp;quot;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;mysql_config.path,&lt;span class="o"&gt;))&lt;/span&gt;
    EnvironmentError: mysql_config not found
    Complete output from &lt;span class="nb"&gt;command &lt;/span&gt;python setup.py egg_info:
    sh: mysql_config: not found

Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:

  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line 14, in &amp;lt;module&amp;gt;

  File &lt;span class="s2"&gt;&amp;quot;/var/gondor/instances/.cache-i194/pip-build/MySQL-python/setup.py&amp;quot;&lt;/span&gt;, line 15, in &amp;lt;module&amp;gt;

    metadata, &lt;span class="nv"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_config&lt;span class="o"&gt;()&lt;/span&gt;

  File &lt;span class="s2"&gt;&amp;quot;setup_posix.py&amp;quot;&lt;/span&gt;, line 43, in get_config

    &lt;span class="nv"&gt;libs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mysql_config&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;libs_r&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  File &lt;span class="s2"&gt;&amp;quot;setup_posix.py&amp;quot;&lt;/span&gt;, line 24, in mysql_config

    raise EnvironmentError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%s not found&amp;quot;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;mysql_config.path,&lt;span class="o"&gt;))&lt;/span&gt;

EnvironmentError: mysql_config not found


Command python setup.py egg_info failed with error code 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We had mysql-python in our requirements file, and gondor doesn't support mysql, so we need to remove that, commit and try again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gondor deploy master default

Reading configuration... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;
Building tarball from default... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;
Pushing tarball to Gondor...
Deploying... &lt;span class="o"&gt;[&lt;/span&gt;failed&lt;span class="o"&gt;]&lt;/span&gt;

unable to build static &lt;span class="o"&gt;(&lt;/span&gt;collectstatic or build_static not found&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;closer but no cigar, gondor uses staticfiles (new in django 1.3 or django-staticfiles) to manage static files. If you aren't currently using static files add django-staticfiles to your pre django 1.3 app, or upgrade to django 1.3 and configure static files. To be honest, this was the biggest problem I had, it took me a while to get this correct. I was lucky enough to get some help on the #gondor IRC channel, which helped me along the way. With all of my changes made I committed them and tried again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gondor deploy master default
Reading configuration... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;
Building tarball from default... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;
Pushing tarball to Gondor...
Deploying... &lt;span class="o"&gt;[&lt;/span&gt;ok&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That worked!! woo hoo! now if I go to the URL (&lt;a class="reference external" href="http://jg437.o1.gondor.io/"&gt;http://jg437.o1.gondor.io/&lt;/a&gt;) I got earlier, I should see something if all went well. I went to the site, and bingo, all working.. no data but it is there. Now how do I create my django admin user? Normally that is done when you do your initial syncdb, and since that is done by gondor, it doesn't give you a chance. Looking thru all of the documentation I didn't find anything. So I went and looked at the gondor client source code, and I found my answer. I kicked off the following command, answered the prompts and bingo, I was in business.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gondor run master createsuperuser
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Now that I have my app up and running and I have admin access I could switch over my blog to the new service if I wanted. I'll hold off for right now, but you get the picture. All and all I think this is going to be a nice service once they are fully up and running. It isn't as far along as ep.io, but I'm sure it won't be long before they are caught up. I'll try and keep this post updated as I learn more about the service and they release new features.&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h4&gt;Update:&lt;/h4&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to gondor.io. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="gondor"></category><category term="django"></category><category term="python"></category><category term="hosting"></category><category term="paas"></category></entry><entry><title>My Experiences with ep.io</title><link href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/" rel="alternate"></link><updated>2011-04-18T21:09:57-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-04-18:blog/2011/04/my-experiences-with-epio/</id><summary type="html">&lt;p&gt;Over the last decade I have deployed my applications many different ways, I have used, self managed dedicated servers, fully managed dedicated servers, Virtual Privates Servers from Linode, RackSpace and Amazon, shared hosting from webfaction, and I also used Google App Engine. I have learned a lot of things along the way, but the one thing I learned the most is that managing the server and keeping it up and running isn't fun. The fun part is writing the applications, and watching them grow as people start to use them. If there was only a way to write the application and then let someone else manage all of the server stuff for you, for a reasonable price.&lt;/p&gt;
&lt;p&gt;The Ruby on Rails folks have had services like this for a while, both Heroku and EngineYard are pretty popular and make hosting your Rails applications much easier. When Heroku was bought by salesforce.com for $212M, it opened people eyes, and started to get them thinking. Why can't we do that for Django? I have been wanting to build a Django service like this for a while now, but with limited time and not knowing where to begin, my idea went no where. Recently there have been a bunch of  new services that have popped up that provided turn key Django hosting, very similar in nature to Heroku, and Google App Engine (Python, and Java). This has gotten me very excited, and I plan on trying them all out.&lt;/p&gt;
&lt;p&gt;One of these new services is called &lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt;, and it is run by Andrew Godwin (of Django South fame) and Ben Firshman. They are trying to make the hosting as simple as possible, so that you don't have to worry about servers at all. You write your application, deploy it to their service and they handle the rest. If you need to scale up your application, add load balancing, add more disk space, they will take care of that. This allows you the developer to spend your valuable time writing code instead of doing server maintenance. Best of all their pricing is based on usage, and they have a free tier, so if you have an application that you put out there, but it isn't using any resources, or very few resources, it might not cost you anything at all. So there is nothing stopping you from trying it out.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt; is still in beta, and not available to the public yet. The only way to get access is to put your name on a waiting list, and wait until you are sent an invite. I was lucky enough to get an invite early on, and I have been playing around with &lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt; for a new project that I'm working on.  I'm still in development with my application so it isn't public yet, but I have an app deployed and running. I personally feel that if you are lucky enough to be selected to a closed beta, that it is your duty to give as much feedback as possible, so that you can help make the application great. If you aren't going to be doing this, then you don't deserve the early access. That is why I'm writing this post, to help spread the word about ep.io, and to show people getting started with the service how easy it is to deploy their app.&lt;/p&gt;
&lt;p&gt;Before you start using a service like &lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt;, you need to do your research to make sure you know what it is you are getting with the service. Services like this aim to make hard tasks easy, and sometimes in doing so, they need to sacrifice features and flexibility. Knowing the pros and cons about a service before hand will help set your expectations accordingly so that you aren't disappointed later on in the process. It is important to note that as of this writing, they are still in beta, and thus still a work in progress, so if you are reading this, make sure you look at their website for the most up to date information. I will try and come back and update this post as the service deploys new features, and my experience with the service grows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application setup:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like most managed application services, you won't be able to deploy your application as is, you will need to make a few changes in order to get everything to work. Luckily for us, this step wasn't too hard. I used the documentation that ep.io provides along with the ep.io project skeleton (&lt;a class="reference external" href="https://github.com/idangazit/epio_skel"&gt;https://github.com/idangazit/epio_skel&lt;/a&gt;) as a good starting point. ep.io uses an ini based configuration file called epio.ini for all of your configuration information. The documentation does a pretty good job explaining the different sections, and if you look at the ep.io project skeleton, there is a good example of one already created for you.&lt;/p&gt;
&lt;p&gt;ep.io controls all aspects of your environment and because of this you don't know what your database information is, but that is OK, because if you setup your django settings.py file correctly, they will handle all of that for you. Once again, checkout the skeleton project or the documentation for the recommended settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your project is already using virtualenv and pip, this shouldn't be too difficult. If not, you will need to read up a little on pip and it's requirements files (&lt;a class="reference external" href="http://pip.openplans.org/requirement-format.html"&gt;http://pip.openplans.org/requirement-format.html&lt;/a&gt;) in order to make sure you load all of your dependencies correctly. ep.io already has some of the most common libraries installed, for a full list, follow this link: &lt;a class="reference external" href="http://www.ep.io/docs/runtime/#python-libraries"&gt;http://www.ep.io/docs/runtime/#python-libraries&lt;/a&gt;. If you need a non pure-python library that isn't on their list, just let them know and if it is reasonable, they will most likely install it for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deployment:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ep.io offers a simple control panel so that you can see what apps you have installed, how much they are costing you, how many resources they are using (database, bandwidth, CPU, disk usage, etc). It also allows you to configure your domains, set application permissions, and view the console log. Besides that, you need to do everything using their command line client. Before you can use the client, you will need to install it, you can do that using either pip or easy install.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install -U epio

&lt;span class="c"&gt;# or&lt;/span&gt;

easy_install -U epio
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have the client installed, this is where the fun begins. With the client you can create, suspend, resume, upload or delete your app. You can also use the client to kick off remote commands on your server such as django syncdb. See the official documentation for full details: &lt;a class="reference external" href="http://www.ep.io/docs/client/"&gt;http://www.ep.io/docs/client/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some notes and examples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#create app&lt;/span&gt;
epio create &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# suspend app&lt;/span&gt;
epio &lt;span class="nb"&gt;suspend&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;#resume app&lt;/span&gt;
epio resume &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# delete app&lt;/span&gt;
epio delete &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# django syncdb&lt;/span&gt;
epio django &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; syncdb

&lt;span class="c"&gt;# django run south migrations for all apps&lt;/span&gt;
epio django &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; migrate

&lt;span class="c"&gt;# django run south migrations for just one app called chicken&lt;/span&gt;
epio django &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; migrate chicken

&lt;span class="c"&gt;# bash command&lt;/span&gt;
epio run_command &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; bash

&lt;span class="c"&gt;# psql access to your database.&lt;/span&gt;
epio run_command &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; psql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Uploading App:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The epio upload command will use git in the background to sync up your local directory to your server. It will ignore the .pyc files and such, if you have other files and directories that you also want to ignore you can create a file called .epioignore and list the files and directories to ignore in it. The .epioignore file has the same syntax as a .gitignore file.&lt;/p&gt;
&lt;p&gt;The upload command is fine for most cases, but if you are already using git or mercurial, you can push your changes directly to ep.io, this allows you to do more of a continuous deployment setup, where you want to push to a central repo, run a bunch of tests and if it works push out to production. See this link for more info on uploading via git and mercurial &lt;a class="reference external" href="http://www.ep.io/docs/vcss/"&gt;http://www.ep.io/docs/vcss/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The ep.io databases are behind a firewall for security purposes, and because of this, you don't have direct access to the database, so if you are used to using a GUI database client, you are out of luck. The only way to get to your database right now is using the psql command tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# psql access to your database.&lt;/span&gt;
epio run_command &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; psql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Getting data into your databases:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two recommended ways for getting data into your database.&lt;/p&gt;
&lt;p&gt;You can create a SQL dump file, and add it to your project, and upload. Once it is up on the server you can run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;epio run_command -- psql -f dumpname.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also stream the dump over the network via SSH. (They suggest that you only do this with dumps that are 20MB or less in size.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;epio run_command psql &amp;lt; dumpname.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Background tasks:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ep.io supports both cronjobs and background tasks via Celery and Redis.&lt;/p&gt;
&lt;p&gt;Cron is pretty easy to setup, you have a section in the epio.ini file called cron where you put your normal cron commands. The syntax isn't exactly the same, so see the documentation for the differences. &lt;a class="reference external" href="http://www.ep.io/docs/epioini/#cron-section"&gt;http://www.ep.io/docs/epioini/#cron-section&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can use either plain celery or django-celery, what ever you want, they support most features, but they currently don't support periodic tasks, they hope to get to that in the future. In the meantime just use a cron for those.&lt;/p&gt;
&lt;div class="section" id="ep-io-vs-traditional-hosting"&gt;
&lt;h2&gt;ep.io vs traditional hosting&lt;/h2&gt;
&lt;p&gt;I originally wrote this Pro's and Con's section at stackoverflow.com, and I include it here as well.
&lt;a class="reference external" href="http://stackoverflow.com/questions/5117395/django-hosting-on-ep-io/5648323#5648323"&gt;http://stackoverflow.com/questions/5117395/django-hosting-on-ep-io/5648323#5648323&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="pros"&gt;
&lt;h3&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Server Management&lt;/em&gt;: You don't have to worry about your server setup at all, it handles everything for you. With a VPS, you would need to worry about making sure the server is up to date with security patches, and all that fun stuff, with this, you don't worry about anything, they take care of all that for you.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deployment&lt;/em&gt;: It makes deploying an app and having it up and running really quickly. deploying a new version of an app is a piece of cake, I just need to run one maybe two commands, and it handles everything for me.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pricing&lt;/em&gt;: you are only charged for what you use, so if you have a very low traffic website, it might not cost you anything at all.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scaling&lt;/em&gt;: They handle scaling and load balancing for you out of the box, no need for you to worry about that. You still need to write your application so that it can scale efficiently, but if you do, they will handle the rest.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Background tasks&lt;/em&gt;: They have support for cronjobs as well as background workers using celery.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Customer support&lt;/em&gt;: I had a few questions, sent them an email, and had an answer really fast, they have been great, so much better then I would have expected. If you run your own VPS, you really don't have anyone to talk to, so this is a major plus.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cons"&gt;
&lt;h3&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;DB access&lt;/em&gt;: You don't have direct access to the database, you can get to the psql shell, but you can't connect an external client GUI. This makes doing somethings a little more difficult or slow. But you can still use the django admin or fixtures to do a lot of things.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Limited services available&lt;/em&gt;: It currently only supports Postgresql and redis, so if you want to use MySQL, memcached, mongodb,etc you are out of luck.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Low level c libs&lt;/em&gt;: You can't install any dependencies that you want, similar to google app engine, they have some of the common c libs installed already, and if you want something different that isn't already installed you will need to contact them to get it added. &lt;a class="reference external" href="http://www.ep.io/docs/runtime/#python-libraries"&gt;http://www.ep.io/docs/runtime/#python-libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Email&lt;/em&gt;: You can't send or receive email, which means you will need to depend on a 3rd party for that, which is probably good practice anyway, but it just means more money.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;File system&lt;/em&gt;: You have a more limited file system available to you, and because of the distributed nature of the system you will need to be very careful when working from files. You can't (unless i missed it) connect to your account via (s)ftp to upload files, you will need to connect via the ep.io command line tool and either do an rsync or a push of a repo to get files up there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update:&lt;/h3&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to ep.io. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="epio"></category><category term="deployment"></category><category term="hosting"></category><category term="python"></category><category term="paas"></category></entry><entry><title>Restart Apache in Mac OS X</title><link href="http://kencochrane.net/blog/2011/04/restart-apache-mac-os-x/" rel="alternate"></link><updated>2011-04-16T10:01:02-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-04-16:blog/2011/04/restart-apache-mac-os-x/</id><summary type="html">&lt;p&gt;I always seem to forget this, so I'm going to post it here for easy reference.&lt;/p&gt;
&lt;p&gt;To restart the Apache webserver service you can run the following command in a Mac OS X Terminal window:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /usr/sbin/apachectl restart
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="macosx"></category><category term="apache"></category></entry><entry><title>Upgrading MySQL 5.0.x to Percona MySQL 5.1.x RHEL5 or CENTOS 5</title><link href="http://kencochrane.net/blog/2011/04/upgrading-mysql-50x-percona-mysql-51x-rhel5-or-cen/" rel="alternate"></link><updated>2011-04-14T10:55:09-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-04-14:blog/2011/04/upgrading-mysql-50x-percona-mysql-51x-rhel5-or-cen/</id><summary type="html">&lt;p&gt;Upgrade the stock MySQL 5.0.x build to the new stable MySQL 5.1.x Percona version.  Here are my notes on upgrading on Red Hat Enterprise Linux 5 (RHEL5) or CentOS5.&lt;/p&gt;
&lt;p&gt;First we need to stop mysql&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service mysql stop;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm assuming that you don't have the percona repo installed on your machine, if not follow this link on how to set it up. &lt;a class="reference external" href="http://www.percona.com/docs/wiki/percona-server:release:start"&gt;Setting up Percona RPM Repo&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
wget http://www.percona.com/redir/downloads/percona-release/percona-release-0.0-1.i386.rpm
sudo rpm -Uhv percona-release-0.0-1.i386.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to remove the old MySQL 5.0 binaries. (Don't worry this will leave your data.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum remove -y mysql-server mysql mysql-devel mysql-test mysql-bench
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now install the new Percona MySQL 5.1.x binaries. (depending on your connection this might take a few minutes)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum install -y Percona-Server-devel-51 Percona-Server-shared-51 Percona-Server-test-51 Percona-Server-client-51 Percona-Server-server-51
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;During the install it will throw out some warnings, make sure you write those down, and make the changes that it recommends. Here are a few of mine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;110208 16:44:52 &lt;span class="o"&gt;[&lt;/span&gt;Warning&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--log_slow_queries&amp;#39;&lt;/span&gt; is deprecated and will be removed in a future release. Please use &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;--slow_query_log&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;--slow_query_log_file&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; instead.
110208 16:44:52 &lt;span class="o"&gt;[&lt;/span&gt;Warning&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--log&amp;#39;&lt;/span&gt; is deprecated and will be removed in a future release. Please use &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;--general_log&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;--general_log_file&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; instead.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming the install went well, now we need to upgrade the data to the new format. (replace &amp;lt;mysql admin user&amp;gt; with your mysql admin username, and enter password when prompted)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql_upgrade -u &amp;lt;mysql admin username&amp;gt; -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if your upgrade was anything like mine it had a bunch of errors like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db_name.table_name
error    : Table upgrade required. Please &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;REPAIR TABLE table_name&amp;quot;&lt;/span&gt; or dump/reload to fix it!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you try to repair the table you get this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db_name.table_name
note     : The storage engine &lt;span class="k"&gt;for &lt;/span&gt;the table doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t support repair
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to Peter Zaitsev &lt;a class="reference external" href="http://www.mysqlperformanceblog.com/2010/05/14/mysql_upgrade-and-innodb-tables/"&gt;mysql_upgrade and Innodb Tables&lt;/a&gt; we know that we can do the following to fix it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INNODB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We just need to run this command for each table that threw an error and it should fix it. (If you have lots of data this might take a while, I had some tables that took over 2 hours)&lt;/p&gt;
&lt;p&gt;Once you think that you have all of the tables fixed, you can run this command and it will check all of your tables and let you know if you are good or not. If you still have errors, repeat the steps above until all tables pass.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysqlcheck -A --check-upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully everything passed for you, and you now have a fully upgraded database. It is important to note that there is another option besides running the table alter. You could have dumped all of the data prior to the upgraded and then restored it once the database was upgraded. This process would most likely take a lot longer.&lt;/p&gt;
</summary><category term="percona"></category><category term="mysql"></category><category term="upgrade"></category><category term="centos5"></category><category term="rhel5"></category><category term="linux"></category></entry><entry><title>Django 1.3 has been released</title><link href="http://kencochrane.net/blog/2011/03/django-13-has-been-released/" rel="alternate"></link><updated>2011-03-23T21:38:19-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-03-23:blog/2011/03/django-13-has-been-released/</id><summary type="html">&lt;p&gt;It includes the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Class-based views&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Extended static files handling&lt;/li&gt;
&lt;li&gt;unittest2 support&lt;/li&gt;
&lt;li&gt;Transaction context managers&lt;/li&gt;
&lt;li&gt;Configurable delete-cascade&lt;/li&gt;
&lt;li&gt;Contextual markers and comments for translatable strings&lt;/li&gt;
&lt;li&gt;Improvements to built-in template tags&lt;/li&gt;
&lt;li&gt;Caching changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information checkout the official release notes: &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/releases/1.3/"&gt;http://docs.djangoproject.com/en/dev/releases/1.3/&lt;/a&gt;&lt;/p&gt;
</summary><category term="django"></category><category term="python"></category></entry><entry><title>Upgrading Percona MySQL 5.0.x to Percona MySQL 5.1.x RHEL5 or CENTOS 5</title><link href="http://kencochrane.net/blog/2011/02/upgrading-percona-mysql-50x-percona-mysql-51x-rhel/" rel="alternate"></link><updated>2011-02-15T09:07:26-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-02-15:blog/2011/02/upgrading-percona-mysql-50x-percona-mysql-51x-rhel/</id><summary type="html">&lt;p&gt;I have been using the Percona build of MySQL 5.0.x for a little while now, and I have been impressed. Now it is time to upgrade to the new stable MySQL 5.1.x version.  Here are my notes on upgrading on Red Hat Enterprise Linux 5 (RHEL5) or CentOS5.&lt;/p&gt;
&lt;p&gt;First we need to stop mysql&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service mysql stop;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm assuming that you have the percona repo installed on your machine, if not see follow this link on how to set it up. &lt;a class="reference external" href="http://www.percona.com/docs/wiki/percona-server:release:start"&gt;Setting up Percona RPM Repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we need to remove the old MySQL 5.0 binaries. (Don't worry this will leave your data.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum remove -y Percona-SQL*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now install the new Percona MySQL 5.1.x binaries. (depending on your connection this might take a few minutes)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum install -y Percona-Server-devel-51 Percona-Server-shared-51 Percona-Server-test-51 Percona-Server-client-51 Percona-Server-server-51
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;During the install it will throw out some warnings, make sure you write those down, and make the changes that it recommends. Here are a few of mine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;110208 16:44:52 &lt;span class="o"&gt;[&lt;/span&gt;Warning&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--log_slow_queries&amp;#39;&lt;/span&gt; is deprecated and will be removed in a future release. Please use &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;--slow_query_log&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;--slow_query_log_file&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; instead.
110208 16:44:52 &lt;span class="o"&gt;[&lt;/span&gt;Warning&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--log&amp;#39;&lt;/span&gt; is deprecated and will be removed in a future release. Please use &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;--general_log&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;--general_log_file&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; instead.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming the install went well, now we need to upgrade the data to the new format. (replace &amp;lt;mysql admin user&amp;gt; with your mysql admin username, and enter password when prompted)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql_upgrade -u &amp;lt;mysql admin username&amp;gt; -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if your upgrade was anything like mine it had a bunch of errors like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db_name.table_name
error    : Table upgrade required. Please &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;REPAIR TABLE table_name&amp;quot;&lt;/span&gt; or dump/reload to fix it!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you try to repair the table you get this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db_name.table_name
note     : The storage engine &lt;span class="k"&gt;for &lt;/span&gt;the table doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t support repair
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to Peter Zaitsev &lt;a class="reference external" href="http://www.mysqlperformanceblog.com/2010/05/14/mysql_upgrade-and-innodb-tables/"&gt;mysql_upgrade and Innodb Tables&lt;/a&gt; we know that we can do the following to fix it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INNODB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We just need to run this command for each table that threw an error and it should fix it. (If you have lots of data this might take a while, I had some tables that took over 2 hours)&lt;/p&gt;
&lt;p&gt;Once you think that you have all of the tables fixed, you can run this command and it will check all of your tables and let you know if you are good or not. If you still have errors, repeat the steps above until all tables pass.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysqlcheck -A --check-upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully everything passed for you, and you now have a fully upgraded database. It is important to note that there is another option besides running the table alter. You could have dumped all of the data prior to the upgraded and then restored it once the database was upgraded. This process would most likely take a lot longer.&lt;/p&gt;
</summary><category term="percona"></category><category term="mysql"></category><category term="upgrade"></category><category term="centos5"></category><category term="rhel5"></category><category term="linux"></category></entry><entry><title>Django 1.2 has been Released!</title><link href="http://kencochrane.net/blog/2010/05/django-12-has-been-released/" rel="alternate"></link><updated>2010-05-17T16:12:11-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2010-05-17:blog/2010/05/django-12-has-been-released/</id><summary type="html">&lt;div class="section" id="django-1-2-has-been-released"&gt;
&lt;h2&gt;Django 1.2 has been released&lt;/h2&gt;
&lt;p&gt;I have been waiting for this release for a while now, mostly because it includes some of the features I have been dying to get my hands on. The ones I like the most are&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;support for multiple databases&lt;/li&gt;
&lt;li&gt;smart-if template tag&lt;/li&gt;
&lt;li&gt;The new Email Backends&lt;/li&gt;
&lt;li&gt;relaxed requirements for usernames.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a list for some of the features, and a little bit about each one.&lt;/p&gt;
&lt;div class="section" id="support-for-multiple-databases"&gt;
&lt;h3&gt;Support for multiple databases&lt;/h3&gt;
&lt;blockquote&gt;
Django 1.2 adds the ability to use more than one database in your Django project. Queries can be issued at a  specific database with the using() method on QuerySet objects. Individual objects can be saved to a specific  database by providing a using argument when you call save().&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="model-validation"&gt;
&lt;h3&gt;Model validation&lt;/h3&gt;
&lt;blockquote&gt;
Model instances now have support for validating their own data, and both model and form fields now accept configurable lists of validators specifying reusable, encapsulated validation behavior. Note, however, that validation must still be performed explicitly. Simply invoking a model instance’s save() method will not perform any validation of the instance’s data.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="improved-csrf-protection"&gt;
&lt;h3&gt;Improved CSRF protection&lt;/h3&gt;
&lt;blockquote&gt;
Django now has much improved protection against Cross-Site Request Forgery (CSRF) attacks. This type of attack occurs when a malicious Web site contains a link, a form button or some JavaScript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, “login CSRF,” where an attacking site tricks a user’s browser into logging into a site with someone else’s credentials, is also covered.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="messages-framework"&gt;
&lt;h3&gt;Messages framework&lt;/h3&gt;
&lt;blockquote&gt;
Django now includes a robust and configurable messages framework with built-in support for cookie- and session-based messaging, for both anonymous and authenticated clients. The messages framework replaces the deprecated user message API and allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one).&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="object-level-permissions"&gt;
&lt;h3&gt;Object-level permissions&lt;/h3&gt;
&lt;blockquote&gt;
A foundation for specifying permissions at the per-object level has been added. Although there is no implementation of this in core, a custom authentication backend can provide this implementation and it will be used by django.contrib.auth.models.User. See the authentication docs for more information.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="permissions-for-anonymous-users"&gt;
&lt;h3&gt;Permissions for anonymous users&lt;/h3&gt;
&lt;blockquote&gt;
If you provide a custom auth backend with supports_anonymous_user set to True, AnonymousUser will check the backend for permissions, just like User already did. This is useful for centralizing permission handling - apps can always delegate the question of whether something is allowed or not to the authorization/authentication backend. See the authentication docs for more details.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="relaxed-requirements-for-usernames"&gt;
&lt;h3&gt;Relaxed requirements for usernames&lt;/h3&gt;
&lt;blockquote&gt;
The built-in User model’s username field now allows a wider range of characters, including &amp;#64;, +, . and - characters.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="e-mail-backends"&gt;
&lt;h3&gt;E-mail backends&lt;/h3&gt;
&lt;blockquote&gt;
You can now configure the way that Django sends e-mail. Instead of using SMTP to send all e-mail, you can now choose a configurable e-mail backend to send messages. If your hosting provider uses a sandbox or some other non-SMTP technique for sending mail, you can now construct an e-mail backend that will allow Django’s standard mail sending methods to use those facilities. This also makes it easier to debug mail sending. Django ships with backend implementations that allow you to send e-mail to a file, to the console, or to memory. You can even configure all e-mail to be thrown away.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="smart-if-tag"&gt;
&lt;h3&gt;“Smart” if tag&lt;/h3&gt;
&lt;blockquote&gt;
The if tag has been upgraded to be much more powerful. First, we’ve added support for comparison operators. The operators supported are ==, !=, &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=, in and not in, all of which work like the Python operators, in addition to and, or and not, which were already supported.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="template-caching"&gt;
&lt;h3&gt;Template caching&lt;/h3&gt;
&lt;blockquote&gt;
In previous versions of Django, every time you rendered a template, it would be reloaded from disk. In Django 1.2, you can use a cached template loader to load templates once, then cache the result for every subsequent render. This can lead to a significant performance improvement if your templates are broken into lots of smaller subtemplates (using the {% extends %} or {% include %} tags). As a side effect, it is now much easier to support non-Django template languages. For more details, see the notes on supporting non-Django template languages.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="natural-keys-in-fixtures"&gt;
&lt;h3&gt;Natural keys in fixtures&lt;/h3&gt;
&lt;blockquote&gt;
Fixtures can now refer to remote objects using Natural keys. This lookup scheme is an alternative to the normal primary-key based object references in a fixture, improving readability and resolving problems referring to objects whose primary key value may not be predictable or known.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="fast-failure-for-tests"&gt;
&lt;h3&gt;Fast failure for tests&lt;/h3&gt;
&lt;blockquote&gt;
Both the test subcommand of django-admin.py and the runtests.py script used to run Django's own test suite now support a --failfast option. When specified, this option causes the test runner to exit after encountering a failure instead of continuing with the test run. In addition, the handling of Ctrl-C during a test run has been improved to trigger a graceful exit from the test run that reports details of the tests that were run before the interruption.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="bigintegerfield"&gt;
&lt;h3&gt;BigIntegerField&lt;/h3&gt;
&lt;blockquote&gt;
Models can now use a 64-bit BigIntegerField type.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="improved-localization"&gt;
&lt;h3&gt;Improved localization&lt;/h3&gt;
&lt;blockquote&gt;
Django's internationalization framework has been expanded with locale-aware formatting and form processing. That means, if enabled, dates and numbers on templates will be displayed using the format specified for the current locale. Django will also use localized formats when parsing data in forms. See Format localization for more details.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="readonly-fields-in-modeladmin"&gt;
&lt;h3&gt;readonly_fields in ModelAdmin&lt;/h3&gt;
&lt;blockquote&gt;
django.contrib.admin.ModelAdmin.readonly_fields has been added to enable non-editable fields in add/change pages for models and inlines. Field and calculated values can be displayed alongside editable fields.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="and-much-much-more"&gt;
&lt;h3&gt;And much much more!!&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To find out what else is in this release visit &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/releases/1.2/"&gt;Django 1.2 offical release notes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download it here: &lt;a class="reference external" href="http://www.djangoproject.com/download/1.2/tarball/"&gt;http://www.djangoproject.com/download/1.2/tarball/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Offical website: &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;DjangoProject.com&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category></entry><entry><title>Django Project Release History</title><link href="http://kencochrane.net/blog/2010/05/Django-Project-Release-History/" rel="alternate"></link><updated>2010-05-17T12:44:43-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2010-05-17:blog/2010/05/Django-Project-Release-History/</id><summary type="html">&lt;p&gt;I was curious so I went ahead and found out all of the official &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;. releases and  when they were released and how long it took between each release.&lt;/p&gt;
&lt;p&gt;There have been 7 major releases and 8 minor releases in the past 5 years. I wonder how this
compares to other projects like &lt;a class="reference external" href="http://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt;.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="22%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="57%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Release #&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;# of months since last release&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Open Sourced&lt;/td&gt;
&lt;td&gt;Jul 15, 2005&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.90&lt;/td&gt;
&lt;td&gt;Nov 16, 2005&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.91&lt;/td&gt;
&lt;td&gt;Jan 11, 2006&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.95&lt;/td&gt;
&lt;td&gt;Jul 29, 2006&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.95.1&lt;/td&gt;
&lt;td&gt;Jan 21, 2007&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.96&lt;/td&gt;
&lt;td&gt;Mar 23, 2007&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.96.1&lt;/td&gt;
&lt;td&gt;Oct 26, 2007&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.96.2&lt;/td&gt;
&lt;td&gt;May 14, 2008&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;1.0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Sep 3, 2008&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.0.1&lt;/td&gt;
&lt;td&gt;Nov 15, 2008&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.0.2&lt;/td&gt;
&lt;td&gt;Nov 18, 2008&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;1.1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Jul 29, 2009&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.1.1&lt;/td&gt;
&lt;td&gt;Oct 9, 2009&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.1.2&lt;/td&gt;
&lt;td&gt;May 17, 2010&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.1.3&lt;/td&gt;
&lt;td&gt;Dec 22, 2010&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.1.4&lt;/td&gt;
&lt;td&gt;Feb 8, 2011&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;1.2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;May 17, 2010&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.2.1&lt;/td&gt;
&lt;td&gt;May 18, 2010&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.2.2&lt;/td&gt;
&lt;td&gt;Sep 8, 2010&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.2.3&lt;/td&gt;
&lt;td&gt;Sep 10, 2010&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.2.4&lt;/td&gt;
&lt;td&gt;Dec 22, 2010&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.2.5&lt;/td&gt;
&lt;td&gt;Feb 8, 2011&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.2.6&lt;/td&gt;
&lt;td&gt;Sep 9, 2011&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.2.7&lt;/td&gt;
&lt;td&gt;Sep 10, 2011&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;1.3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Mar 23, 2011&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.3.1&lt;/td&gt;
&lt;td&gt;Sep 9, 2011&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;1.4&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Mar 23, 2012&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="django"></category><category term="python"></category></entry><entry><title>Automated Install Script for memcached on RHEL5</title><link href="http://kencochrane.net/blog/2010/05/Automated-Install-Script-for-memcached-on-RHEL5/" rel="alternate"></link><updated>2010-05-14T16:34:38-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2010-05-14:blog/2010/05/Automated-Install-Script-for-memcached-on-RHEL5/</id><summary type="html">&lt;p&gt;I created this script that will download memcached build,install and set it up to start up automatically on reboot. It also installs the init.d script to manage memcache so you can restart etc.&lt;/p&gt;
&lt;p&gt;You can either copy and paste it into your shell prompt using a user that has install privileges (root,admin,etc) or you can copy into a .sh file and execute it.&lt;/p&gt;
&lt;p&gt;The code for most of this was take from this blog post: &lt;a class="reference external" href="http://www.vbseo.com/blogs/danny-bembibre/daemon-scripts-memcached-44/"&gt;http://www.vbseo.com/blogs/danny-bembibre/daemon-scripts-memcached-44/&lt;/a&gt; it doesn't seem to be around anymore so I put it here for anyone else looking for this very helpful info.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://memcached.googlecode.com/files/memcached-1.4.5.tar.gz
tar -xvzf memcached-1.4.5.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;memcached-1.4.5
./configure
make
make &lt;span class="nb"&gt;test&lt;/span&gt;
make install

touch /etc/memcached.conf
cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /etc/memcached.conf&lt;/span&gt;
&lt;span class="s"&gt;#Memory a user&lt;/span&gt;
&lt;span class="s"&gt;-m 64&lt;/span&gt;
&lt;span class="s"&gt;# default port&lt;/span&gt;
&lt;span class="s"&gt;-p 11211&lt;/span&gt;
&lt;span class="s"&gt;# user to run daemon nobody/apache/www-data&lt;/span&gt;
&lt;span class="s"&gt;-u nobody&lt;/span&gt;
&lt;span class="s"&gt;# only listen locally&lt;/span&gt;
&lt;span class="s"&gt;-l 127.0.0.1&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

touch /etc/init.d/memcached
chmod +x /etc/init.d/memcached

cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /etc/init.d/memcached&lt;/span&gt;
&lt;span class="s"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="s"&gt;#&lt;/span&gt;
&lt;span class="s"&gt;# memcached    This shell script takes care of starting and stopping&lt;/span&gt;
&lt;span class="s"&gt;#              standalone memcached.&lt;/span&gt;
&lt;span class="s"&gt;#&lt;/span&gt;
&lt;span class="s"&gt;# chkconfig: - 80 12&lt;/span&gt;
&lt;span class="s"&gt;# description: memcached is a high-performance, distributed memory&lt;/span&gt;
&lt;span class="s"&gt;#              object caching system, generic in nature, but&lt;/span&gt;
&lt;span class="s"&gt;#              intended for use in speeding up dynamic web&lt;/span&gt;
&lt;span class="s"&gt;#              applications by alleviating database load.&lt;/span&gt;
&lt;span class="s"&gt;# processname: memcached&lt;/span&gt;
&lt;span class="s"&gt;# config: /etc/memcached.conf&lt;/span&gt;
&lt;span class="s"&gt;# Source function library.&lt;/span&gt;
&lt;span class="s"&gt;. /etc/rc.d/init.d/functions&lt;/span&gt;
&lt;span class="s"&gt;PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin&lt;/span&gt;
&lt;span class="s"&gt;DAEMON=/usr/local/bin/memcached&lt;/span&gt;
&lt;span class="s"&gt;DAEMONBOOTSTRAP=/usr/local/bin/start-memcached&lt;/span&gt;
&lt;span class="s"&gt;DAEMONCONF=/etc/memcached.conf&lt;/span&gt;
&lt;span class="s"&gt;NAME=memcached&lt;/span&gt;
&lt;span class="s"&gt;DESC=memcached&lt;/span&gt;
&lt;span class="s"&gt;PIDFILE=/var/run/$NAME.pid&lt;/span&gt;
&lt;span class="s"&gt;[ -x $DAEMON ] || exit 0&lt;/span&gt;
&lt;span class="s"&gt;[ -x $DAEMONBOOTSTRAP ] || exit 0&lt;/span&gt;
&lt;span class="s"&gt;RETVAL=0&lt;/span&gt;
&lt;span class="s"&gt;start() {&lt;/span&gt;
&lt;span class="s"&gt; echo -n $&amp;quot;Starting $DESC: &amp;quot;&lt;/span&gt;
&lt;span class="s"&gt; daemon $DAEMONBOOTSTRAP $DAEMONCONF&lt;/span&gt;
&lt;span class="s"&gt; RETVAL=$?&lt;/span&gt;
&lt;span class="s"&gt; [ $RETVAL -eq 0 ] &amp;amp;&amp;amp; touch $PIDFILE&lt;/span&gt;
&lt;span class="s"&gt; echo&lt;/span&gt;
&lt;span class="s"&gt; return $RETVAL&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;stop() {&lt;/span&gt;
&lt;span class="s"&gt; echo -n $&amp;quot;Shutting down $DESC: &amp;quot;&lt;/span&gt;
&lt;span class="s"&gt; killproc $NAME&lt;/span&gt;
&lt;span class="s"&gt; RETVAL=$?&lt;/span&gt;
&lt;span class="s"&gt; echo&lt;/span&gt;
&lt;span class="s"&gt; [ $RETVAL -eq 0 ] &amp;amp;&amp;amp; rm -f $PIDFILE&lt;/span&gt;
&lt;span class="s"&gt; return $RETVAL&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;# See how we were called.&lt;/span&gt;
&lt;span class="s"&gt;case &amp;quot;$1&amp;quot; in&lt;/span&gt;
&lt;span class="s"&gt; start)&lt;/span&gt;
&lt;span class="s"&gt;  start&lt;/span&gt;
&lt;span class="s"&gt;  ;;&lt;/span&gt;
&lt;span class="s"&gt; stop)&lt;/span&gt;
&lt;span class="s"&gt;  stop&lt;/span&gt;
&lt;span class="s"&gt;  ;;&lt;/span&gt;
&lt;span class="s"&gt; restart|reload)&lt;/span&gt;
&lt;span class="s"&gt;  stop&lt;/span&gt;
&lt;span class="s"&gt;  start&lt;/span&gt;
&lt;span class="s"&gt;  RETVAL=$?&lt;/span&gt;
&lt;span class="s"&gt;  ;;&lt;/span&gt;
&lt;span class="s"&gt; status)&lt;/span&gt;
&lt;span class="s"&gt;  status $prog&lt;/span&gt;
&lt;span class="s"&gt;  RETVAL=$?&lt;/span&gt;
&lt;span class="s"&gt;  ;;&lt;/span&gt;
&lt;span class="s"&gt; *)&lt;/span&gt;
&lt;span class="s"&gt;  echo $&amp;quot;Usage: $0 {start|stop|restart|status}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  exit 1&lt;/span&gt;
&lt;span class="s"&gt;esac&lt;/span&gt;
&lt;span class="s"&gt;exit $RETVAL&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

touch /usr/local/bin/start-memcached
chmod +x /usr/local/bin/start-memcached

cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /usr/local/bin/start-memcached&lt;/span&gt;
&lt;span class="s"&gt;#!/usr/bin/perl -w&lt;/span&gt;
&lt;span class="s"&gt;# start-memcached&lt;/span&gt;
&lt;span class="s"&gt;# 2003/2004 - Jay Bonci &amp;lt;jaybonci@debian.org&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;# This script handles the parsing of the /etc/memcached.conf file&lt;/span&gt;
&lt;span class="s"&gt;# and was originally created for the Debian distribution.&lt;/span&gt;
&lt;span class="s"&gt;# Anyone may use this little script under the same terms as&lt;/span&gt;
&lt;span class="s"&gt;# memcached itself.&lt;/span&gt;
&lt;span class="s"&gt;use strict;&lt;/span&gt;
&lt;span class="s"&gt;if ($&amp;gt; != 0 and $&amp;lt; != 0) {&lt;/span&gt;
&lt;span class="s"&gt; print STDERR &amp;quot;Only root wants to run start-memcached.\n&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt; exit;&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;my $etcfile = shift || &amp;quot;/etc/memcached.conf&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt;my $params = [];&lt;/span&gt;
&lt;span class="s"&gt;my $etchandle;&lt;/span&gt;
&lt;span class="s"&gt;# This script assumes that memcached is located at /usr/bin/memcached, and&lt;/span&gt;
&lt;span class="s"&gt;# that the pidfile is writable at /var/run/memcached.pid&lt;/span&gt;
&lt;span class="s"&gt;my $memcached = &amp;quot;/usr/local/bin/memcached&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt;my $pidfile = &amp;quot;/var/run/memcached.pid&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt;# If we don&amp;#39;t get a valid logfile parameter in the /etc/memcached.conf file,&lt;/span&gt;
&lt;span class="s"&gt;# we&amp;#39;ll just throw away all of our in-daemon output. We need to re-tie it so&lt;/span&gt;
&lt;span class="s"&gt;# that non-bash shells will not hang on logout. Thanks to Michael Renner for&lt;/span&gt;
&lt;span class="s"&gt;# the tip&lt;/span&gt;
&lt;span class="s"&gt;my $fd_reopened = &amp;quot;/dev/null&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt;sub handle_logfile {&lt;/span&gt;
&lt;span class="s"&gt; my ($logfile) = @_;&lt;/span&gt;
&lt;span class="s"&gt; $fd_reopened = $logfile;&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;sub reopen_logfile {&lt;/span&gt;
&lt;span class="s"&gt; my ($logfile) = @_;&lt;/span&gt;
&lt;span class="s"&gt; open *STDERR, &amp;quot;&amp;gt;&amp;gt;$logfile&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt; open *STDOUT, &amp;quot;&amp;gt;&amp;gt;$logfile&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt; open *STDIN, &amp;quot;&amp;gt;&amp;gt;/dev/null&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt; $fd_reopened = $logfile;&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;# This is set up in place here to support other non -[a-z] directives&lt;/span&gt;
&lt;span class="s"&gt;my $conf_directives = {&lt;/span&gt;
&lt;span class="s"&gt; &amp;quot;logfile&amp;quot; =&amp;gt; \&amp;amp;handle_logfile&lt;/span&gt;
&lt;span class="s"&gt;};&lt;/span&gt;
&lt;span class="s"&gt;if (open $etchandle, $etcfile) {&lt;/span&gt;
&lt;span class="s"&gt; foreach my $line (&amp;lt;$etchandle&amp;gt;) {&lt;/span&gt;
&lt;span class="s"&gt;  $line =~ s/\#.*//go;&lt;/span&gt;
&lt;span class="s"&gt;  $line = join &amp;#39; &amp;#39;, split &amp;#39; &amp;#39;, $line;&lt;/span&gt;
&lt;span class="s"&gt;  next unless $line;&lt;/span&gt;
&lt;span class="s"&gt;  next if $line =~ /^\-[dh]/o;&lt;/span&gt;
&lt;span class="s"&gt;  if ($line =~ /^[^\-]/o) {&lt;/span&gt;
&lt;span class="s"&gt;   my ($directive, $arg) = $line =~ /^(.*?)\s+(.*)/;&lt;/span&gt;
&lt;span class="s"&gt;   $conf_directives-&amp;gt;{$directive}-&amp;gt;($arg);&lt;/span&gt;
&lt;span class="s"&gt;   next;&lt;/span&gt;
&lt;span class="s"&gt;  }&lt;/span&gt;
&lt;span class="s"&gt;  push @$params, $line;&lt;/span&gt;
&lt;span class="s"&gt; }&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;unshift @$params, &amp;quot;-u root&amp;quot; unless (grep $_ eq &amp;#39;-u&amp;#39;, @$params);&lt;/span&gt;
&lt;span class="s"&gt;$params = join &amp;quot; &amp;quot;, @$params;&lt;/span&gt;
&lt;span class="s"&gt;if (-e $pidfile) {&lt;/span&gt;
&lt;span class="s"&gt; open PIDHANDLE, &amp;quot;$pidfile&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt; my $localpid = &amp;lt;PIDHANDLE&amp;gt;;&lt;/span&gt;
&lt;span class="s"&gt; close PIDHANDLE;&lt;/span&gt;
&lt;span class="s"&gt; chomp $localpid;&lt;/span&gt;
&lt;span class="s"&gt; if (-d &amp;quot;/proc/$localpid&amp;quot;) {&lt;/span&gt;
&lt;span class="s"&gt;  print STDERR &amp;quot;memcached is already running.\n&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt;  exit;&lt;/span&gt;
&lt;span class="s"&gt; } else {&lt;/span&gt;
&lt;span class="s"&gt;  `rm -f $localpid`;&lt;/span&gt;
&lt;span class="s"&gt; }&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;my $pid = fork();&lt;/span&gt;
&lt;span class="s"&gt;if ($pid == 0) {&lt;/span&gt;
&lt;span class="s"&gt; reopen_logfile($fd_reopened);&lt;/span&gt;
&lt;span class="s"&gt; exec &amp;quot;$memcached $params&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt; exit(0);&lt;/span&gt;
&lt;span class="s"&gt;} elsif (open PIDHANDLE,&amp;quot;&amp;gt;$pidfile&amp;quot;) {&lt;/span&gt;
&lt;span class="s"&gt; print PIDHANDLE $pid;&lt;/span&gt;
&lt;span class="s"&gt; close PIDHANDLE;&lt;/span&gt;
&lt;span class="s"&gt;} else {&lt;/span&gt;
&lt;span class="s"&gt; print STDERR &amp;quot;Can&amp;#39;t write pidfile to $pidfile.\n&amp;quot;;&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

/etc/init.d/memcached restart
/sbin/chkconfig memcached on
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="linux"></category><category term="memcached"></category><category term="RHEL5"></category><category term="install"></category><category term="script"></category></entry><entry><title>Installing Mercurial 1.5.1 on Red Hat Enterprise Linux 5 (RHEL5) using Python 2.5</title><link href="http://kencochrane.net/blog/2010/05/mercurial-1_5_1-on-RHEL5-using-python2_5/" rel="alternate"></link><updated>2010-05-13T20:09:33-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2010-05-13:blog/2010/05/mercurial-1_5_1-on-RHEL5-using-python2_5/</id><summary type="html">&lt;div class="section" id="installing-mercurial-1-5-1-on-red-hat-enterprise-linux-5-rhel5-using-python-2-5"&gt;
&lt;h2&gt;Installing Mercurial 1.5.1 on Red Hat Enterprise Linux 5 (RHEL5) using Python 2.5&lt;/h2&gt;
&lt;p&gt;My RHEL5 setup uses python2.5 which I compiled from source, since RHEL5 only comes with python2.4.&lt;/p&gt;
&lt;p&gt;Because I didn't use the built in python 2.4 version I couldn't do the simple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yum install mercurial
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead I need to build mercurial from source, which isn't too bad. Just do the following.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;as Root&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget http://mercurial.selenic.com/release/mercurial-1.5.1.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;tar -xvzf mercurial-1.5.1.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;mercurial-1.5.1
&lt;span class="nv"&gt;$ &lt;/span&gt;make &lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;python2.5 install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you get the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python2.5 setup.py build
&lt;span class="nv"&gt;$ &lt;/span&gt;Couldn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t import standard bz2 &lt;span class="o"&gt;(&lt;/span&gt;incomplete Python install&lt;span class="o"&gt;)&lt;/span&gt;.
     make:  &lt;span class="o"&gt;[&lt;/span&gt;build&lt;span class="o"&gt;]&lt;/span&gt; Error 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then when you installed python 2.5 you didn't have the bzip2 libs installed so it didn't include them in the python2.5 install. No big deal all you need to do is install those libs and then recomplile python 2.5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;install bzip2 libs&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yum install bzip2 bzip2-devel bzip2-libs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Download 2.5.4 from python.org&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget http://python.org/ftp/python/2.5.4/Python-2.5.4.tar.bz2
&lt;span class="nv"&gt;$ &lt;/span&gt;tar -xvjf Python-2.5.4.tar.bz2
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;Python-2.5.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;switch to root:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./configure
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;make altinstall
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once complete (this will take a few minutes) rerun the steps above and then you should be good.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;go back to where you untared the mercurial bundle&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;mercurial-1.5.1
&lt;span class="nv"&gt;$ &lt;/span&gt;make &lt;span class="nv"&gt;PYTHON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;python2.5 install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check to make sure you are running 1.5.1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hg --version
     Mercurial Distributed SCM &lt;span class="o"&gt;(&lt;/span&gt;version 1.5.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is all, now you are running Mercurial 1.5.1 on RHEL5 with python2.5!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mercurial"></category><category term="RHEL5"></category><category term="python"></category><category term="linux"></category></entry></feed>