<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>KenCochrane.net</title><link href="http://kencochrane.net/" rel="alternate"></link><link href="http://kencochrane.net/feeds/tag_deployment.atom.xml" rel="self"></link><id>http://kencochrane.net/</id><updated>2012-03-23T14:58:01-04:00</updated><entry><title>Deploying my Django application to dotCloud: Part 2</title><link href="http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/" rel="alternate"></link><updated>2012-03-23T14:58:01-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2012-03-23:blog/2012/03/deploying-a-django-application-on-dotcloud/</id><summary type="html">&lt;p&gt;As I mentioned in a &lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/"&gt;recent blog post&lt;/a&gt;, in the 11 months since I wrote my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;first post on dotCloud&lt;/a&gt;, I now work there. Besides me working there, there has been a lot of other changes at &lt;a class="reference external" href="http://www.dotcloud.com"&gt;dotCloud&lt;/a&gt;, and I wanted to take the time to update my original post so that it was up to date and had all the recent information. I'm going to completely rewrite the old blog post here, with updated information, and leave the old one around for posterity.&lt;/p&gt;
&lt;p&gt;dotCloud's goal is to provide a bunch of different independent services that you can use as building blocks to build your application. If you need a database, take your pick from one of the many they support. Need an application that uses Django or Rails on the front end, and Java in the backend, that is fine, you can do that too. They realize that most developers don't stick to one standard technology stack for all of their applications, so this allows you the flexibility to use the best tool for the job. It also gives you a nice playground to try out new services and see how they run without having to install, configure and maintain the service just for testing.&lt;/p&gt;
&lt;p&gt;I'm going to go over the steps that it took to install my blog onto dotCloud, and hopefully answer some common questions along the way.&lt;/p&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Before I get started with any new service the first thing I usually do is look at the documentation. DotCloud has a nice list of documents along with some tutorials on how to get started. These 4 documents were the ones that I used the most.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/platform-overview/"&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/python/django/"&gt;http://docs.dotcloud.com/tutorials/python/django/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/services/mysql/"&gt;http://docs.dotcloud.com/services/mysql/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/services/mysql-masterslave/"&gt;http://docs.dotcloud.com/services/mysql-masterslave/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-steps"&gt;
&lt;h2&gt;First Steps:&lt;/h2&gt;
&lt;p&gt;Like all cool services these days, dotCloud uses a python based CLI, so before we can get started we need to install the dotCloud client and configure it so that we can start using it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# create my dotcloud virtual environment.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv dotcloud

&lt;span class="c"&gt;# install dotcloud client using pip&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install dotcloud

&lt;span class="c"&gt;# create our application called blog&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud create blog

&lt;span class="c"&gt;#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted&lt;/span&gt;
&lt;span class="c"&gt;#&amp;lt;key goes here&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;# if you were not prompted to enter your key you can run this command, and it will let you enter your API key again.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud register
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the client all setup, and an application created, now we can start building our service. I have forked my blog repository on github so that I could make dotCloud specific changes to it and not effect my original repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# go into projects directory&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects

&lt;span class="c"&gt;# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally&lt;/span&gt;
git clone git://github.com/kencochrane/kencochranenet_dotcloud.git kencochranenet_dotcloud

&lt;span class="c"&gt;# go into the new directory.&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading through the documentation tells me that I need to create a wsgi.py file and put in the root of my project. Using &lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/python/django/#wsgi-py"&gt;http://docs.dotcloud.com/tutorials/python/django/#wsgi-py&lt;/a&gt; as a template, I created my wsgi.py file below. I had issues with the default template and I needed to add a directory to the sys.path so that wsgi could find my django apps correctly. Here is my finished file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c"&gt;# Ken added this, only thing that is different from the example template (not counting settings file name)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysite.settings&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt;
&lt;span class="n"&gt;djangoapplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;djangoapplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DotCloud uses &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/#requirements-files"&gt;PIP requirements files&lt;/a&gt; to manage your project dependencies. We already have our pip requirements file where it needs to be and named correctly so we don't need to do anything, but if we didn't have one, we would need to create one and put it in the root, and call it requirements.txt&lt;/p&gt;
&lt;div class="section" id="services"&gt;
&lt;h3&gt;Services&lt;/h3&gt;
&lt;p&gt;When we add a service to our deployment stack, dotCloud gives us the appropriate connection information in a file called '/home/dotcloud/environment.json' that is available to us on our deployment container. This allows us to not have to hard code username/password and server urls in our settings.py file, and it also makes it a little more secure for us since we don't have to have that info in our source repository.&lt;/p&gt;
&lt;p&gt;This is how we use it. At the top of your settings.py file you will need to add the following. snippet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/home/dotcloud/environment.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have that added to the settings.py file, we now have a variable env that has all of the env settings we need.&lt;/p&gt;
&lt;p&gt;You could go a little further add some custom code to check if the environment.json file exists, and if it does, you know you are in production, so use that setup, or if not, then you must be in local mode, so use your local settings. If you want to get really cool, you can have your own json file that has a similar setup for local development, and if it doesn't find the dotcloud one, it could look for your own, and load your settings from that. This will allow you to use the same settings file for both production and dev, with only a little bit of code at the top to load the correct env file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;p&gt;Most applications need a database, and this blog is no different. This is how we setup our database to work with our blog on dotcloud. We are going to be using mysql for our database. With Django you need to set your database settings in your settings.py. This is how we setup a mysql database connection inside of our settings.py. Notice that the name of the database doesn't come from the env, you pick that yourself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blogdb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_LOGIN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-the-database"&gt;
&lt;h3&gt;Create the Database&lt;/h3&gt;
&lt;p&gt;dotCloud gives you your own dedicated database, with full root access. With great power comes great responsibilities. One of those responsibilities is that you need to create your own database schemas, and users yourself. Which means you normally need to do something like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# connect to dotcloud mysql server instance&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run blog.db -- mysql -u root -p

&lt;span class="c"&gt;# mysql -u root -p&lt;/span&gt;
Enter password:
Welcome to the MySQL monitor.  Commands end with &lt;span class="p"&gt;;&lt;/span&gt; or &lt;span class="se"&gt;\g&lt;/span&gt;.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# create the user and database and give user permissions to database.&lt;/span&gt;

Type &lt;span class="s1"&gt;&amp;#39;help;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;\h&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; help. Type &lt;span class="s1"&gt;&amp;#39;\c&amp;#39;&lt;/span&gt; to clear the current input statement.

mysql&amp;gt; create database blogdb&lt;span class="p"&gt;;&lt;/span&gt;
Query OK, &lt;span class="m"&gt;1&lt;/span&gt; row affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; create user &lt;span class="s1"&gt;&amp;#39;blog_username&amp;#39;&lt;/span&gt; identified by &lt;span class="s1"&gt;&amp;#39;strong_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
Query OK, &lt;span class="m"&gt;0&lt;/span&gt; rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.05 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; grant all on blogdb.* to &lt;span class="s1"&gt;&amp;#39;blog_user&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
Query OK, &lt;span class="m"&gt;0&lt;/span&gt; rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.04 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; flush privileges&lt;span class="p"&gt;;&lt;/span&gt;
Query OK, &lt;span class="m"&gt;0&lt;/span&gt; rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;Bye
Shared connection to database closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Does that look familiar? I have it here in case you want to do it the long way.&lt;/p&gt;
&lt;p&gt;To make things easier, we are going to create a small python script that will check to see if we have our database created, and if not, it will create it for us. This will make it so that we don't have to login into our database and do it by hand before we deploy. The file is called createdb.py and this is what it looks like. This script is for mysql. If you want a postgreSQL database, you can use this as a template and change it so that it will work with postgreSQL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_dbs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs: let&amp;#39;s go.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;django_settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;__import__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fromlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DATABASES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs: got settings.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;databases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;databases&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;db_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;creating database &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; on &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Check if database is already there.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA&lt;/span&gt;
&lt;span class="s"&gt;                         WHERE SCHEMA_NAME = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
            &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Database &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; doesn&amp;#39;t exist, lets create it.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;CREATE DATABASE IF NOT EXISTS &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.....&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database already exists, moving on to next step.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;create_dbs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs all done&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-a-cache"&gt;
&lt;h3&gt;Adding a cache&lt;/h3&gt;
&lt;p&gt;Since most of the blog content doesn't change much, it is a great candidate for caching. So we are going to take advantage of Django's built in caching abilities and add some caching to our blog. Normally I use &lt;a class="reference external" href="http://memcached.org"&gt;memcached&lt;/a&gt; for my caching, but dotCloud's memcached support is limited right now. The reason why it is limited is because memcached doesn't have any built in authentication mechanism, and in order to make sure it is secure, you need to run a special version of memcached that supports &lt;a class="reference external" href="http://code.google.com/p/memcached/wiki/SASLAuthProtocol"&gt;SASL&lt;/a&gt;, and most of the memcached clients don't support this. So instead of deploying an insecure service, they decided to not support it fully. There are ways to use it, but it involves all kind of complicated firewall rules and running something like stunnel. So it is possible, but it isn't very clean.&lt;/p&gt;
&lt;p&gt;Instead they recommend that you use &lt;a class="reference external" href="http://redis.io"&gt;redis&lt;/a&gt; instead, redis has the same caching abilities that memcached has, plus a lot more, including authentication. So we are going to use redis for our cache. In order to use redis, we will need to add the redis library because redis caching support isn't built into Django. In your requirements.txt file you will need to add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-redis==1.4.5&lt;/span&gt;&lt;/tt&gt; so that the libraries will be available for Django to use.&lt;/p&gt;
&lt;p&gt;Once you have the library installed, you will need to add these settings to your settings.py file so that django knows which redis server and password to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;redis_cache.cache.RedisCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;LOCATION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_CACHE_REDIS_HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_CACHE_REDIS_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;DB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_CACHE_REDIS_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PARSER_CLASS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;redis.connection.HiredisParser&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# we also are going to use redis for our session cache as well.&lt;/span&gt;
&lt;span class="n"&gt;SESSION_ENGINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.sessions.backends.cached_db&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information about using redis as your cache for Django, check out these links.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/niwibe/django-redis"&gt;https://github.com/niwibe/django-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-redis/1.4.5"&gt;http://pypi.python.org/pypi/django-redis/1.4.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.3/topics/cache/"&gt;https://docs.djangoproject.com/en/1.3/topics/cache/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://answers.dotcloud.com/question/213/redis-cache-settings-for-django"&gt;http://answers.dotcloud.com/question/213/redis-cache-settings-for-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="django-admin"&gt;
&lt;h3&gt;Django Admin&lt;/h3&gt;
&lt;p&gt;We also need an easy way to create our django admin account for us. In order to do that I have this mkadmin.py script. This will default the password to &lt;a class="reference external" href="mailto:'P&amp;#64;s$w0rd1"&gt;'P&amp;#64;s$w0rd1&lt;/a&gt;', once you have your code installed, you will need to login to the admin account and change your password to something more secure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;P@s$w0rd1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_superuser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_staff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="media"&gt;
&lt;h3&gt;Media&lt;/h3&gt;
&lt;p&gt;We need to put our static and media files in the following locations: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;static=/home/dotcloud/data/static/&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;media=/home/dotcloud/data/media/&lt;/span&gt;&lt;/tt&gt;. Because of this we need to make sure we change our settings.py file, and setup an nginx.conf file to map to the correct locations. Here are the settings.py file changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# media settings&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dotcloud/data/media/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/media/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# static settings&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dotcloud/data/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# admin prefix&lt;/span&gt;
&lt;span class="n"&gt;ADMIN_MEDIA_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/admin/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the nginx.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/media/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/home/dotcloud/data&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/home/dotcloud/data&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="post-install"&gt;
&lt;h3&gt;Post Install&lt;/h3&gt;
&lt;p&gt;We are going to create a &lt;a class="reference external" href="http://docs.dotcloud.com/guides/postinstall/"&gt;postinstall&lt;/a&gt; script to handle all of the tasks we need to do after we install our code on the server. This is what will call our createdb.py, and mkadmin.py files from above, as well as syncing our database, running migrations and running collectstatic to move all static files into the right locations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
python createdb.py default
python mysite/manage.py syncdb --noinput
python mysite/manage.py migrate
python mkadmin.py
mkdir -p /home/dotcloud/data/media /home/dotcloud/data/static
python mysite/manage.py collectstatic --noinput
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to make sure your postinstall, createdb.py and mkadmin.py scripts are executable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make the script executable.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;chmod +x postinstall createdb.py mkadmin.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dotcloud-yml"&gt;
&lt;h3&gt;dotcloud.yml&lt;/h3&gt;
&lt;p&gt;Now that we have our application's project structure all setup and configured the way dotCloud wants it, we can configure our deployment stack. This is done with a file called dotcloud.yml. For more information about the dotcloud.yml file check out this link: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/build-file/"&gt;http://docs.dotcloud.com/guides/build-file/&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;www&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;db&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mysql&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;cache&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is telling us that we want 3 services, a python www service, a mysql db service, and a redis cache service. This is a very basic setup, and you can get a lot more complicated depending on what you want to achieve. Notice that this isn't setup for high availability because none of the instances are scaled. See the section about scaling below for more information. If you are running in a production app on dotCloud it is recommended that you scale all of your services so that they can withstand EC2 server crashes, and other unforeseen issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further it is important to know the following. Dotcloud will pay attention to your .gitignore files. If you have a settings file in your .gitignore file so that it doesn't get saved in the repo, it will not push those changes up to the cloud. You will need to remove it from the .gitignore in order to get those files out there. It is also import to remember that only changes that are committed are pushed, so don't forget to commit your changes. If you wanted to be tricky you could use a post install script to pull down the file from a secure location and install it that way, if you want to make things super secure.&lt;/p&gt;
&lt;p&gt;Everything is all setup, so all we have to do is push our application to dotCloud.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# push out your changes to the server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push blog .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service-info"&gt;
&lt;h3&gt;Service info&lt;/h3&gt;
&lt;p&gt;Once you push your code to dotCloud you can see what it looks like by running the info command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# get the information about our new services&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud info blog
cache:
    config:
        redis_password: &amp;lt;password&amp;gt;
        redis_replication: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;instances: 1
    &lt;span class="nb"&gt;type&lt;/span&gt;: redis
db:
    config:
        mysql_masterslave: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;        &lt;/span&gt;mysql_password: &amp;lt;password&amp;gt;
    instances: 1
    &lt;span class="nb"&gt;type&lt;/span&gt;: mysql
www:
    config:
        static: static
        uwsgi_processes: 4
    instances: 1
    &lt;span class="nb"&gt;type&lt;/span&gt;: python
    url: &amp;lt;url was here&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="scaling"&gt;
&lt;h3&gt;Scaling&lt;/h3&gt;
&lt;p&gt;Scaling is the ability to grow your application so that it can handle more traffic, or possible failures that might occur. With a normal non PaaS setup, scaling an application can be quite painful and time consuming, but with a PaaS it can be as easy as running a few commands. There are three types of scaling, Vertical, Horizontal, High Availability.&lt;/p&gt;
&lt;p&gt;Vertical scaling, means growing the service you have now so that it can get bigger. This is popular with databases, the bigger a database gets the more space and memory it needs.&lt;/p&gt;
&lt;p&gt;Horizontal scaling means creating more then one instance of a service so it spread the work between the different services, giving you greater capacity.&lt;/p&gt;
&lt;p&gt;High Availability means that you have more then one service running at a time, so that if one of the services has an issue, the other one will pick up the slack. This will help avoid downtime, when failures occur (EC2 instance crashes). Ideally when running in production, all of your services should be scaled for High Availability.&lt;/p&gt;
&lt;p&gt;There are two kinds of services, stateful, and stateless. Stateful services are services that holds persistent data. Examples of stateful services are mysql, redis, postgresql, solr, MongoDB and RabbitMQ.&lt;/p&gt;
&lt;p&gt;Horizontally High availability scaling a stateful service on dotCloud means creating a master/slave setup, which can switch the slave with the master automatically if the master has any issues. dotCloud supports HA scaling on MySQL, redis, and MongoDB.&lt;/p&gt;
&lt;p&gt;Stateful services scale like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mysql : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;redis : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;mongodb : 3 or 5 (using replica sets)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scaling a stateless and one of the supported stateful services is the same. You would just run the scale command line command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud scale app &lt;span class="nv"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For stateless applications, you are limited to a set number of scaling units, unless you are on the enterprise plan. If you need to have an application with lots of scale units, you should contact dotCloud, and let them know what you are planning to do, and they will advise you on how best to accomplish your goals.&lt;/p&gt;
&lt;p&gt;Link: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/scaling/"&gt;http://docs.dotcloud.com/guides/scaling/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database-backups"&gt;
&lt;h3&gt;Database Backups&lt;/h3&gt;
&lt;p&gt;Just because you are hosting your application on dotCloud doesn't mean you shouldn't backup your data. The most important data to backup is your database. Luckily dotCloud makes it easy to back up your database. There is a very helpful guide on how to setup your database backups here: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/backups/"&gt;http://docs.dotcloud.com/guides/backups/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="email"&gt;
&lt;h3&gt;Email&lt;/h3&gt;
&lt;p&gt;If you need to send or receive email from your application, you can do that to. Because dotCloud runs on EC2, and EC2 is a popular place where SPAMMERS send SPAM from, it is best to use a 3rd party email provider to send your emails for you. Popular ones are &lt;a class="reference external" href="http://mailgun.net/"&gt;MailGun&lt;/a&gt;, &lt;a class="reference external" href="http://sendgrid.com/"&gt;SendGrid&lt;/a&gt;, &lt;a class="reference external" href="http://www.critsend.com/"&gt;CritSend&lt;/a&gt;, and &lt;a class="reference external" href="http://aws.amazon.com/ses/"&gt;Amazon SES&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can set this up a couple of different ways. The first way is the easiest way possible, it allows you to configure the SMTP settings for each service. You would do it like this (see below). You can manually set the smtp settings for that service, and when your application needs to send an email it will use those settings. This is the most simple setup, but there are downsides to this approach. You would need to set this for each service, if you have more then one that will be duplicated everywhere. Also if you want to change your settings, you will need to destroy your service and recreate it, since those configs can only be set once when the service is created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;www&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp.mailgun.org&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;25&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postmaster@company.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;YourMailGunPassword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A better approach would be to use dotCloud's SMTP service. The SMTP service is built to receive emails from your services and forward them to the appropriate location. It is best to use a 3rd party email provider, but you can also use the typical poor mans solution, where you use gmail to send your emails. Be careful when using gmail, because you aren't aloud to send a lot of emails via gmail, once you hit your daily limit you will be blocked, so this is fine for a few emails a day, don't trust it for everyday stuff. Also, the emails will always be coming from your gmail address, fine for system emails, but not if you are trying to run a legit business.&lt;/p&gt;
&lt;p&gt;Here is an example using mailgun.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;mailer&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp.mailgun.org&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;587&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postmaster@yourmailgundomain.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;YourMailgunPassword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is an example using gmail.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;mailer&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp.gmail.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;587&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;your_gmail_username@gmail.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Your_Gmail_Password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have these all setup, they will be available in your environment.json file.&lt;/p&gt;
&lt;p&gt;If you want to receive email, it is best to use a service like &lt;a class="reference external" href="http://mailgun.net/"&gt;MailGun&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/guides/emails/"&gt;http://docs.dotcloud.com/guides/emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/services/smtp/"&gt;http://docs.dotcloud.com/services/smtp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cron-jobs"&gt;
&lt;h3&gt;Cron jobs&lt;/h3&gt;
&lt;p&gt;If your app needs to run cron jobs, follow the steps in this guide: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/periodic-tasks/"&gt;http://docs.dotcloud.com/guides/periodic-tasks/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="celery"&gt;
&lt;h3&gt;Celery&lt;/h3&gt;
&lt;p&gt;This blog doesn't really have a need for celery, but dotCloud does support it. For more information follow this link: &lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/python/django-celery/"&gt;http://docs.dotcloud.com/tutorials/python/django-celery/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="s3fs"&gt;
&lt;h3&gt;S3FS&lt;/h3&gt;
&lt;p&gt;If you store data on s3 you can mount your s3 bucket so that you can have access to s3 from your application, just like it was a local directory on your container. This is helpful for storing files that are uploaded by your visitors, or to share files between different web processes. Follow these instructions to set it up: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/s3fs/"&gt;http://docs.dotcloud.com/guides/s3fs/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="logs"&gt;
&lt;h3&gt;Logs&lt;/h3&gt;
&lt;p&gt;If you need to look at the logs to see how it is going you can do it two ways. The first way will tail your logs for you to your console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud logs blog.www
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Open up a shell&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud ssh blog.www
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# nginx access and error logs.&lt;/span&gt;
/var/log/nginx/&amp;lt;app_name&amp;gt;.&lt;span class="o"&gt;{&lt;/span&gt;access,error&lt;span class="o"&gt;}&lt;/span&gt;.log

&lt;span class="c"&gt;# wsgi error logs&lt;/span&gt;
/var/log/supervisor/uswgi.log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="restart-service"&gt;
&lt;h3&gt;Restart Service&lt;/h3&gt;
&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# restart the service&lt;/span&gt;
dotcloud restart blog.www
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="links"&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.dotCloud.com"&gt;http://www.dotCloud.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="dotcloud"></category><category term="django"></category><category term="paas"></category><category term="python"></category><category term="hosting"></category><category term="deployment"></category></entry><entry><title>Standardizing Python WSGI deployment</title><link href="http://kencochrane.net/blog/2011/12/standardizing-python-wsgi-deployment/" rel="alternate"></link><updated>2011-12-30T13:49:26-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-12-30:blog/2011/12/standardizing-python-wsgi-deployment/</id><summary type="html">&lt;p&gt;Over the past year I have been testing all of the new python platform as a service companies that have popped up, and I have posted my notes on my blog so that everyone can learn from my experiences.  &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;dotcloud.com&lt;/a&gt;, &lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/"&gt;Heroku&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;All and all, the platforms were very similar, they allowed you to easily host your python/django project without having to worry about managing a server or other typical system administration duties. Some of the services were more advanced and had more features then others, but since it was still early in the game, that was expected.&lt;/p&gt;
&lt;p&gt;The one thing that was different between each service was the way that you have your python project setup.  This might not seem like a big deal, but because of the little differences between providers it required me to change my test project every time I wanted to test out a new providers service. These little changes weren't a big deal for me, but it could be a barrier of entry for less technical people. It also makes it harder for someone to change services if they wanted. This probably sounds like a good idea to the platform providers because it makes it a little harder for people to leave their service, but I don't think that was their intention. Looking at the different platforms, and their implementations, you can see they all make sense, and it was just their own way of solving a problem because there was no standard available.&lt;/p&gt;
&lt;p&gt;Before I started programmed in python, I came from a Java background. In Java they have already solved the deployment problem with their WAR files. For those of you that aren't familiar with Java or WAR files, basically WAR files are just java projects that are laid out in a common directory structure, with a few required configuration files (web.xml, etc) that the application server uses when deploying the application. This directory structure is then zipped up for easy portability. All of the different Java application servers know how to read these files and deploy the applications. It makes installing applications really easy, and if you ever need to change application servers, it shouldn't require any changes at all, assuming you stuck with the standard format. &lt;a class="reference external" href="http://en.wikipedia.org/wiki/WAR_file_format_(Sun)"&gt;Java WAR files on Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was lucky enough to attend DjangoCon US 2011 in Portland Oregon this year. At the conference there was a Django Hosting Panel moderated by Sean O'Connor where the different hosting providers were asked questions about their platforms. If you didn't get a chance to see it, it is available on blip.tv here. &lt;a class="reference external" href="http://blip.tv/djangocon/django-hosting-panel-5572201"&gt;http://blip.tv/djangocon/django-hosting-panel-5572201&lt;/a&gt; &lt;em&gt;Fun Fact: That is me in the front row with the blue shirt and green hat.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;During the panel, Sean asked if there was any plans for working on interoperability between the different platforms. Andrew Godwin referenced Java's WAR format and also talked about how he has already started to talk to others about this idea at DjangoCon EU and would like to see it move forward. The others in the panel seemed to agree that something could be done, but it didn't seem like it was urgent to them, or if they really cared/wanted to do it. I can understand their reluctance, because I'm sure they have more important things to work on, and this would be very low on their list of things to do. After all whatever comes from this, is going to require changes to their platform in order to support it.&lt;/p&gt;
&lt;p&gt;That is why I think we (the developer community), need to come up with a standard, propose it to the rest o the python community, with input from the different platform providers, and then leave it up to the different providers to decide if they are going to support it or not. It would be great if everyone supported it, but because this isn't going to make anyone money in the short term, it will be hard to force anyone to do it.&lt;/p&gt;
&lt;p&gt;I'm willing to help to create the standard, but where do we start, and whom do we submit the proposal too, the PSF?&lt;/p&gt;
&lt;p&gt;I think the easiest place to start would be to look at the different platforms and find out what they have in common, and go from there. Off the top of my head, I'm pretty sure they all support virtualenv and pip for requirements. They are also all wsgi based, but I think that is where the commonality stops.&lt;/p&gt;
&lt;p&gt;For example they all have a different way for specifying application settings. ep.io has an ini file, dotcloud has a yml file, and gondor has a .gondor/config file. It shouldn't be too hard to come up with a standard format with sane attributes.&lt;/p&gt;
&lt;p&gt;We could probably all agree on a common project structure, and where to put the common files (requirements.txt for pip requirements and put it in the root of the project, etc.).&lt;/p&gt;
&lt;p&gt;Something that will be important is to make the standard solid but flexible. Since all of these platforms are a little different we will need to allow some way for them to have a custom section or file that will be platform dependent, so that they can extend the standard without breaking it. These extensions won't be supported by everyone, but it will allow the platform providers the flexibility to move forward without getting held back with a standard process which is normally a slow process.&lt;/p&gt;
&lt;p&gt;That is also why versioning is important, make sure it is obvious which version of the standard the application is using, so that it doesn't break as changes in the standard are made in the future.&lt;/p&gt;
&lt;p&gt;As you can see, with a little bit of effort I have a nice start, but where do we go from here? What do you think, is this a good idea? Do you want to help move it forward? Post some comments below, and lets continue this discussion into 2012.&lt;/p&gt;
</summary><category term="python"></category><category term="deployment"></category><category term="hosting"></category></entry><entry><title>Developers guide to Running Django Applications on Heroku</title><link href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/" rel="alternate"></link><updated>2011-11-30T10:00:00-05:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-11-30:blog/2011/11/developers-guide-for-running-django-apps-on-heroku/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://Heroku.com"&gt;Heroku&lt;/a&gt; the platform as a service (PAAS) company, very popular in the Ruby on Rails community, has now started opening up their platform to languages besides Ruby. They now offer support for Python, Java, Clojure, Node.js, and Scala on their new Cedar stack. Heroku's Cedar stack is still in beta, but that shouldn't stop you from trying it out, and that is just what I'm going to do.&lt;/p&gt;
&lt;p&gt;6 months ago I wrote a series of blog posts that reviewed all of the cool new django hosting services that were popping up. My goal was to look at them all, and compare them to find out what they had to offer, and to see if I could use them on my future projects. I'm going to review Heroku using the same process that I used to review those other services, so that I can we can compare apples to apples.&lt;/p&gt;
&lt;p&gt;For those of you who are not familiar with my other blog posts, feel free to check them out now &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;dotcloud.com&lt;/a&gt;, &lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those of you that are lazy, I'll sum it up pretty quickly. What I'm trying to do is pretty simple, I sign up for the service, and just looking at the documentation available, can I get my blog application up and running, and what did I have to do, in order for it to work. I'll describe each step along the way, as a helpful guide for others who might be trying to do the same with their application. If I come across an error, I will tell you what the error was, and how I fixed it, so that if you get the same error, hopefully what I did to fix my problem, will also fix yours.&lt;/p&gt;
&lt;div class="section" id="heroku-django-documentation"&gt;
&lt;h2&gt;Heroku Django Documentation&lt;/h2&gt;
&lt;p&gt;Before you start using any new platform, you should take the time to read the documentation. I know it doesn't sound like fun,but trust me, it will save you a lot of pain and frustration later on. Here are some links that I found helpful.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Quickstart guide&lt;/strong&gt;: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/quickstart"&gt;http://devcenter.heroku.com/articles/quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python articles&lt;/strong&gt;: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/python"&gt;http://devcenter.heroku.com/articles/python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django article&lt;/strong&gt;: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/django"&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dev Center&lt;/strong&gt;: &lt;a class="reference external" href="http://devcenter.heroku.com/"&gt;http://devcenter.heroku.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Heroku account&lt;/li&gt;
&lt;li&gt;Heroku command line client&lt;/li&gt;
&lt;li&gt;Python 2.7, virtualenv, pip, git&lt;/li&gt;
&lt;li&gt;Must use pip to manage dependencies with a requirements.txt file&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="signing-up-for-heroku"&gt;
&lt;h2&gt;Signing up for Heroku&lt;/h2&gt;
&lt;p&gt;Signing up was as simple as can be, all I needed to do was follow this link: &lt;a class="reference external" href="https://api.heroku.com/signup"&gt;https://api.heroku.com/signup&lt;/a&gt; and fill out my email address. Go into my email and click on the link they sent, which took me to a page that had me pick my password, and I was done. The whole process took less then 1 minute. Can't beat that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="verifying-you-heroku-account"&gt;
&lt;h2&gt;Verifying you Heroku account&lt;/h2&gt;
&lt;p&gt;When you sign up for an account, you have limited access to some features (add-ons, etc.) until you verify your account. Verifing your account is easy all you have to do is enter your credit card information. This proves to them you are real, and also allows you to use some of the paid features. I recommend that you verify your account so that you can get access to some of the nice free add-ons that are available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-the-heroku-command-line-client"&gt;
&lt;h2&gt;Installing the heroku command line client&lt;/h2&gt;
&lt;p&gt;I'm using a mac so I'm going to install the following version of the heroku command line client (toolbelt).
&lt;a class="reference external" href="http://toolbelt.herokuapp.com/osx/download"&gt;http://toolbelt.herokuapp.com/osx/download&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click on link, download the file.&lt;/li&gt;
&lt;li&gt;Find the file that was downloaded (heroku-toolbelt.pkg) and double click it.&lt;/li&gt;
&lt;li&gt;Follow prompts; enter password when prompted, and click close.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="test-heroku-command-line-client"&gt;
&lt;h2&gt;Test heroku command line client&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open terminial&lt;/li&gt;
&lt;li&gt;Type &amp;quot;heroku version&amp;quot; you should see something like this &amp;quot;heroku-gem/2.14.0&amp;quot; if so, it worked. if not, you did something wrong.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="login-to-heroku-from-command-line-client"&gt;
&lt;h2&gt;Login to heroku from command line client&lt;/h2&gt;
&lt;p&gt;Logging into the client will try to find your ssh key, and upload it to heroku for pushing code later on. If you don't have a key it will prompt you to create one. If you have more then one it will ask you which one you want to use.&lt;/p&gt;
&lt;div class="section" id="no-key-found-example"&gt;
&lt;h3&gt;No key found example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku login
Enter your Heroku credentials.
Email: adam@example.comPassword:
Could not find an existing public key.
Would you like to generate one? &lt;span class="o"&gt;[&lt;/span&gt;Yn&lt;span class="o"&gt;]&lt;/span&gt;
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="found-more-then-one-key-example"&gt;
&lt;h3&gt;Found more then one key example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku login
Enter your Heroku credentials.
Email: &amp;lt;my email&amp;gt;
Password:
Found the following SSH public keys:
1&lt;span class="o"&gt;)&lt;/span&gt; apphosted.key.pub
2&lt;span class="o"&gt;)&lt;/span&gt; id_rsa.pub
Which would you like to use with your Heroku account? 2
Uploading ssh public key /Users/ken/.ssh/id_rsa.pub
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-your-django-application-ready"&gt;
&lt;h2&gt;Getting your Django application ready&lt;/h2&gt;
&lt;p&gt;Now that you have an account and the client installed, you are ready to get started. If you are starting from scratch I recommend following the steps in this tutorial. &lt;a class="reference external" href="http://devcenter.heroku.com/articles/django"&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt; . If you are like me and already have an application that you want to install on to Heroku, keep reading.&lt;/p&gt;
&lt;p&gt;Since I already have a project, I'm going to tell you what I needed to do in order to get my blog application up and running on heroku. I followed the instructions from the heroku tutorial and went from there. Heroku depends on git, so I'm using a copy of my blog app that is hosted on github: &lt;a class="reference external" href="https://github.com/kencochrane/kencochrane_blog_heroku"&gt;https://github.com/kencochrane/kencochrane_blog_heroku&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /Users/ken/projects/github

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://kencochrane@github.com/kencochrane/kencochrane_blog_heroku.git kencochrane_heroku
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_heroku

&lt;span class="c"&gt;# making a new virtual environment using virtualenvwrapper.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv --no-site-packages --distribute kencochrane_heroku
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It should automatically activate the environment for you. If it doesn't, run this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;workon kencochrane_heroku
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that I have my virtualenv, I need to install my requirements using pip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-django-application-on-heroku"&gt;
&lt;h2&gt;Creating django application on heroku&lt;/h2&gt;
&lt;p&gt;Creating an application on heroku is easy, you just need to run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku create --stack cedar
Creating some-name-4741... &lt;span class="k"&gt;done&lt;/span&gt;, stack is cedar
http://some-name-4741.herokuapp.com/ &lt;span class="p"&gt;|&lt;/span&gt; git@heroku.com:some-name-4741.git
Git remote heroku added
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-django-application-to-heroku"&gt;
&lt;h2&gt;Deploying django application to Heroku&lt;/h2&gt;
&lt;p&gt;Once you are ready you can deploy your django application to Heroku.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything went well, it should look something like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
Counting objects: 209, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to &lt;span class="m"&gt;4&lt;/span&gt; threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;176/176&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;209/209&lt;span class="o"&gt;)&lt;/span&gt;, 271.89 KiB, &lt;span class="k"&gt;done&lt;/span&gt;.
Total &lt;span class="m"&gt;209&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 28&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;192&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 23&lt;span class="o"&gt;)&lt;/span&gt;

-----&amp;gt; Heroku receiving push
-----&amp;gt; Python/Django app detected
-----&amp;gt; Preparing virtualenv version 1.6.4
       New python executable in ./bin/python
       Installing setuptools............done.
       Installing pip...............done.
-----&amp;gt; Django settings injection
       Injecting code into blog/settings.py to &lt;span class="nb"&gt;read &lt;/span&gt;from DATABASE_URL

&amp;lt;removed a lot of output that doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t need to be shown&amp;gt;

       Successfully installed South django-activitysync django-debug-toolbar django-disqus django-memcache-status django-tagging django-xmlrpc feedparser httplib2 oauth2 python-memcached python-twitter simplejson yolk docutils Pygments psycopg2 Django
       Cleaning up...
-----&amp;gt; Discovering process types
       Procfile declares types         -&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;none&lt;span class="o"&gt;)&lt;/span&gt;
       Default types &lt;span class="k"&gt;for&lt;/span&gt; Python/Django -&amp;gt; web
-----&amp;gt; Compiled slug size is 10.3MB
-----&amp;gt; Launching... &lt;span class="k"&gt;done&lt;/span&gt;, v5
       http://some-name-4741.herokuapp.com deployed to Heroku
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-application-to-heroku-failed-now-what"&gt;
&lt;h2&gt;Deploying application to Heroku failed, now what?&lt;/h2&gt;
&lt;p&gt;The very first time you push to master you will get something like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master

The authenticity of host &lt;span class="s1"&gt;&amp;#39;heroku.com (50.19.85.132)&amp;#39;&lt;/span&gt; can&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t be established.
RSA key fingerprint is 8b:48:5e:67:0e:c9:16:47:32:f2:87:0c:1f:c8:60:ad.
Are you sure you want to &lt;span class="k"&gt;continue&lt;/span&gt; connecting &lt;span class="o"&gt;(&lt;/span&gt;yes/no&lt;span class="o"&gt;)&lt;/span&gt;? yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is normal, just type 'yes', and you will never be prompted for this again.&lt;/p&gt;
&lt;div class="section" id="django-app-must-be-in-a-package-subdirectory"&gt;
&lt;h3&gt;Django app must be in a package subdirectory&lt;/h3&gt;
&lt;p&gt;If you django project isn't setup correctly, you will get an error like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
Counting objects: 199, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to &lt;span class="m"&gt;4&lt;/span&gt; threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;167/167&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;199/199&lt;span class="o"&gt;)&lt;/span&gt;, 270.86 KiB, &lt;span class="k"&gt;done&lt;/span&gt;.
Total &lt;span class="m"&gt;199&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 26&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;192&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 23&lt;span class="o"&gt;)&lt;/span&gt;


-----&amp;gt; Heroku receiving push
-----&amp;gt; Python app detected
 !     Django app must be in a package subdirectory
 !     Heroku push rejected, failed to compile Python app


To git@heroku.com:some-name-4741.git
 ! &lt;span class="o"&gt;[&lt;/span&gt;remote rejected&lt;span class="o"&gt;]&lt;/span&gt; master -&amp;gt; master &lt;span class="o"&gt;(&lt;/span&gt;pre-receive hook declined&lt;span class="o"&gt;)&lt;/span&gt;
error: failed to push some refs to &lt;span class="s1"&gt;&amp;#39;git@heroku.com:some-name-4741.git&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This failed, because django app must be in a package subdirectory.. So you need to change the way my django app is setup. Move all of the files under a django project directory except the .git directory and .gitignore and requirements.txt files. For an example of what this looks like, check out the project directory structure on my repo in github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-push-rejected-no-cedar-supported-app-detected"&gt;
&lt;h3&gt;Heroku push rejected, no Cedar-supported app detected&lt;/h3&gt;
&lt;p&gt;Another error you can get is this one. &amp;quot;Heroku push rejected, no Cedar-supported app detected&amp;quot;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
Counting objects: 204, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to &lt;span class="m"&gt;4&lt;/span&gt; threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;171/171&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;204/204&lt;span class="o"&gt;)&lt;/span&gt;, 271.34 KiB, &lt;span class="k"&gt;done&lt;/span&gt;.
Total &lt;span class="m"&gt;204&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 27&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;192&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta 23&lt;span class="o"&gt;)&lt;/span&gt;

-----&amp;gt; Heroku receiving push
 !     Heroku push rejected, no Cedar-supported app detected

To git@heroku.com:cold-summer-4741.git
 ! &lt;span class="o"&gt;[&lt;/span&gt;remote rejected&lt;span class="o"&gt;]&lt;/span&gt; master -&amp;gt; master &lt;span class="o"&gt;(&lt;/span&gt;pre-receive hook declined&lt;span class="o"&gt;)&lt;/span&gt;
error: failed to push some refs to &lt;span class="s1"&gt;&amp;#39;git@heroku.com:cold-summer-4741.git&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had this error and I couldn't figure it out. After searching through all of the heroku python docs (all 2 of them), I didn't find anything, so I started doing some trial and error testing, and I finally figure out what was wrong. My django project directory was kencochrane_blog, and this had an underscore, and when I changed it to just kenblog (no more underscore), it worked. I couldn't find anything anywhere that said you can't use underscores for your django app name, so they might want to update their documentation, or possibly fix the bug. I'm not sure if this is by design or not, maybe someone can let me know.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="check-django-application-status-on-heroku"&gt;
&lt;h2&gt;Check Django application status on heroku&lt;/h2&gt;
&lt;p&gt;Now that you have pushed your application out onto Heroku how do you know if it is actually running? The Heroku client has a command called ps, which will tell you what your processes are doing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku ps

Process       State               Command
------------  ------------------  ------------------------------
web.1         crashed &lt;span class="k"&gt;for&lt;/span&gt; 2m      python kenblog/manage.py runserver 0...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My django application looks like it crashed. Most likely because I didn't setup the database yet, lets look at the logs to see what is causing the problems to be sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="checking-django-application-logs-on-heroku"&gt;
&lt;h2&gt;Checking Django application logs on Heroku&lt;/h2&gt;
&lt;p&gt;The Heroku client has a nifty logs command that you can use to view the last chunk of logs for your application. It will combine all of your logs into one view, so that you don't have to have more then one log process running. You can call it directly and get an output similar to the shell command 'tail' and you can all use the '--tail' option to follow the logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku logs --tail
2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Deploy 5f194d2 by kencochrane@2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Release v7 created by kencochrane@
2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from crashed to created
2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from created to starting
2011-11-27T18:40:00+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;slugc&lt;span class="o"&gt;]&lt;/span&gt;: Slug compilation finished
2011-11-27T18:40:03+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: Starting process with &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;python kenblog/manage.py runserver 0.0.0.0:12033 --noreload&lt;span class="sb"&gt;`&lt;/span&gt;
2011-11-27T18:40:04+00:00 app&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: Unexpected error: &lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exceptions.NameError&amp;#39;&lt;/span&gt;&amp;gt;, NameError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name &amp;#39;DATABASES&amp;#39; is not defined&amp;quot;&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt;, &amp;lt;traceback object at 0x1a7b128&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
2011-11-27T18:40:05+00:00 app&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: There is no South database module &lt;span class="s1"&gt;&amp;#39;south.db.None&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; your database. Please either choose a supported database, check &lt;span class="k"&gt;for&lt;/span&gt; SOUTH_DATABASE_ADAPTER&lt;span class="o"&gt;[&lt;/span&gt;S&lt;span class="o"&gt;]&lt;/span&gt; settings, or remove South from INSTALLED_APPS.
2011-11-27T18:40:06+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from starting to crashed
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks like it is an issue with the settings file. If you wanted to take a look at the settings file to see if we can find out what is wrong you can run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# (your path will be different)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run cat kenblog/settings.py

&amp;lt;normal settings file stuff with the following added at the end.&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urlparse&lt;/span&gt;
&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uses_netloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uses_netloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.postgresql_psycopg2&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unexpected error:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is odd, not sure why this is like this since I'm seeing the DATABASES variable above. Let's check to see if the environment variables are there. (the output has been changed to protect the innocent, but you still get the picture). You can also use the command 'heroku config' if you just want to see your application configuration options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run env
Running env attached to terminal... up, run.6
&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres://blah:somethingelse@ec2-555-55-555-555.compute-1.amazonaws.com/morestuff
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;37265
&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/app
&lt;span class="nv"&gt;PYTHONUNBUFFERED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xterm
&lt;span class="nv"&gt;COLUMNS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;153

&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bin:/usr/local/bin:/usr/bin:/bin
&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/app
&lt;span class="nv"&gt;SHARED_DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres://blah:evenmorestuff@ec2-555-55-555-555.compute-1.amazonaws.com/morestuff
&lt;span class="nv"&gt;LINES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;32
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This output looks good the DATABASE_URL env variable is there, so that is OK. Looking more closely at my settings.py file I didn't have a DATABASES variable because the last time I used this project, the other hosting provider didn't require that I have one. So I have added a blank DATABASES variable, and that seems to have fixed my issue. Heroku, should make the error message a little nicer, add more notes to their documentation, or even better make their code handle the case when there is no DATABASES variable in the settings file.  I have submitted a patch to fix this, so hopefully that will get rolled out in the near future. (&lt;a class="reference external" href="https://github.com/heroku/heroku-buildpack-python/pull/8"&gt;https://github.com/heroku/heroku-buildpack-python/pull/8&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Now if we redeploy the app and look at the logs, they look much better.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku logs
2011-11-27T18:59:25+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Deploy 96be00f by kencochrane@
2011-11-27T18:59:25+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Release v8 created by kencochrane@
2011-11-27T18:59:25+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from crashed to created
2011-11-27T18:59:26+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from created to starting
2011-11-27T18:59:26+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;slugc&lt;span class="o"&gt;]&lt;/span&gt;: Slug compilation finished
2011-11-27T18:59:31+00:00 app&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt; errors found
2011-11-27T18:59:31+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from starting to up
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-django-management-commands-on-heroku"&gt;
&lt;h2&gt;Running django management commands on Heroku&lt;/h2&gt;
&lt;p&gt;Running django management commands are easy you just need to run the following command and replace &amp;lt;command&amp;gt; with the management command you want to run. There are a few examples below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run python kenblog/manage.py &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="running-django-shell-on-heroku"&gt;
&lt;h3&gt;Running django shell on Heroku&lt;/h3&gt;
&lt;p&gt;If you need to use the interactive python shell with django, you still can, you just need to run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run python kenblog/manage.py shell
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="syncing-django-database-on-heroku"&gt;
&lt;h3&gt;Syncing Django Database on Heroku&lt;/h3&gt;
&lt;p&gt;Now that our application is starting like it should let's sync the db.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run python kenblog/manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-django-south-migrations-on-heroku"&gt;
&lt;h3&gt;Running Django South Migrations on Heroku&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku run python kenblog/manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets look at our processes now&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku ps
Process       State               Command
------------  ------------------  ------------------------------
run.5         &lt;span class="nb"&gt;complete &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; 21m    cat kenblog/settings.py
run.6         &lt;span class="nb"&gt;complete &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; 18m    env
run.7         &lt;span class="nb"&gt;complete &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; 1m     python kenblog/manage.py syncdb
run.8         &lt;span class="nb"&gt;complete &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; 1m     python kenblog/manage.py migrate
web.1         up &lt;span class="k"&gt;for&lt;/span&gt; 4m           python kenblog/manage.py runserver..
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things are looking better, we are up, and it also shows our old commands that we ran.&lt;/p&gt;
&lt;p&gt;if you need to work with the processes you have the following options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ps:dynos &lt;span class="o"&gt;[&lt;/span&gt;QTY&lt;span class="o"&gt;]&lt;/span&gt;                 &lt;span class="c"&gt;# scale to QTY web processes&lt;/span&gt;
ps:restart &lt;span class="o"&gt;[&lt;/span&gt;PROCESS&lt;span class="o"&gt;]&lt;/span&gt;           &lt;span class="c"&gt;# restart an app process&lt;/span&gt;
ps:scale &lt;span class="nv"&gt;PROCESS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;AMOUNT1 ...  &lt;span class="c"&gt;# scale processes by the given amount&lt;/span&gt;
ps:stop PROCESS                &lt;span class="c"&gt;# stop an app process&lt;/span&gt;
ps:workers &lt;span class="o"&gt;[&lt;/span&gt;QTY&lt;span class="o"&gt;]&lt;/span&gt;               &lt;span class="c"&gt;# scale to QTY background processes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="opening-your-django-application-in-a-web-browser"&gt;
&lt;h2&gt;Opening your django application in a web browser&lt;/h2&gt;
&lt;p&gt;If you run this command it will open a web browser and hopefully your site is running as it should&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku open
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-django-and-gunicorn-on-heroku"&gt;
&lt;h2&gt;Running django and gunicorn on heroku&lt;/h2&gt;
&lt;p&gt;By default heroku deploys with the built in django runserver, which isn't recommended for production. If you are playing around it is ok, but once you get past that, the first thing you should do is switch to something better like guincorn. Switching is quick and painless, and you will be glad that you did.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add gunicorn==0.13.4 to your requirements file.&lt;/li&gt;
&lt;li&gt;create a new file called Procfile at the same level as your requirements.txt file with the following in it.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;web: python kenblog/manage.py run_gunicorn -b &lt;span class="s2"&gt;&amp;quot;0.0.0.0:&lt;/span&gt;&lt;span class="nv"&gt;$PORT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -w 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add gunicorn to the installed_apps in settings.py&lt;/p&gt;
&lt;p&gt;then&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -am &lt;span class="s2"&gt;&amp;quot;use gunicorn&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push heroku master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at your logs you will see it up and running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku logs
2011-11-27T21:06:24+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;slugc&lt;span class="o"&gt;]&lt;/span&gt;: Slug compilation started
2011-11-27T21:06:32+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Deploy 7b2eec1 by kencochrane@
2011-11-27T21:06:32+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt;: Release v8 created by kencochrane@
2011-11-27T21:06:32+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from created to starting
2011-11-27T21:06:35+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: Starting process with &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;python kenblog/manage.py run_gunicorn -b &lt;span class="s2"&gt;&amp;quot;0.0.0.0:4075&amp;quot;&lt;/span&gt; -w 3&lt;span class="sb"&gt;`&lt;/span&gt;
2011-11-27T21:06:36+00:00 app&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: Validating models...
2011-11-27T21:06:37+00:00 heroku&lt;span class="o"&gt;[&lt;/span&gt;web.1&lt;span class="o"&gt;]&lt;/span&gt;: State changed from starting to up
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-django-celery-background-tasks-on-heroku"&gt;
&lt;h2&gt;Running django/celery background tasks on Heroku&lt;/h2&gt;
&lt;p&gt;Heroku offers you two types of processes, a web process and a worker process. Web processes are used for serving web pages, etc. Worker processes are used for items that run in the background. The heroku tutorial goes over how to setup background task using celery and kombu (&lt;a class="reference external" href="http://devcenter.heroku.com/articles/django"&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt;) if you want more info I would check that out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="serving-django-static-media-on-heroku"&gt;
&lt;h2&gt;Serving Django Static media on Heroku&lt;/h2&gt;
&lt;p&gt;I'm not sure how to serve up static media on heroku, to get my app working I just used the built in &amp;quot;django.views.static.serve&amp;quot; views for now, this isn't ideal and you would want a more permanent solution. A more long term solution would be to push all static media into Amazon s3 and then use Amazon cloudfront to serve everything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uploading-files-to-heroku-with-django"&gt;
&lt;h2&gt;Uploading files to Heroku with Django&lt;/h2&gt;
&lt;p&gt;Heroku allows you to upload files to their app's &amp;quot;Emphemeral Filesystem&amp;quot;: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/dyno-isolation#ephemeral_filesystem"&gt;http://devcenter.heroku.com/articles/dyno-isolation#ephemeral_filesystem&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Which the app can use as a temporary scratchpad, but no files it writes are visible to any other &amp;quot;Each dyno gets its own ephemeral filesystem, with a fresh copy of the most recently deployed code. During its lifetime the dyno can use the filesystem as a temporary scratchpad, but no files it writes are visible to any other dyno (including other dynos in the application) and any files written will be discarded the moment the dyno is stopped or restarted.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This means you can't use this space to store uploaded files, but it should allow you to upload it there for a minute, and then send it over to Amazon S3 for a more permant storage solution. You could use a tool like Django Queued storage for this: &lt;a class="reference external" href="https://github.com/jezdez/django-queued-storage"&gt;https://github.com/jezdez/django-queued-storage&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="databases"&gt;
&lt;h2&gt;Databases&lt;/h2&gt;
&lt;p&gt;Heroku gives each app a 5MB shared postgresql database for FREE. If you pay $15/month you get upgraded to 20GB of space. They also offer dedicated database instances if you need that. See this page for more details. &lt;a class="reference external" href="http://www.heroku.com/pricing#0-0"&gt;http://www.heroku.com/pricing#0-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They also have a bunch of other addons (redis, mongodb, couchdb, amazon RDS) that you should be able to tie into, see the addons page for a complete list. &lt;a class="reference external" href="http://addons.heroku.com/"&gt;http://addons.heroku.com/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-django-caching-on-herku"&gt;
&lt;h2&gt;Setting up Django Caching on Herku&lt;/h2&gt;
&lt;p&gt;To use memcache on Heroku, I went to the add-on page and installed the free memcache addon. Once I did this I can run the heroku config command to find out my config settings. I then use that information in my django settings file so that I can have access to caching in my app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;heroku config
...
&lt;span class="nv"&gt;MEMCACHE_PASSWORD&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; xxxxxxxxxxxx
&lt;span class="nv"&gt;MEMCACHE_SERVERS&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; instance.hostname.net
&lt;span class="nv"&gt;MEMCACHE_USERNAME&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; xxxxxxxxxxxx
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They also offer redis if you prefer that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-email-from-django-on-heroku"&gt;
&lt;h2&gt;Sending Email from django on Heroku&lt;/h2&gt;
&lt;p&gt;If you need to send or receive email in your application there are a few email add-ons that you can use. Pick the one you want and then run the 'heroku config' command described above to get your settings, and update your django settings accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-size"&gt;
&lt;h2&gt;Application size&lt;/h2&gt;
&lt;p&gt;You application and all of it's dependencies can't be more then 100MB in size.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-pricing"&gt;
&lt;h2&gt;Heroku Pricing&lt;/h2&gt;
&lt;p&gt;Directly from this page: &lt;a class="reference external" href="http://devcenter.heroku.com/articles/how-much-does-a-dyno-cost"&gt;http://devcenter.heroku.com/articles/how-much-does-a-dyno-cost&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dynos cost $0.05 per hour, prorated to the second. For example, an app with four dynos is charged $0.20 per hour for each hour that the four dynos are running.&lt;/p&gt;
&lt;p&gt;Pricing is based on calendar time. If you set your app to four dynos, you will be charged $0.20 per hour regardless of the traffic your site serves during that time.&lt;/p&gt;
&lt;p&gt;Each application receives 750 free dyno hours per month. For example if you have 1 web dyno running for all of April, and a worker dyno running half the time you would have 330 dyno-hours billed that month or $16.50 (720 web dyno hours + 360 worker dyno hours - 750 free dyno hours).&lt;/p&gt;
&lt;p&gt;See this page for more details: &lt;a class="reference external" href="http://www.heroku.com/pricing#0-0"&gt;http://www.heroku.com/pricing#0-0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I haven't really had much time to really play with Heroku, and stress test it at all, but I have to say it is pretty impressive to begin with. There are still some rough edges, but I'm sure they will have those smoothed out before they remove the beta tag. The thing that impresses me the most is all of the addons that you have access to out of the box. I'm not sure how many of these work with the new platform, or with django right now, but I'm sure it is only a matter of time before they are available.&lt;/p&gt;
&lt;p&gt;I would highly recommend signing up and trying out their service, it is free so what do you have to lose?&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to Heroku. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="heroku"></category><category term="hosting"></category><category term="deployment"></category><category term="paas"></category></entry><entry><title>Setting up Django with Green Unicorn, nginx, supervisord and fabric on CentOS 5.5</title><link href="http://kencochrane.net/blog/2011/06/django-gunicorn-nginx-supervisord-fabric-centos55/" rel="alternate"></link><updated>2011-06-27T06:48:18-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-06-27:blog/2011/06/django-gunicorn-nginx-supervisord-fabric-centos55/</id><summary type="html">&lt;p&gt;When I first started working with django I deployed my apps using apache and mod_python. Then after a little while I started playing with nginx and switched my setup so that nginx was serving the static content and reverse proxied requests back to apache and mod_python. Not too long after that, I switched out mod_python with mod_wsgi and ran mod_wsgi in daemon mode.&lt;/p&gt;
&lt;p&gt;This setup worked well for a while, but one thing I never really liked was the fact that I needed to run apache which is pretty heavy even when you strip out all the unused modules. Apache is great, but all I was really using it for was a router between nginx and mod_wsgi, I wasn't using any of the other features in apache.&lt;/p&gt;
&lt;p&gt;I looked at fastcgi and uswgi and they looked good, but for one reason or another I never made the jump. Recently I have been hearing a lot of good things about green unicorn, so I decided to check it out. When I first looked at it, it was fairly new and because of this a little concerned with stability, so I kept and eye on it and watched it mature.&lt;/p&gt;
&lt;p&gt;While I was waiting for green unicorn to mature I ended up doing a lot of research on the &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;new python hosting services&lt;/a&gt; that recently hit the market. Three out of the five services that I looked were using green unicorn, the other two were using uWSGI.&lt;/p&gt;
&lt;p&gt;The fact that these three services are basing there new businesses on green unicorn gave it a lot of credibility. Not too long after that I started playing with green unicorn to see what it would take to get my sites up and running.&lt;/p&gt;
&lt;p&gt;The first thing that I noticed was that I didn't need to create a wsgi file if I used their gunicorn_django command, which was pretty sweet. The fact that they built it into the service shows you that django is a first class citizen.&lt;/p&gt;
&lt;p&gt;The second thing that I noticed was that I needed a way to start up green unicorn and keep it running, something that apache does for you with mod_wsgi. I did a little bit of research and found out that supervisord would work perfectly for what I needed to do with green unicorn.&lt;/p&gt;
&lt;p&gt;Because seeing is better then reading, I'll guide you throw the steps that you will need to do in order to get your system setup in a way that will make using green unicorn very easy, especially if you want to run more then one website on your server. I'm going to use a 256MB rackspace cloud instance running centos 5.5.&lt;/p&gt;
&lt;div class="section" id="create-a-rackspace-cloud-server"&gt;
&lt;h2&gt;Create a rackspace cloud server&lt;/h2&gt;
&lt;p&gt;Go into the rackspace cloud server management website and allocate yourself a new 256MB CentOS 5.5 server or if you prefer do the same thing using their API. Now that you have a server and the root password, follow along step by step to get you system all setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-and-versions"&gt;
&lt;h2&gt;Software and versions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RackSpace Cloud Server 256MB&lt;/li&gt;
&lt;li&gt;CentOS 5.5&lt;/li&gt;
&lt;li&gt;Python 2.6.6&lt;/li&gt;
&lt;li&gt;nginx 1.0.4&lt;/li&gt;
&lt;li&gt;supervisord 3.0a10&lt;/li&gt;
&lt;li&gt;virtualenv 1.6.1&lt;/li&gt;
&lt;li&gt;pip 1.0.1&lt;/li&gt;
&lt;li&gt;gunicorn 0.12.2&lt;/li&gt;
&lt;li&gt;fabric 1.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bitbucket-project"&gt;
&lt;h2&gt;Bitbucket project&lt;/h2&gt;
&lt;p&gt;To make things easier I have created a django bootstrap project directory with all of the file used in the blog post. It is located here, so feel free to clone and fork.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bitbucket.org/kencochrane/django-gunicorn-nginx-supervisord-bootstrap/"&gt;https://bitbucket.org/kencochrane/django-gunicorn-nginx-supervisord-bootstrap/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="login-to-server"&gt;
&lt;h2&gt;Login to server&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh root@&amp;lt;RackSpaceIP&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update-packages"&gt;
&lt;h2&gt;Update packages&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum -y update
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-packages"&gt;
&lt;h2&gt;Install packages&lt;/h2&gt;
&lt;p&gt;You might not need all of these right now, but I normally need these down the line, so doing them all now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;yum -y install emacs readline-devel ncurses-devel libevent-devel glib2-devel libjpeg-devel freetype-devel bzip2 bzip2-devel bzip2-libs openssl-devel pcre pcre-devel gpg make gcc yum-utils unzip
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-a-django-user-as-a-system-user"&gt;
&lt;h2&gt;Add a django user as a system user&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;useradd -d /opt/django -m -r django
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="set-password-for-django-to-what-ever-you-want"&gt;
&lt;h2&gt;Set password for django to what ever you want&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;passwd django
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-directories"&gt;
&lt;h2&gt;Setup directories&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /opt/django
mkdir -p /opt/django/apps
mkdir -p /opt/django/logs
mkdir -p /opt/django/logs/nginx
mkdir -p /opt/django/logs/apps
mkdir -p /opt/django/configs
mkdir -p /opt/django/scripts
mkdir -p /opt/django/htdocs
mkdir -p /opt/django/tmp
mkdir -p /opt/django/configs/nginx
mkdir -p /opt/django/configs/supervisord
mkdir -p /opt/django/apps/my_app
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-blank-html-page"&gt;
&lt;h2&gt;Add blank html page&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;nothing here&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; &amp;quot;&lt;/span&gt; &amp;gt; /opt/django/htdocs/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-zlib"&gt;
&lt;h2&gt;Install Zlib&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# download from zlib.net&lt;/span&gt;
mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
wget http://www.zlib.net/zlib-1.2.5.tar.gz
tar -xvzf zlib-1.2.5.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;zlib-1.2.5
./configure -s
make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-python-2-6-6"&gt;
&lt;h2&gt;Install python 2.6.6&lt;/h2&gt;
&lt;p&gt;CentOS 5.5 doesn't come with python2.6 pre installed so we need to do that on our own.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
wget http://www.python.org/ftp/python/2.6.6/Python-2.6.6.tgz
tar -xvzf Python-2.6.6.tgz
&lt;span class="nb"&gt;cd &lt;/span&gt;Python-2.6.6
./configure --enable-shared
make
make altinstall
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-the-following-to-etc-profile"&gt;
&lt;h2&gt;Add the following to /etc/profile&lt;/h2&gt;
&lt;p&gt;We need to add the lib path to the LD_LIBRARY_PATH or else you will get an error saying it can't find libpython2.6.so.1.0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LD_LIBRARY_PATH&lt;/span&gt;:/usr/local/lib/:/usr/local/lib64/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="source-the-new-profile"&gt;
&lt;h2&gt;Source the new profile&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source&lt;/span&gt; /etc/profile
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-distribute"&gt;
&lt;h2&gt;Install distribute&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
curl -O http://python-distribute.org/distribute_setup.py
python2.6 distribute_setup.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-pip-virtualenv"&gt;
&lt;h2&gt;Install Pip &amp;amp; virtualenv&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
curl -O -k https://raw.github.com/pypa/pip/master/contrib/get-pip.py
python2.6 get-pip.py
pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-supervisor"&gt;
&lt;h2&gt;Install supervisor&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install supervisor
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-mercurial"&gt;
&lt;h2&gt;Install mercurial&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install mercurial
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-nginx"&gt;
&lt;h2&gt;Install NGINX&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /tmp/downloads
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/downloads
wget http://nginx.org/download/nginx-1.0.4.tar.gz
tar -xzvf nginx-1.0.4.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;nginx-1.0.4
./configure --sbin-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/sbin --with-http_ssl_module --with-http_stub_status_module
make
/etc/init.d/nginx stop
sleep 2
sudo make install
sudo chmod +x /usr/local/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="install-my-app"&gt;
&lt;h3&gt;Install my app&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-first-virtualenv"&gt;
&lt;h2&gt;Add first virtualenv&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/django/apps/my_app/
virtualenv --distribute --no-site-packages v0.1

&lt;span class="c"&gt;# make this a post_create hook?&lt;/span&gt;
touch /opt/django/apps/my_app/v0.1/.venv

&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/django/apps/my_app/v0.1/
hg clone https://bitbucket.org/kencochrane/django-gunicorn-nginx-supervisord-bootstrap my_app

ln -s /opt/django/apps/my_app/v0.1 /opt/django/apps/my_app/current

ln -s /opt/django/apps/my_app/current/my_app/conf/nginx.conf /opt/django/configs/nginx/myapp.conf

ln -s /opt/django/apps/my_app/current/my_app/conf/supervisord.conf /opt/django/configs/supervisord/myapp.conf

&lt;span class="c"&gt;# activate the ve&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; /opt/django/apps/my_app/current/bin/activate
&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/django/apps/my_app/current/my_app/
./bootstrap.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-nginx"&gt;
&lt;h2&gt;Configure nginx&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# as root&lt;/span&gt;
mkdir -p /etc/nginx
ln -s /opt/django/apps/my_app/current/my_app/server/etc/nginx.conf /etc/nginx/nginx.conf
ln -s /usr/local/nginx/conf/mime.types /etc/nginx/mime.types
ln -s /opt/django/apps/my_app/current/my_app/server/init.d/nginx /etc/init.d/nginx
chmod &lt;span class="m"&gt;755&lt;/span&gt; /etc/init.d/nginx
chkconfig --add nginx
chkconfig nginx on
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-supervisord"&gt;
&lt;h2&gt;Configure Supervisord&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# as root&lt;/span&gt;
ln -s /opt/django/apps/my_app/current/my_app/server/etc/supervisord.conf  /etc/supervisord.conf
ln -s /opt/django/apps/my_app/current/my_app/server/init.d/supervisord /etc/init.d/supervisord
chmod &lt;span class="m"&gt;755&lt;/span&gt; /etc/init.d/supervisord
chkconfig --add supervisord
chkconfig supervisord on
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="firewall"&gt;
&lt;h2&gt;Firewall&lt;/h2&gt;
&lt;p&gt;We need to open up the firewall so that we are allowed connection, if you don't know anything about this, check out these links.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://cloudservers.rackspacecloud.com/index.php/Firewalls"&gt;http://cloudservers.rackspacecloud.com/index.php/Firewalls&lt;/a&gt;
&lt;a class="reference external" href="http://cloudservers.rackspacecloud.com/index.php/Introduction_to_iptables"&gt;http://cloudservers.rackspacecloud.com/index.php/Introduction_to_iptables&lt;/a&gt;
&lt;a class="reference external" href="http://cloudservers.rackspacecloud.com/index.php/Sample_iptables_ruleset"&gt;http://cloudservers.rackspacecloud.com/index.php/Sample_iptables_ruleset&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Open http port 80&lt;/span&gt;
iptables -I RH-Firewall-1-INPUT -p tcp --dport &lt;span class="m"&gt;80&lt;/span&gt; -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bashrc-file-changes"&gt;
&lt;h2&gt;.bashrc file changes&lt;/h2&gt;
&lt;p&gt;I can't remember where I saw this little trick, if you know please let me know so that I can give them credit. If you put a file in your mercurial directory called .venv, when you cd into the directory this little bash hack will automatically activate your virtual environment for you. This allows you to have something similar to virtualenvwrapper in this custom setup.&lt;/p&gt;
&lt;p&gt;Add this code to the .bashrc file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;emacs /opt/django/.bashrc
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# User specific aliases and functions&lt;/span&gt;
has_virtualenv&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -e .venv &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        deactivate &amp;gt;/dev/null 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
        &lt;span class="nb"&gt;source &lt;/span&gt;bin/activate
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

venv_cd &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; has_virtualenv
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;alias cd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;venv_cd&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#end of changes&lt;/span&gt;

&lt;span class="c"&gt;# source the file to get new changes in active shell&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; /opt/django/.bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="change-permissions-of-the-django-home-directory-to-django"&gt;
&lt;h2&gt;Change permissions of the django home directory to django&lt;/h2&gt;
&lt;p&gt;This cleans up and left over root ownership&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chown -R django:django /opt/django/*
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="switch-to-django-user"&gt;
&lt;h2&gt;Switch to django user&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;su - django
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="start-up-nginx"&gt;
&lt;h2&gt;Start up nginx&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service nginx start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="startup-supervisord"&gt;
&lt;h2&gt;Startup supervisord&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service supervisord start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="test-nginx-and-supervisord"&gt;
&lt;h2&gt;Test Nginx and supervisord&lt;/h2&gt;
&lt;p&gt;Check supervisord status&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;supervisorctl status
my_app                           RUNNING    pid 13594, uptime 0:00:05
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To check nginx go to the IP or domain name for your rackspace server in your browser and make sure it worked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-the-application-using-fabric"&gt;
&lt;h2&gt;Updating the application using fabric&lt;/h2&gt;
&lt;p&gt;Inside of the bitbucket project directory there is a file called fabfile.py. This file will allow you to update the application from your machine whenever you want just by calling one command.&lt;/p&gt;
&lt;p&gt;It will prompt you for your hostname and password for the django user. Then it will go out to the rackspace server and pull and update the app and restart the application in supervisord. It is very basic for right now, but should get you started if you want to do more advanced stuff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fab update_server
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now that we have everything setup, if you want to add a new application to our setup all we need to do is.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create a new directory under apps&lt;/li&gt;
&lt;li&gt;create the virtualenv&lt;/li&gt;
&lt;li&gt;run the bootstrap to install the software&lt;/li&gt;
&lt;li&gt;make sure that the application has a supervisord and nginx configuration file&lt;/li&gt;
&lt;li&gt;symlink those files to the correct locations in the config directory&lt;/li&gt;
&lt;li&gt;run any python management commands you might need to run (syncdb, migrate, etc)&lt;/li&gt;
&lt;li&gt;reload supervisord and nginx&lt;/li&gt;
&lt;li&gt;you should be good to go.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope this was helpful to someone besides myself, if it was helpful for you please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="deployment"></category><category term="gunicorn"></category><category term="supervisord"></category><category term="fabric"></category><category term="centos5"></category><category term="nginx"></category><category term="linux"></category></entry><entry><title>Django Hosting Roundup: (Ep.io vs Gondor.io vs DotCloud vs Heroku vs AppHosted vs DjangoZoom) Who wins?</title><link href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/" rel="alternate"></link><updated>2011-06-06T22:03:59-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-06-06:blog/2011/06/django-hosting-roundup-who-wins/</id><summary type="html">&lt;div class="section" id="updates"&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Updated 2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments below.&lt;/li&gt;
&lt;li&gt;Updated 1/26/2012: Updated Gondor.io with info from Donald Stufft.&lt;/li&gt;
&lt;li&gt;Updated 01/24/2012: changed gondor.io to include SSL support&lt;/li&gt;
&lt;li&gt;Updated 01/01/2012: Added Heroku and updated ep.io, gondor.io, and dotcloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;For the past 6 weeks I have been trying out all of the new django/python hosting services that are currently available today, and I have been writing about my experiences along the way. It only makes sense to conclude this series of articles with one last article comparing all of the services against each other. It is important to note that many of these services are still in development and aren't even available to the general public, so I'll try to keep this article up to date as these services change over time. With that said, don't take my word for it, go out and try all of these services on your own and find out which one you like the best, you won't be disappointed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quick-recap"&gt;
&lt;h2&gt;Quick Recap&lt;/h2&gt;
&lt;div class="section" id="ep-io"&gt;
&lt;h3&gt;ep.io&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;My Experiences with ep.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pretty solid offering, with a nice set of features and a decent price. Good set of documentation.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: Epio closed down on May 31st 2012 ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gondor-io"&gt;
&lt;h3&gt;gondor.io&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;My day in gondor.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Their website has a nice list of features that they expect to have once they officially launch, but most of those features aren't available yet. The documentation is a little light, but the service has a lot of potential.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dotcloud-com"&gt;
&lt;h3&gt;dotCloud.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;Deploying my Django application to dotcloud.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They have a ton of money ($10M), and with it, a ton of features. They are very developer friendly, but you need to be pretty technical, it isn't quite ready for beginners. Good set of documentation.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Full disclosure&lt;/strong&gt;: I now work for dotCloud]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apphosted-com"&gt;
&lt;h3&gt;AppHosted.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com Django Hosting Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built with security, stability and scalability on their mind from the beginning. They have a solid offering, and they look to be targeting enterprise customers who will pay more for that peace of mind.  They are currently lacking some key features, which I'm sure they will be adding soon.  Good set of documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="djangozoom-com"&gt;
&lt;h3&gt;DjangoZoom.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/djangozoom-com-review/"&gt;DjangoZoom.com Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built to be fast and easy to use, still missing some key features, but I'm sure they will be available by the time they go live. Decent amount of documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-com"&gt;
&lt;h3&gt;Heroku.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/"&gt;Developers guide for running django apps on Heroku&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Originally built as a Ruby on Rails service, they have now added support for python. The service is still in beta, but it has a lot of potential. It looks a lot like what dotCloud is offering, with the ability to run code from almost any language, and a ton of different add-ons for lots of different services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="awards"&gt;
&lt;h2&gt;Awards&lt;/h2&gt;
&lt;div class="section" id="fastest-deployments"&gt;
&lt;h3&gt;Fastest Deployments:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt; - Zoom is right, it doesn't take long to configure your application and have it up and running on their servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easiest-to-use"&gt;
&lt;h3&gt;Easiest To Use:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt; - No command line interface needed, just a web browser, a project in a git repo that it has access too, and a few questions answered and your app is up and running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-features"&gt;
&lt;h3&gt;Most Features:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dotcloud.com"&gt;dotCloud.com&lt;/a&gt; - They raised $10 Million, and they are spending it on hiring people, buying companies, and building services. They have a bunch of services currently and they don't plan on stopping, their roadmap has everything on it, and I think if you give them enough time they will eventually have a service for everything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-developer-friendly"&gt;
&lt;h3&gt;Most Developer Friendly:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dotcloud.com"&gt;dotCloud.com&lt;/a&gt; - They give lots of features without handcuffing the developer. They are the only company with full database and shell access. They do a good job of offering the same type of service a developer could get if they built it themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="best-overall-value"&gt;
&lt;h3&gt;Best Overall Value:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt; - This one is hard since most of the services don't have any pricing listed, but currently ep.io is in the lead, they offer reasonable prices with a nice Free tier. This allows developers to try out the service for FREE, as well as run smaller pet projects that they might not have tried before because they didn't want to pay for hosting. They have the second most features available, second to only dotCloud, and there service is pretty solid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easiest-project-setup"&gt;
&lt;h3&gt;Easiest Project Setup:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://apphosted.com"&gt;apphosted.com&lt;/a&gt; - Their goal was to make it real easy to get your project up onto their servers without having to change your project, and they did that, there was very little if any changes I needed to make in order to get my application up on their servers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="django-feature-hosting-matrix"&gt;
&lt;h2&gt;Django Feature Hosting Matrix&lt;/h2&gt;
&lt;p&gt;To make things easier when comparing all of the different services I have built this matrix with all of the information I compiled from each of the services. I don't know the answers for all services, but I'll update it when I find out those answers. If you know the answers feel free to post a comment to let me know.&lt;/p&gt;
&lt;p&gt;I have included all of the new django services as well as google app engine and webfaction.com, a tradition hosting service. This should make it a little easier to see how these new services compare to other hosting options.&lt;/p&gt;
&lt;iframe width='775' height='500' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0AtuyQoTrXCavdDdyQ1RCX29FcDhQeDgzMXp0NGpGeWc&amp;single=true&amp;gid=0&amp;output=html&amp;widget=true'&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="who-wins"&gt;
&lt;h2&gt;Who wins?&lt;/h2&gt;
&lt;p&gt;It is really hard to pick just one winner,  mainly because most of these services are still in beta and not quite finished yet. Also because each service is a little different, and it will depend on what you are trying to do. So, go out try them out, and let me know which one you picked.&lt;/p&gt;
&lt;p&gt;The real winner is us, the developers, and the python community in general. We now have a bunch of really cool services that will make our lives better, and that is awesome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you"&gt;
&lt;h2&gt;Thank you!&lt;/h2&gt;
&lt;p&gt;I want to thank all of the people who made these services, and gave me early access to their systems so that I could play around with them. I wish them the best of luck, and hope they all are really successful, and they are around for a long time.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="hosting"></category><category term="apphosted"></category><category term="python"></category><category term="deployment"></category><category term="dotcloud"></category><category term="epio"></category><category term="gondor"></category><category term="djangozoom"></category><category term="heroku"></category><category term="paas"></category></entry><entry><title>DjangoZoom.com Review</title><link href="http://kencochrane.net/blog/2011/06/djangozoom-com-review/" rel="alternate"></link><updated>2011-06-05T11:17:11-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-06-05:blog/2011/06/djangozoom-com-review/</id><summary type="html">&lt;p&gt;This is part five in my series on django hosting services. Previously, I looked at &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;dotcloud.com&lt;/a&gt; and now I'm looking at &lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;DjangoZoom.com is the brain child of Nate Aune and Shimon Rura and is based in Boston, Massachusetts. It was founded in 2010 at &lt;a class="reference external" href="http://startupweekend.org/"&gt;StartupWeekend Boston&lt;/a&gt; and was a finalist in the &lt;a class="reference external" href="http://www.masschallenge.org/"&gt;MassChallenge&lt;/a&gt;. Their office is in the &lt;a class="reference external" href="http://dogpatchlabs.com/"&gt;Dogpatch Labs&lt;/a&gt; space for startups in Cambridge, Massachusetts. They are currently still in a closed beta, but they were nice enough to send me an invite to check it out.&lt;/p&gt;
&lt;p&gt;Normally when I check out a service for the first time, I look over the documentation to see what it can do, and what it can't do, and what I need to do in order to get my app up and running. DjangoZoom has a nice collection of documents that help guide you through the process of getting your application up and running on their platform. You need to be logged in, in order to read the documents, so I won't be able to link to any documents here, but if you are lucky enough to get an invite to DjangoZoom, I would check out the documents first, they will make the process much easier. They answer most of the common questions that you will have, and if you can't find your answer you can send them a message and they are very fast to respond.&lt;/p&gt;
&lt;p&gt;After reading the documents I learned a few things. First off, DjangoZoom is a little different then the other services, all of the previous services that I have reviewed ep.io, dotcloud, apphosted, gondor.io, had a command line client that you use to push your application up onto their servers.&lt;/p&gt;
&lt;p&gt;DjangoZoom doesn't have a command line client at all, they only have a web based control panel that you use to install and configure your application. Also, instead of pushing your application code up on to their servers, they pull the code down from your code repository at build time. Most of the other services try and make it so that you can run any python/wsgi based application, where as DjangoZoom, is only supporting Django applications.&lt;/p&gt;
&lt;p&gt;Not having a command line client has it's pros and cons. The main advantage of not having a command line client is simplicity. No need to install anything on your machine in order to deploy your code, all you need is a web browser. You can deploy your code from anywhere you have an internet connection. Making the application deployment as easy as possible will open up their service to people that are less technical, and might not be comfortable installing a command line client and running commands. The disadvantages of using just a web based console is that you are limited to what you can do in a browser. This is going to be less and less of an issue going forward as web browsers are getting more and more powerful all of the time. Also, just because they only offer a web based console now, doesn't mean they can't add a command line client later.&lt;/p&gt;
&lt;p&gt;Just like all of the other reviews I'm going to test out the system by deploying my blog onto their system and see how it goes.  My blog is currently hosted on bitbucket.org which uses mercurial, and currently djangozoom.com only offers support for git. In order to use djangozoom.com I needed to make a fork of my blog and put it on github. You can find my fork here: &lt;a class="reference external" href="https://github.com/kencochrane/kencochrane_blog"&gt;https://github.com/kencochrane/kencochrane_blog&lt;/a&gt; . They recommend github for git hosting, but you can use just about any git repo that is publicly accessible. If you have a private git repo, and you are on github just add the user djangozoom as a collaborator on your project. If you aren't on github and you have a private repo, you can add their public key to your repo, and it will give them permission to access your git repository from their servers.&lt;/p&gt;
&lt;div class="section" id="install-process"&gt;
&lt;h2&gt;Install Process&lt;/h2&gt;
&lt;p&gt;Once I had my code up on github I needed to make a few changes in order for it to work correctly, nothing major just needed to make my settings.py file a little more standard, which was pretty typical for the other services as well. Now that I had that done, I was ready to login to DjangoZoom and setup my application. Registering and logging into DjangoZoom was pretty straight forward, it was the same process as most online services, so just about anyone could do it with their eyes closed.&lt;/p&gt;
&lt;p&gt;After I logged in, I was able to add my application, here are the steps that I took to get my application up and running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clicked on &amp;quot;add a new project&amp;quot;&lt;/p&gt;
&lt;p&gt;Put in repo url: git://github.com/kencochrane/kencochrane_blog.git&lt;/p&gt;
&lt;p&gt;(Only SSH authentication is supported, so use either an unauthenticated public URL, or an SSH url (e.g. &lt;a class="reference external" href="mailto:git&amp;#64;github.com"&gt;git&amp;#64;github.com&lt;/a&gt;:yourname/project.git.   On github.org, use the Git Read-Only URL if your repo is public, or the SSH URL if private.)&lt;/p&gt;
&lt;p&gt;Hit Next.&lt;/p&gt;
&lt;p&gt;Entered my title &amp;quot;kencochrane_blog&amp;quot;&lt;/p&gt;
&lt;p&gt;selected django 1.3&lt;/p&gt;
&lt;p&gt;settings module : mysite.settings&lt;/p&gt;
&lt;p&gt;static media location : &amp;quot;static /site-media&amp;quot;&lt;/p&gt;
&lt;p&gt;no additional directories to add to python path&lt;/p&gt;
&lt;p&gt;put in my requirements.txt file, so that it knows where to find my pip requirements. You don't need to do this, djangozoom will scan your projects and find this out for you, but it didn't work for me, I have an issue with my application that I wasn't able to find, and it was causing issues with their autoscanner. I think this is more my fault then theirs.&lt;/p&gt;
&lt;p&gt;not putting in any extra requirements.&lt;/p&gt;
&lt;p&gt;base(repo) python package: put mysite.settings because my settings.py and root urls.py are at the top level of your repository. normally I don't do this, but I was following the example of this repo &lt;a class="reference external" href="https://github.com/natea/mezzanine-site"&gt;https://github.com/natea/mezzanine-site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Checked the &amp;quot;ready to roll, deploy my project now&amp;quot; check box and hit next&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first I had some errors with my requirements, I needed to remove django and mysql and update the python-twitter lib. Once I did that, it worked like a charm. The whole deploy process only took 2 minutes and 45 seconds.&lt;/p&gt;
&lt;p&gt;Wow that was fast, pretty impressive considering it needed to pull down all of the code from github, and download a ton of dependencies, and then do what ever it needs to do to set it up on to their servers. After talking with them about this, they said they hope to get it even faster, which would be pretty impressive.&lt;/p&gt;
&lt;p&gt;Now that I have my app deployed I can change some of the settings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I created an alias to for my app to &lt;a class="reference external" href="http://kencochrane.djangozoom.net"&gt;http://kencochrane.djangozoom.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also add a hostname like kencochrane.net.&lt;/p&gt;
&lt;p&gt;you can add a wildcard hostname as well. *.kencochrane.net.&lt;/p&gt;
&lt;p&gt;You can create a django superuser.&lt;/p&gt;
&lt;p&gt;You can also run any of your manage.py commands right from the web console.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This whole process was pretty straight forward and didn't take long to complete. Now that I have done it with one application, it will be much easier for the next one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cool-feature-request"&gt;
&lt;h2&gt;Cool Feature Request&lt;/h2&gt;
&lt;p&gt;Currently DjangoZoom makes it really easy to deploy your application to their servers. What would be cool is if they would make it easy to deploy common django applications to their service. For example on their blog they have a video to show how easy it is to &lt;a class="reference external" href="http://djangozoom.com/blog/2011/03/15/deploying-django-cms-45-seconds-djangozoom/"&gt;deploy django-cms to DjangoZoom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the video it shows them going out to github, forking and copying the link to the project, and then making some minor changes on the djangozoom settings page to get it to work correctly, and then it deploys. These steps weren't complicated but you needed to know what to do in order to get it to work. What if they made this a one step process?&lt;/p&gt;
&lt;p&gt;Click on a &amp;quot;install django-cms&amp;quot; link, and then their service would do what it needs to do to get it up and running on their service, and then returns you to a page where you can configure the app, add a django admin user, change the url, etc. That would allow someone who doesn't know anything about django an easy way to get a django-cms based website in no time. They could add one click installs for all kinds of common django projects, and expand outside of the developer community, which would expand their customer base. Those customers are the ones that really don't want to worry about server deploys and server management, and they are the ones that will pay more for those features.&lt;/p&gt;
&lt;p&gt;I'm sure this feature isn't on their roadmap, but I just thought I would throw it out there and see what people have to say about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="djangozoom-com-status"&gt;
&lt;h2&gt;DjangoZoom.com status&lt;/h2&gt;
&lt;p&gt;DjangoZoom is still in closed beta, which means they are not done with it yet, and there may be some occasional bugs that pop up here and there, but that is expected. Another thing about a beta is that not all of the features are finished yet. So before you jump in and try and get your application up and running, check and make sure that your application can run correctly on the service with the features they have available so far. Here is a run down of all the different features your application might need and where they stand in DjangoZoom today.&lt;/p&gt;
&lt;div class="section" id="logging"&gt;
&lt;h3&gt;Logging&lt;/h3&gt;
&lt;p&gt;You currently can't view your django or nginx logs at this time, they are working on this feature and hope to have it so that you can view your logs in the web based console in the future. In the meantime you can use a tool like django-sentry to view your django-logs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h3&gt;SSL&lt;/h3&gt;
&lt;p&gt;Not available yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="caching"&gt;
&lt;h3&gt;Caching&lt;/h3&gt;
&lt;p&gt;They currently don't support a caching server, they want to make sure they set it up correctly so that it is reliable and so that it is secure. In the meantime you can use django local memory caching.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;p&gt;They support PostgreSQL 8.4, if you are using mysql you will need to convert your app to support PostgreSQL. Since the Django ORM handles this by default, this shouldn't be a big deal unless you did something custom. No direct database access available. Loading data into system only supported by using django dumpdata/loaddata&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background-tasks"&gt;
&lt;h3&gt;Background tasks&lt;/h3&gt;
&lt;p&gt;Not available yet, celery support possible in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cronjobs"&gt;
&lt;h3&gt;Cronjobs&lt;/h3&gt;
&lt;p&gt;Not supported, they recommend &lt;a class="reference external" href="http://packages.python.org/APScheduler/"&gt;Advanced Python Scheduler&lt;/a&gt; or  &lt;a class="reference external" href="https://github.com/reavis/django-cron"&gt;django-cron&lt;/a&gt; which should run on their system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-access"&gt;
&lt;h3&gt;Shell Access&lt;/h3&gt;
&lt;p&gt;Not supported&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;p&gt;Not available yet, one planned for the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line-client"&gt;
&lt;h3&gt;Command line client&lt;/h3&gt;
&lt;p&gt;Not available yet, one planned for the future. Use the web base control panel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control"&gt;
&lt;h3&gt;Version control&lt;/h3&gt;
&lt;p&gt;Currently only supports git.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="videos"&gt;
&lt;h3&gt;Videos&lt;/h3&gt;
&lt;p&gt;Here are some videos of the DjangoZoom.com deployment process.&lt;/p&gt;
&lt;p&gt;&lt;iframe title="YouTube video player" width="480" height="390" src="http://www.youtube.com/embed/NCQxqw94Cgs" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;&lt;iframe title="YouTube video player" src="http://www.youtube.com/embed/DSe6R1ByS5k" width="480" frameborder="0" height="390"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I really enjoyed playing with DjangoZoom, it is quick and easy to use, it is still missing some key features that some people will need, but I'm sure they will add those soon enough. I wish them luck, and I can't wait to see them go live to the general public.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update:&lt;/h2&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to DjangoZoom. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="deployment"></category><category term="hosting"></category><category term="djangozoom"></category><category term="paas"></category></entry><entry><title>AppHosted.com Django Hosting Service Review</title><link href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/" rel="alternate"></link><updated>2011-05-18T12:17:48-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-05-18:blog/2011/05/apphosted-com-django-hosting-review/</id><summary type="html">&lt;p&gt;This post is the fourth in my series about the new Django hosting services that just recently hit the market. Previously I have reviewed &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt; , &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt; , and &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;dotCloud.com&lt;/a&gt; .This post reviews &lt;a class="reference external" href="http://AppHosted.com"&gt;AppHosted.com&lt;/a&gt; , another similar service that is currently in beta. I was lucky enough to get a sneak peak of this service before it was released to the general public, and here are my notes and impressions for the short time I had to play with the new service.&lt;/p&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://AppHosted.com"&gt;AppHosted.com&lt;/a&gt; uses a similar concept as the other django hosting services, they provide you with a command line client called metro that you use to interact with the service. Like the other command line clients, it is pretty much just a nice wrapper around their API, so anything you can do with the metro client you can do with their API. The client is used to configure your service and push your files up into their servers. Once the application is created and your code has been uploaded to their server, you can use their web based control panel to configure or manage your application.&lt;/p&gt;
&lt;p&gt;So that we can compare apples to apples I will go through the process of installing my blog onto the service so that we can see how it works with apphosted compared to the other services. It will also hopefully provide a very simple how to guide on how to install your application onto AppHosted.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-steps"&gt;
&lt;h2&gt;First Steps&lt;/h2&gt;
&lt;p&gt;Like all new projects the first thing that I like to do is create a new project directory and a new virtual environment for the project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# move into my projects directory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~projects/

&lt;span class="c"&gt;# make my virtual environment apphosted&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv apphosted

&lt;span class="c"&gt;# clone my blog&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;hg clone https://bitbucket.org/kencochrane/kencochranenet kencochrane_apphosted

&lt;span class="c"&gt;# move into the new project directory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_apphosted
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that I have a local working copy of my blog code and a new virtual environment I'm ready to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line-interface"&gt;
&lt;h2&gt;Command Line Interface&lt;/h2&gt;
&lt;p&gt;AppHosted has a command line client called Metro, it uses this client to configure and upload your application onto the apphosted servers. Metro only has three dependencies: httplib2, paramiko, and pycrypto, if you don't have them installed pip should handle that for you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# install the metro client&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install metroclient

Downloading/unpacking metroclient
Running setup.py egg_info &lt;span class="k"&gt;for&lt;/span&gt; package metroclient
Requirement already satisfied &lt;span class="o"&gt;(&lt;/span&gt;use --upgrade to upgrade&lt;span class="o"&gt;)&lt;/span&gt;: httplib2 in /Users/ken/.virtualenvs/apphosted/lib/python2.6/site-packages &lt;span class="o"&gt;(&lt;/span&gt;from metroclient&lt;span class="o"&gt;)&lt;/span&gt;
Requirement already satisfied &lt;span class="o"&gt;(&lt;/span&gt;use --upgrade to upgrade&lt;span class="o"&gt;)&lt;/span&gt;: paramiko in /Library/Python/2.6/site-packages &lt;span class="o"&gt;(&lt;/span&gt;from metroclient&lt;span class="o"&gt;)&lt;/span&gt;
Requirement already satisfied &lt;span class="o"&gt;(&lt;/span&gt;use --upgrade to upgrade&lt;span class="o"&gt;)&lt;/span&gt;: pycrypto&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;1.9 in /Library/Python/2.6/site-packages &lt;span class="o"&gt;(&lt;/span&gt;from paramiko-&amp;gt;metroclient&lt;span class="o"&gt;)&lt;/span&gt;
Installing collected packages: metroclient
Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; metroclient
changing mode of build/scripts-2.6/metro from &lt;span class="m"&gt;644&lt;/span&gt; to 755
changing mode of /Users/ken/.virtualenvs/apphosted/bin/metro to 755
Successfully installed metroclient
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="initial-data-django-admin-user"&gt;
&lt;h2&gt;Initial Data &amp;amp; Django admin user&lt;/h2&gt;
&lt;p&gt;At the moment Apphosted.com doesn't provide an easy way to create a django admin user, in order to create this user in your appHosted.com database you need to create it on a local database and then export that data into a fixture called initial_data.json.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# locally I run this command to dump the data, so that I can load on app hosted.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py dumpdata &amp;gt; initial_data.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is another way to create the django admin user, which I'll describe a little later. This would also be the same way that you would import any application data that you need in order for your application to run correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="metro-client"&gt;
&lt;h2&gt;Metro Client&lt;/h2&gt;
&lt;p&gt;One of the goals for appHosted.com was that they didn't want to require that you make lots of changes to your project directory structure  in order to use their service. In order to do this they need to do a lot more work to figure out what it is you want to do, and if they can't figure it out, they will ask you some questions.&lt;/p&gt;
&lt;p&gt;Now that we have our project directory and our initial_data.json file all ready, lets go ahead and deploy the application. Activate the virtual environment and go into your project directory. Kick off the metro client and answer the questions that pop up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# run the metro client.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;metro

Metro Application Manager 1.21
Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; Lumentica,  http://www.lumentica.com

Application directory &lt;span class="o"&gt;(&lt;/span&gt;i.e. path to project&lt;span class="o"&gt;)&lt;/span&gt;: ./
Application name: kencochraneblog
Application version: 0.1
Application description: Ken&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s AppHosted Blog
Application modules &lt;span class="o"&gt;(&lt;/span&gt;extra&lt;span class="p"&gt;;&lt;/span&gt; comma-separated&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="nv"&gt;South&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.7.3, django-activitysync&lt;span class="o"&gt;==&lt;/span&gt;0.2.2, django-debug-toolbar&lt;span class="o"&gt;==&lt;/span&gt;0.8.4, django-disqus&lt;span class="o"&gt;==&lt;/span&gt;0.3.4, django-memcache-status&lt;span class="o"&gt;==&lt;/span&gt;1.0.1, django-tagging&lt;span class="o"&gt;==&lt;/span&gt;0.3.1, django-xmlrpc&lt;span class="o"&gt;==&lt;/span&gt;0.1.2, &lt;span class="nv"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;4.1, &lt;span class="nv"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.6.0, &lt;span class="nv"&gt;oauth2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.2.0, python-memcached&lt;span class="o"&gt;==&lt;/span&gt;1.47, python-twitter&lt;span class="o"&gt;==&lt;/span&gt;0.8.1, &lt;span class="nv"&gt;simplejson&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;2.1.2, &lt;span class="nv"&gt;wsgiref&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.1.2, &lt;span class="nv"&gt;yolk&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.4.1, &lt;span class="nv"&gt;docutils&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.6, &lt;span class="nv"&gt;Pygments&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.3.1
WSGI module &lt;span class="o"&gt;(&lt;/span&gt;optional&lt;span class="o"&gt;)&lt;/span&gt;:
Paste config &lt;span class="o"&gt;(&lt;/span&gt;optional&lt;span class="o"&gt;)&lt;/span&gt;:
Fixtures &lt;span class="o"&gt;(&lt;/span&gt;optional&lt;span class="p"&gt;;&lt;/span&gt; comma-separated&lt;span class="o"&gt;)&lt;/span&gt;:
Sync database and load fixtures? &lt;span class="o"&gt;(&lt;/span&gt;y/n&lt;span class="o"&gt;)&lt;/span&gt;: y
Use SSL? &lt;span class="o"&gt;(&lt;/span&gt;y/n&lt;span class="o"&gt;)&lt;/span&gt;: n
Force SSL: &lt;span class="o"&gt;(&lt;/span&gt;y/n&lt;span class="o"&gt;)&lt;/span&gt;: n
Build complete.
Upload to AppHosted? &lt;span class="o"&gt;(&lt;/span&gt;y/n&lt;span class="o"&gt;)&lt;/span&gt;: y
AppHosted Username: kencochrane
AppHosted Password:
Deploying...
:: Configuring application environment...
:: Configuring application permissions...
:: Configuring application server...
:: Application deployed to server successfully...
:: Application deployment complete...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What did this do for us? It takes our application, and uploads it to their server, and then it installs all of our dependencies that we listed above. Then it configures it according to our answers, and tries to start it up, if we told it to, it will sync our database and load our fixtures. It also takes all of this information and stores it in a file called metro.config, so that we don't need to type that in every time if nothing has changed.&lt;/p&gt;
&lt;p&gt;You might have noticed that I needed to manually enter in all of my dependencies when prompted, when I asked about this, I was told that if I didn't enter all of the dependencies it would scan the project for a pip style requirements.txt file, and use that to load all of your dependencies. I haven't had a chance to test that out yet, since I already entered my requirements by hand, and once you do it, you don't need to do it again.&lt;/p&gt;
&lt;p&gt;My blog uses south for migration management, and at the time of this writing there is a bug, and it isn't correctly kicking off the migrate command during the database sync process. They are aware of the issue and they are working on a fix, but there is a work around in the meantime. I'll describe the work around shortly.&lt;/p&gt;
&lt;p&gt;Once your application is deployed it will almost immediately be available at &lt;a class="reference external" href="http:/"&gt;http:/&lt;/a&gt;/&amp;lt;your-app-name&amp;gt;.apphosted.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="log-files"&gt;
&lt;h2&gt;Log Files&lt;/h2&gt;
&lt;p&gt;In order to view the log files, you need to log into the web control panel and from there you can download the logs that you are interested in. At the moment they only support downloading the log files, which is a little inconvenient, it would be nice to have the ability to tail the logs, or see the last 50 or 100 lines in the control panel. I asked about this, and they agreed and said it is on their list of things to work on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-access"&gt;
&lt;h2&gt;Shell Access&lt;/h2&gt;
&lt;p&gt;Metro gives you the ability to shell into your application directory, so that you can kick off django management commands, and other cool things. One important thing to note is that when you login to the shell, it is a jailed shell, and you only have access to your own project, and with limited command access. This is done for security reasons. It is nice to know that your application runs in it's own jailed area, and no one else's applications can access your information.&lt;/p&gt;
&lt;p&gt;Setting up the shell access requires a few steps. Follow these directions to get the full details: &lt;a class="reference external" href="http://docs.apphosted.com/apphosted/apphosted_shell.html"&gt;http://docs.apphosted.com/apphosted/apphosted_shell.html&lt;/a&gt; , but basically it requires the following.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;create a ssh key if you don't already have one.&lt;/li&gt;
&lt;li&gt;Login to the web console and add your public key.&lt;/li&gt;
&lt;li&gt;In the web console browse over to your application Settings-&amp;gt;Tools page and click on the “Update Public Keys” button. (Don't forget about this step, or you won't be able to login.&lt;/li&gt;
&lt;li&gt;Use the metro client to open the shell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It would be real cool if we didn't have to do step 3, why can't it automatically update the public keys for all apps? I'm guessing it is a security reason. The first time, I didn't hit the update public keys button and I couldn't figure out why it wasn't working, and luckily one quick email to the support line, and they let me know what I did wrong, and I was up and running in no time.&lt;/p&gt;
&lt;p&gt;This is how you can kick off the shell, there are a bunch of command line args that you can pass as well, just do metro --help and it will show them all to you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;metro -s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: There is currently a bug that is preventing me from logging into the shell from my MacBook Pro OS X 10.6.7 using Python 2.6.1 . When I do it gives me this error. I have informed appHosted, and they said it looks like an issue with paramiko and python 2.6.1 on the Mac, not sure if it affects other python versions on other operating systems. They are working on the issue.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;metro -s
Metro Application Manager 1.21
Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; Lumentica,  http://www.lumentica.com

Application name: kencochraneblog
AppHosted Username: kencochrane
AppHosted Password:
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
File &lt;span class="s2"&gt;&amp;quot;/Users/ken/.virtualenvs/apphosted/bin/metro&amp;quot;&lt;/span&gt;, line 75, in run_shell
ssh.connect&lt;span class="o"&gt;(&lt;/span&gt;host, &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app_name, &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;port&lt;span class="o"&gt;)&lt;/span&gt;
File &lt;span class="s2"&gt;&amp;quot;/Library/Python/2.6/site-packages/paramiko/client.py&amp;quot;&lt;/span&gt;, line 278, in connect
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;family, socktype, proto, canonname, sockaddr&lt;span class="o"&gt;)&lt;/span&gt; in socket.getaddrinfo&lt;span class="o"&gt;(&lt;/span&gt;hostname, port, socket.AF_UNSPEC, socket.SOCK_STREAM&lt;span class="o"&gt;)&lt;/span&gt;:
gaierror: &lt;span class="o"&gt;[&lt;/span&gt;Errno 8&lt;span class="o"&gt;]&lt;/span&gt; nodename nor servname provided, or not known
Error: &lt;span class="o"&gt;[&lt;/span&gt;Errno 8&lt;span class="o"&gt;]&lt;/span&gt; nodename nor servname provided, or not known
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="work-arounds"&gt;
&lt;h2&gt;Work Arounds&lt;/h2&gt;
&lt;p&gt;Now that you know how to shell into your application, you can also kick off django management commands. I mentioned earlier that there was another way to create the django admin user, well here is how you do it. Login to the metro shell and then kick off the createsuperuser django management command. Logging into the shell and finding things isn't easy do to the added security so to save you some trouble this is what I did. Python isn't in your path so you need to put the fully qualified path to the virtual env's python. Not sure if the jailed shell allows you to edit your .profile if so, it might be nice to configure this so that you don't always have to do the full path.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create superuser (django admin)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;/ve/kencochraneblog/bin/python /app/kencochraneblog/mysite/manage.py createsuperuser

&lt;span class="c"&gt;# kicking off south migrations by hand.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;/ve/kencochraneblog/bin/python /app/kencochraneblog/mysite/manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My application's name is kencochraneblog, so make sure you replace my application name with yours, it should be something like this. replace app_name,django_project_dir and command with your variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;/ve/&amp;lt;app_name&amp;gt;/bin/python /app/&amp;lt;app_name&amp;gt;/&amp;lt;django_project_dir&amp;gt;/manage.py &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="background-tasks"&gt;
&lt;h2&gt;Background Tasks&lt;/h2&gt;
&lt;p&gt;AppHosted also supports background tasks via celery, they don't have the documentation created yet, but it should be available soon. They are also planning on supporting a cron like service, not sure if it will be cron, or something similar, but it should do, what you need it to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;p&gt;AppHosted provides a pretty nice API that allows you to do anything that the metro client does. This will allow you to write your own automation and management scripts to interact with your application. If you practice continuous deployment, it will allow you to automatically deploy the latest version of code on a post commit hook, if all of your tests pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h2&gt;Services&lt;/h2&gt;
&lt;p&gt;Right now they only support memcache for caching, and PostgreSQL for databases, but they plan on adding more services as they move forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I have been playing with AppHosted for a few weeks now, and I'm pretty happy with what they have so far. They still have a few issues to work out and they are still a work in progress, but I have been seeing improvements all of the time, so it will only be a matter of time before they are ready for the general public. Every time I came across an issue, they were quick to reply to my emails and solve my issues, or tell me where I was going wrong.  If you have any more questions I recommend checking out their documentation &amp;#64; &lt;a class="reference external" href="http://docs.apphosted.com/index.html"&gt;http://docs.apphosted.com/index.html&lt;/a&gt; . Check them out, and make sure you let me know what you think.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;They are now open to the general public.&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update:&lt;/h3&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to apphosted. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="hosting"></category><category term="apphosted"></category><category term="python"></category><category term="deployment"></category><category term="paas"></category></entry><entry><title>Deploying my Django application to dotCloud</title><link href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/" rel="alternate"></link><updated>2011-04-26T07:07:55-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-04-26:blog/2011/04/deploying-my-django-application-to-dotcloud/</id><summary type="html">&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;
&lt;p class="last"&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/"&gt;Deploying my Django application to dotCloud Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have recently wrote about &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt; and &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, two new python/django hosting services that are currently in beta. Another new service that has just recently hit the scene and is causing a lot of waves is &lt;a class="reference external" href="http://dotcloud.com"&gt;DotCloud.com&lt;/a&gt;. DotCloud is a little different for a number of reasons. Their service isn't targeting any one technology stack like ep.io and gondor.io with Python/Django/wsgi.&lt;/p&gt;
&lt;p&gt;DotCloud's goal is to provide a bunch of different independent services that you can use as building blocks to build your application. If you need a database, take your pick from one of the many they support. Need an application that uses Django or Rails on the front end, and Java in the backend, that is fine, you can do that too. They realize that most developers don't stick to one standard technology stack for all of their applications, so this allows you the flexibility to use the best tool for the job. It also gives you a nice playground to try out new services and see how they run without having to install, configure and maintain the service just for testing.&lt;/p&gt;
&lt;p&gt;DotCloud was part of the Y Combinator summer class of 2010, and they just recently &lt;a class="reference external" href="http://techcrunch.com/2011/03/22/paas-dotcloud-raises-10m-from-jerry-yang-benchmark-and-others/"&gt;raised $10 Million&lt;/a&gt;. With access to that much money, I'm guessing they will be hiring a bunch of people pretty quickly, and I'm sure we will be seeing their services expand as well.&lt;/p&gt;
&lt;p&gt;Like all new technologies, I want to play with them, and see if they live up to all of the hype. I was lucky enough to get a beta invite a few weeks ago, and I have been playing with it since. I decided that the best way to test it out would be to deploy my blog, and see how hard it would be. Here are the steps that I took to get my django based blog up and running on DotCloud. I ran into a few issues and I made sure that I put those in as well, so that if you get the same issue you can see how I solved it.&lt;/p&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Before I get started with any new service the first thing I usually do is look at the documentation. DotCloud has a nice list of documents along with some tutorials on how to get started. These 3 documents were the ones that I used the most.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/django/"&gt;http://docs.dotcloud.com/tutorials/django/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/components/mysql/"&gt;http://docs.dotcloud.com/components/mysql/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/firststeps/"&gt;http://docs.dotcloud.com/tutorials/firststeps/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-steps"&gt;
&lt;h2&gt;First Steps:&lt;/h2&gt;
&lt;p&gt;Like all cool services these days, dotcloud uses a python based CLI, so before we can get started we need to install the dotcloud client and configure it so that we can start using it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# create my dotcloud virtual environment.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv dotcloud

&lt;span class="c"&gt;# install dotcloud client using pip&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install dotcloud

&lt;span class="c"&gt;# create our application namespace called kencochrane&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud create kencochrane

&lt;span class="c"&gt;#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted&lt;/span&gt;
&lt;span class="c"&gt;#&amp;lt;key goes here&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the client all setup, and an application namespace, now we can start building our service. I have forked my blog repository on bitbucket so that I could make dotcloud specific changes to it and not effect my original repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# go into projects directory&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects

&lt;span class="c"&gt;# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally&lt;/span&gt;
hg clone https://bitbucket.org/kencochrane/kencochranenet_dotcloud kencochrane_dotcloud

&lt;span class="c"&gt;# go into the new directory.&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading through the documentation tells me that I need to create a wsgi.py file and put in the root of my project. Using &lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/django/#djangowsgipy"&gt;http://docs.dotcloud.com/tutorials/django/#djangowsgipy&lt;/a&gt; as a template, I created my wsgi.py file below. I had issues with the default template and I needed to add a directory to the sys.path so that wsgi could find my django apps correctly. Here is my finished file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c"&gt;# Ken added this, only thing that is different from the example template (not counting settings file name)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysite.settings&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt;
&lt;span class="n"&gt;djangoapplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;djangoapplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DotCloud uses &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/#requirements-files"&gt;PIP requirements files&lt;/a&gt; to manage your project dependencies. We already have our pip requirements file where it needs to be and named correctly so we don't need to do anything, but if we didn't have one, we would need to create one and put it in the root, and call it requirements.txt&lt;/p&gt;
&lt;p&gt;DotCloud requires that we put all of our static media in a directory called 'static' in the root of our project.  Because my static media is already found elsewhere, I need to create a directory called static and move all of my files into it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# we need to create a static directory to serve static media from (/static) .&lt;/span&gt;
mkdir -p static
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you use the django admin then you will need to create a postinstall script that will create a symlink under static for your django admin media files. Here is what mine looks like. If you use this as a template, don't forget to change the DJANGO_SETTINGS_MODULE variable to match your project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="c"&gt;# To import anything under django.*, we must set this variable.&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysite.settings&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Import the admin module. The media directory is right under it!&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.admin&lt;/span&gt;
&lt;span class="c"&gt;# Retrieve the absolute path of the admin module.&lt;/span&gt;
&lt;span class="n"&gt;admindir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contrib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Add /media behind it.&lt;/span&gt;
&lt;span class="n"&gt;mediadir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admindir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Compute the path of the symlink under the static directory.&lt;/span&gt;
&lt;span class="n"&gt;staticlink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;admin_media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# If the link already exists, delete it.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;islink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staticlink&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staticlink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Install the correct link.&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mediadir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;staticlink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make the script executable.&lt;/span&gt;
chmod +x postinstall
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we changed our location of our static media, we need to remember to update our settings.py file with the new settings. Here are my changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# edit settings.py file to the following.&lt;/span&gt;
&lt;span class="n"&gt;ADMIN_MEDIA_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/admin_media/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# change MEDIA_URL&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Deployment&lt;/p&gt;
&lt;p&gt;Now that we have our application's project structure all setup and configured the way dotcloud wants it, we can start up some services and then deploy our app. If you want to find out what services they have available, you can run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# find out which services that are available.&lt;/span&gt;
dotcloud deploy -h

You can chose among the following services:
  java          host any Java servlet &lt;span class="o"&gt;(&lt;/span&gt;also Clojure, Play!, and much more&lt;span class="o"&gt;)&lt;/span&gt;
  mysql         the worlds most popular open &lt;span class="nb"&gt;source &lt;/span&gt;database
  nodejs        run JavaScript processes &lt;span class="o"&gt;(&lt;/span&gt;including web apps&lt;span class="o"&gt;)&lt;/span&gt;
  php           host any PHP web app: Drupal, WordPress...
  php-worker    run background PHP processes
  postgresql    the worlds most advanced open &lt;span class="nb"&gt;source &lt;/span&gt;database
  python        host any Python/WSGI web app: Django, Pylons, Web2py...
  python-worker run background Python processes
  rabbitmq      AMQP message queue server
  redis         advanced key-value store
  ruby          host any Ruby/Rack web app: Rails, Sinatra...
  ruby-worker   run background Ruby processes
  smtp          authenticated SMTP relay to send e-mails reliably
  static        host static HTTP content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need a database for our blog, since it was originally setup to use mysql, lets use that one here. Start up a new mysql service called 'kencochrane.mysql'&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# start up the database service.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud deploy -t mysql kencochrane.mysql
Created &lt;span class="s2"&gt;&amp;quot;kencochrane.mysql&amp;quot;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's make sure that it was created, and find out some more about our new database instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# get the information about our new service&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud info kencochrane.mysqlcluster: wolverine
config:
    mysql_password: password_was_changed
created_at: 1303671517.96066
name: kencochrane.mysql
namespace: kencochrane
ports:
-   name: ssh
    url: ssh://dotcloud@mysql.kencochrane.dotcloud.com:3912
-   name: mysql
    url: mysql://root:password_was_changed@mysql.kencochrane.dotcloud.com:3913
state: running
&lt;span class="nb"&gt;type&lt;/span&gt;: mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see from above, we have a mysql database, it is running, and it lets us know the ssh and mysql urls and ports, along with the root password. Lets create our database. To do that we will login to the server and run some sql commands. (the sensitive information has been changed)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# connect to dotcloud mysql server instance&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run kencochrane.mysql -- mysql -u root -p

&lt;span class="c"&gt;# mysql -u root -p&lt;/span&gt;
Enter password:
Welcome to the MySQL monitor.  Commands end with &lt;span class="p"&gt;;&lt;/span&gt; or &lt;span class="se"&gt;\g&lt;/span&gt;.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# create the user and database and give user permissions to database.&lt;/span&gt;

Type &lt;span class="s1"&gt;&amp;#39;help;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;\h&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; help. Type &lt;span class="s1"&gt;&amp;#39;\c&amp;#39;&lt;/span&gt; to clear the current input statement.

mysql&amp;gt; create database blogdb&lt;span class="p"&gt;;&lt;/span&gt;
Query OK, &lt;span class="m"&gt;1&lt;/span&gt; row affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; create user &lt;span class="s1"&gt;&amp;#39;blog_username&amp;#39;&lt;/span&gt; identified by &lt;span class="s1"&gt;&amp;#39;strong_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
Query OK, &lt;span class="m"&gt;0&lt;/span&gt; rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.05 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; grant all on blogdb.* to &lt;span class="s1"&gt;&amp;#39;blog_user&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
Query OK, &lt;span class="m"&gt;0&lt;/span&gt; rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.04 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; flush privileges&lt;span class="p"&gt;;&lt;/span&gt;
Query OK, &lt;span class="m"&gt;0&lt;/span&gt; rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;Bye
Shared connection to mysql.kencochrane.dotcloud.com closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have our database all setup, we need to change our settings file so that it has all of the new information. Here is what mine looks like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# update your settings.py file.&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blogdb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blog_username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;strong_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysql.kencochrane.dotcloud.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3913&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further it is important to know the following. Dotcloud will pay attention to your .hgignore files. If you have a settings file in your .hgignore file so that it doesn't get saved in the repo, it will not push those changes up to the cloud. You will need to remove it from the .hgignore in order to get those files out there. It is also import to remember that only changes that are committed are pushed, so don't forget to commit your changes. If you wanted to be tricky you could use a post install script to pull down the file from a secure location and install it that way, if you want to make things super secure.&lt;/p&gt;
&lt;p&gt;Now that we have that behind us, lets get going. First we need to create a new python service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# deploy a new python app called kencochrane.blog&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud deploy --type python kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Service is now created so all we have to do is push our application to the new service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# push out your changes to the server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push kencochrane.blog .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now your code is out in the cloud, you just need to sync your database and run the migrations to get your database all setup, and you should be good to go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# sync the database&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run kencochrane.blog python current/mysite/manage.py syncdb

&lt;span class="c"&gt;# we use south so run migrate&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run kencochrane.blog python current/mysite/manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;now it works, just go to &lt;a class="reference external" href="http://blog.kencochrane.dotcloud.com/"&gt;http://blog.kencochrane.dotcloud.com/&lt;/a&gt; to see.&lt;/p&gt;
&lt;p&gt;If you need to look at the logs to see how it is going you can do it two ways. The first way will tail your logs for you to your console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud logs kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Open up a shell&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud ssh kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# nginx access and error logs.&lt;/span&gt;
/var/log/nginx/&amp;lt;app_name&amp;gt;.&lt;span class="o"&gt;{&lt;/span&gt;access,error&lt;span class="o"&gt;}&lt;/span&gt;.log

&lt;span class="c"&gt;# wsgi error logs&lt;/span&gt;
/var/log/supervisor/uswgi.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# restart the service&lt;/span&gt;
dotcloud restart kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DotCloud runs on Amazon's EC2 service, and last week while I was doing my testing, I was getting a bunch of errors, I wasn't sure if the errors were because this is a beta service, and they are still bugs in it, or if it was related to the amazon issues. Either way, I listed those errors below incase anyone else gets them. If I got the error I would just run the command again until it worked, sometimes it took 3 times before everything worked fine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# attempt 1&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push kencochrane.blog .DotCloud service unavailable &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No JSON object could be decoded&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.
Please try again later. If the problem persists, send an email to support@dotcloud.com.

&lt;span class="c"&gt;# attempt 2&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push kencochrane.blog .
&lt;span class="c"&gt;# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog&lt;/span&gt;
&lt;span class="c"&gt;# hg&lt;/span&gt;
remote: Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;[uploader.dotcloud.com]:1060,[174.129.15.77]:1060&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching &lt;span class="k"&gt;for&lt;/span&gt; changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added &lt;span class="m"&gt;1&lt;/span&gt; changesets with &lt;span class="m"&gt;3&lt;/span&gt; changes to &lt;span class="m"&gt;3&lt;/span&gt; files
Scheduling build
Fetching logs...
Build started...
mkdir: cannot create directory &lt;span class="sb"&gt;`&lt;/span&gt;126:afdea9036e83&lt;span class="s1"&gt;&amp;#39;: File exists&lt;/span&gt;
&lt;span class="s1"&gt;Failed to fetch tarball (&amp;lt;type &amp;#39;&lt;/span&gt;exceptions.ValueError&lt;span class="s1"&gt;&amp;#39;&amp;gt;: Failed to extract the tarball, abort.)&lt;/span&gt;
&lt;span class="s1"&gt;Build finished.&lt;/span&gt;
&lt;span class="s1"&gt;Shared connection to blog.kencochrane.dotcloud.com closed.&lt;/span&gt;

&lt;span class="s1"&gt;# 3rd time is a charm, it finally works.&lt;/span&gt;
&lt;span class="s1"&gt;$ dotcloud push kencochrane.blog .# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog&lt;/span&gt;
&lt;span class="s1"&gt;# hg&lt;/span&gt;
&lt;span class="s1"&gt;remote: Warning: Permanently added &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;uploader.dotcloud.com&lt;span class="o"&gt;]&lt;/span&gt;:1060,&lt;span class="o"&gt;[&lt;/span&gt;174.129.15.77&lt;span class="o"&gt;]&lt;/span&gt;:1060&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching &lt;span class="k"&gt;for&lt;/span&gt; changes
no changes found
Scheduling build
Fetching logs...
Build started...
.
. all of the files &lt;span class="o"&gt;(&lt;/span&gt;trimmed &lt;span class="k"&gt;for&lt;/span&gt; space&lt;span class="o"&gt;)&lt;/span&gt;
.
Fetched code revision 126:afdea9036e83
.
. all the requirments &lt;span class="o"&gt;(&lt;/span&gt;trimmed &lt;span class="k"&gt;for&lt;/span&gt; space&lt;span class="o"&gt;)&lt;/span&gt;
.
Cleaning up...
Reloading nginx configuration: nginx.
uwsgi: stopped
uwsgi: started
Build finished.

Shared connection to blog.kencochrane.dotcloud.com closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion:&lt;/h2&gt;
&lt;p&gt;Setting up my blog on DotCloud was fairly straightforward, the documentation helped guide me along the way. I did run into a few road blocks that stopped me in my tracks for a little while, but after some digging I was able to get past those issues. Hopefully this post will help you overcome the same issues I had, and make your deployment a little more smooth.&lt;/p&gt;
&lt;p&gt;The service is very flexible, which is going to be good for most developers, but with the added flexibility they added some complexity that doesn't exist on the other services. For example ep.io and gondor.io handle all database and user creation for you, so you don't need to know what commands to run to create the database and the user, and they also automatically add the database connection strings to your settings file. I for one don't mind the extra complexity considering I'm going to get the ability to have direct access to my database so that I can do what I want. Others, might not want to worry about that. If you are building an application for a client that isn't very tech savy, the more things that are automated the better.&lt;/p&gt;
&lt;p&gt;DotCloud is still in beta, and if you take a look at their &lt;a class="reference external" href="http://docs.dotcloud.com/components/roadmap/"&gt;roadmap&lt;/a&gt;, they have very ambitious goals. I for one can't wait to see how they progress. I have only gone into a few of the many things that dotcloud has to offer, I recommend that you try it out for yourself and leave me a comment letting me know how you liked it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-time"&gt;
&lt;h2&gt;Next time:&lt;/h2&gt;
&lt;p&gt;I have been lucky enough to get a sneak peak at &lt;a class="reference external" href="http://apphosted.com"&gt;http://apphosted.com&lt;/a&gt; a python/django hosting service similar to gondor.io and ep.io. I'm currently playing with the service now, once I'm finished I'll post my findings.&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update:&lt;/h3&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I &lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/"&gt;accepted a job with dotCloud&lt;/a&gt;. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;
&lt;p class="last"&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/"&gt;Deploying my Django application to dotCloud Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category><category term="deployment"></category><category term="hosting"></category><category term="dotcloud"></category><category term="paas"></category></entry><entry><title>My Experiences with ep.io</title><link href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/" rel="alternate"></link><updated>2011-04-18T21:09:57-04:00</updated><author><name>Ken Cochrane</name></author><id>tag:kencochrane.net,2011-04-18:blog/2011/04/my-experiences-with-epio/</id><summary type="html">&lt;p&gt;Over the last decade I have deployed my applications many different ways, I have used, self managed dedicated servers, fully managed dedicated servers, Virtual Privates Servers from Linode, RackSpace and Amazon, shared hosting from webfaction, and I also used Google App Engine. I have learned a lot of things along the way, but the one thing I learned the most is that managing the server and keeping it up and running isn't fun. The fun part is writing the applications, and watching them grow as people start to use them. If there was only a way to write the application and then let someone else manage all of the server stuff for you, for a reasonable price.&lt;/p&gt;
&lt;p&gt;The Ruby on Rails folks have had services like this for a while, both Heroku and EngineYard are pretty popular and make hosting your Rails applications much easier. When Heroku was bought by salesforce.com for $212M, it opened people eyes, and started to get them thinking. Why can't we do that for Django? I have been wanting to build a Django service like this for a while now, but with limited time and not knowing where to begin, my idea went no where. Recently there have been a bunch of  new services that have popped up that provided turn key Django hosting, very similar in nature to Heroku, and Google App Engine (Python, and Java). This has gotten me very excited, and I plan on trying them all out.&lt;/p&gt;
&lt;p&gt;One of these new services is called &lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt;, and it is run by Andrew Godwin (of Django South fame) and Ben Firshman. They are trying to make the hosting as simple as possible, so that you don't have to worry about servers at all. You write your application, deploy it to their service and they handle the rest. If you need to scale up your application, add load balancing, add more disk space, they will take care of that. This allows you the developer to spend your valuable time writing code instead of doing server maintenance. Best of all their pricing is based on usage, and they have a free tier, so if you have an application that you put out there, but it isn't using any resources, or very few resources, it might not cost you anything at all. So there is nothing stopping you from trying it out.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt; is still in beta, and not available to the public yet. The only way to get access is to put your name on a waiting list, and wait until you are sent an invite. I was lucky enough to get an invite early on, and I have been playing around with &lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt; for a new project that I'm working on.  I'm still in development with my application so it isn't public yet, but I have an app deployed and running. I personally feel that if you are lucky enough to be selected to a closed beta, that it is your duty to give as much feedback as possible, so that you can help make the application great. If you aren't going to be doing this, then you don't deserve the early access. That is why I'm writing this post, to help spread the word about ep.io, and to show people getting started with the service how easy it is to deploy their app.&lt;/p&gt;
&lt;p&gt;Before you start using a service like &lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt;, you need to do your research to make sure you know what it is you are getting with the service. Services like this aim to make hard tasks easy, and sometimes in doing so, they need to sacrifice features and flexibility. Knowing the pros and cons about a service before hand will help set your expectations accordingly so that you aren't disappointed later on in the process. It is important to note that as of this writing, they are still in beta, and thus still a work in progress, so if you are reading this, make sure you look at their website for the most up to date information. I will try and come back and update this post as the service deploys new features, and my experience with the service grows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application setup:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like most managed application services, you won't be able to deploy your application as is, you will need to make a few changes in order to get everything to work. Luckily for us, this step wasn't too hard. I used the documentation that ep.io provides along with the ep.io project skeleton (&lt;a class="reference external" href="https://github.com/idangazit/epio_skel"&gt;https://github.com/idangazit/epio_skel&lt;/a&gt;) as a good starting point. ep.io uses an ini based configuration file called epio.ini for all of your configuration information. The documentation does a pretty good job explaining the different sections, and if you look at the ep.io project skeleton, there is a good example of one already created for you.&lt;/p&gt;
&lt;p&gt;ep.io controls all aspects of your environment and because of this you don't know what your database information is, but that is OK, because if you setup your django settings.py file correctly, they will handle all of that for you. Once again, checkout the skeleton project or the documentation for the recommended settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your project is already using virtualenv and pip, this shouldn't be too difficult. If not, you will need to read up a little on pip and it's requirements files (&lt;a class="reference external" href="http://pip.openplans.org/requirement-format.html"&gt;http://pip.openplans.org/requirement-format.html&lt;/a&gt;) in order to make sure you load all of your dependencies correctly. ep.io already has some of the most common libraries installed, for a full list, follow this link: &lt;a class="reference external" href="http://www.ep.io/docs/runtime/#python-libraries"&gt;http://www.ep.io/docs/runtime/#python-libraries&lt;/a&gt;. If you need a non pure-python library that isn't on their list, just let them know and if it is reasonable, they will most likely install it for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deployment:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ep.io offers a simple control panel so that you can see what apps you have installed, how much they are costing you, how many resources they are using (database, bandwidth, CPU, disk usage, etc). It also allows you to configure your domains, set application permissions, and view the console log. Besides that, you need to do everything using their command line client. Before you can use the client, you will need to install it, you can do that using either pip or easy install.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install -U epio

&lt;span class="c"&gt;# or&lt;/span&gt;

easy_install -U epio
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have the client installed, this is where the fun begins. With the client you can create, suspend, resume, upload or delete your app. You can also use the client to kick off remote commands on your server such as django syncdb. See the official documentation for full details: &lt;a class="reference external" href="http://www.ep.io/docs/client/"&gt;http://www.ep.io/docs/client/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some notes and examples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#create app&lt;/span&gt;
epio create &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# suspend app&lt;/span&gt;
epio &lt;span class="nb"&gt;suspend&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;#resume app&lt;/span&gt;
epio resume &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# delete app&lt;/span&gt;
epio delete &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# django syncdb&lt;/span&gt;
epio django &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; syncdb

&lt;span class="c"&gt;# django run south migrations for all apps&lt;/span&gt;
epio django &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; migrate

&lt;span class="c"&gt;# django run south migrations for just one app called chicken&lt;/span&gt;
epio django &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; migrate chicken

&lt;span class="c"&gt;# bash command&lt;/span&gt;
epio run_command &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; bash

&lt;span class="c"&gt;# psql access to your database.&lt;/span&gt;
epio run_command &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; psql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Uploading App:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The epio upload command will use git in the background to sync up your local directory to your server. It will ignore the .pyc files and such, if you have other files and directories that you also want to ignore you can create a file called .epioignore and list the files and directories to ignore in it. The .epioignore file has the same syntax as a .gitignore file.&lt;/p&gt;
&lt;p&gt;The upload command is fine for most cases, but if you are already using git or mercurial, you can push your changes directly to ep.io, this allows you to do more of a continuous deployment setup, where you want to push to a central repo, run a bunch of tests and if it works push out to production. See this link for more info on uploading via git and mercurial &lt;a class="reference external" href="http://www.ep.io/docs/vcss/"&gt;http://www.ep.io/docs/vcss/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The ep.io databases are behind a firewall for security purposes, and because of this, you don't have direct access to the database, so if you are used to using a GUI database client, you are out of luck. The only way to get to your database right now is using the psql command tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# psql access to your database.&lt;/span&gt;
epio run_command &lt;span class="o"&gt;[&lt;/span&gt;-a &amp;lt;app_name&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; psql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Getting data into your databases:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two recommended ways for getting data into your database.&lt;/p&gt;
&lt;p&gt;You can create a SQL dump file, and add it to your project, and upload. Once it is up on the server you can run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;epio run_command -- psql -f dumpname.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also stream the dump over the network via SSH. (They suggest that you only do this with dumps that are 20MB or less in size.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;epio run_command psql &amp;lt; dumpname.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Background tasks:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ep.io supports both cronjobs and background tasks via Celery and Redis.&lt;/p&gt;
&lt;p&gt;Cron is pretty easy to setup, you have a section in the epio.ini file called cron where you put your normal cron commands. The syntax isn't exactly the same, so see the documentation for the differences. &lt;a class="reference external" href="http://www.ep.io/docs/epioini/#cron-section"&gt;http://www.ep.io/docs/epioini/#cron-section&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can use either plain celery or django-celery, what ever you want, they support most features, but they currently don't support periodic tasks, they hope to get to that in the future. In the meantime just use a cron for those.&lt;/p&gt;
&lt;div class="section" id="ep-io-vs-traditional-hosting"&gt;
&lt;h2&gt;ep.io vs traditional hosting&lt;/h2&gt;
&lt;p&gt;I originally wrote this Pro's and Con's section at stackoverflow.com, and I include it here as well.
&lt;a class="reference external" href="http://stackoverflow.com/questions/5117395/django-hosting-on-ep-io/5648323#5648323"&gt;http://stackoverflow.com/questions/5117395/django-hosting-on-ep-io/5648323#5648323&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="pros"&gt;
&lt;h3&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Server Management&lt;/em&gt;: You don't have to worry about your server setup at all, it handles everything for you. With a VPS, you would need to worry about making sure the server is up to date with security patches, and all that fun stuff, with this, you don't worry about anything, they take care of all that for you.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deployment&lt;/em&gt;: It makes deploying an app and having it up and running really quickly. deploying a new version of an app is a piece of cake, I just need to run one maybe two commands, and it handles everything for me.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pricing&lt;/em&gt;: you are only charged for what you use, so if you have a very low traffic website, it might not cost you anything at all.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scaling&lt;/em&gt;: They handle scaling and load balancing for you out of the box, no need for you to worry about that. You still need to write your application so that it can scale efficiently, but if you do, they will handle the rest.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Background tasks&lt;/em&gt;: They have support for cronjobs as well as background workers using celery.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Customer support&lt;/em&gt;: I had a few questions, sent them an email, and had an answer really fast, they have been great, so much better then I would have expected. If you run your own VPS, you really don't have anyone to talk to, so this is a major plus.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cons"&gt;
&lt;h3&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;DB access&lt;/em&gt;: You don't have direct access to the database, you can get to the psql shell, but you can't connect an external client GUI. This makes doing somethings a little more difficult or slow. But you can still use the django admin or fixtures to do a lot of things.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Limited services available&lt;/em&gt;: It currently only supports Postgresql and redis, so if you want to use MySQL, memcached, mongodb,etc you are out of luck.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Low level c libs&lt;/em&gt;: You can't install any dependencies that you want, similar to google app engine, they have some of the common c libs installed already, and if you want something different that isn't already installed you will need to contact them to get it added. &lt;a class="reference external" href="http://www.ep.io/docs/runtime/#python-libraries"&gt;http://www.ep.io/docs/runtime/#python-libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Email&lt;/em&gt;: You can't send or receive email, which means you will need to depend on a 3rd party for that, which is probably good practice anyway, but it just means more money.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;File system&lt;/em&gt;: You have a more limited file system available to you, and because of the distributed nature of the system you will need to be very careful when working from files. You can't (unless i missed it) connect to your account via (s)ftp to upload files, you will need to connect via the ep.io command line tool and either do an rsync or a push of a repo to get files up there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update:&lt;/h3&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud a competitor to ep.io. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="epio"></category><category term="deployment"></category><category term="hosting"></category><category term="python"></category><category term="paas"></category></entry></feed>