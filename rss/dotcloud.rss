<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>KenCochrane.net</title><link>http://kencochrane.net/</link><description></description><atom:link href="http://kencochrane.net/rss/dotcloud.rss" rel="self"></atom:link><lastBuildDate>Sat, 11 May 2013 12:17:48 -0400</lastBuildDate><item><title>Running Docker on Rackspace with Ubuntu</title><link>http://kencochrane.net/blog/2013/05/running-docker-on-rackspace-cloud/</link><description>&lt;p&gt;I have been playing with &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; a lot lately, and it got me wondering how hard it would be to run Docker on the different Cloud providers. I noticed there were already directions on how to install on &lt;a class="reference external" href="http://docs.docker.io/en/latest/installation/amazon.html"&gt;Amazon EC2&lt;/a&gt; but nothing for the Rackspace Cloud.&lt;/p&gt;
&lt;p&gt;If you would like to run &lt;a class="reference external" href="http://www.docker.io"&gt;Docker&lt;/a&gt; on the &lt;a class="reference external" href="http://www.rackspace.com/cloud/servers/"&gt;RackSpace Cloud&lt;/a&gt; using &lt;a class="reference external" href="http://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt; you're in luck. I just spent the afternoon figuring out how to get it installed on Ubuntu 12.04, 12.10, and 13.04, and I have included my notes below. 13.04 is the easiest to get up and running since it has the most recent kernel, but the others aren't too bad either, they just need a few more steps, to get them up to par.&lt;/p&gt;
&lt;p&gt;I would love to expand this to other distros on Rackspace, so if you come up with more, send me a note, and so I can link to them.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;12.04&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 12.04 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-04 3.2.0-38-virtual &lt;span class="c"&gt;#61-Ubuntu SMP Tue Feb 19 12:37:47 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now lets install Docker and it's dependencies. To keep things simple, we will use the Docker install script. It will take a couple of minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl get.docker.io | sudo sh -x
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Docker runs best with a new kernel, so lets use 3.8.x&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# add the ppa to get the right kernel package&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;deb http://ppa.launchpad.net/ubuntu-x-swat/r-lts-backport/ubuntu precise main &amp;gt; /etc/apt/sources.list.d/xswat.list

&lt;span class="c"&gt;# add the key for the ppa&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B22AB97AF1CDFA9

&lt;span class="c"&gt;# update packages again&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update

&lt;span class="c"&gt;# install the new kernel&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install linux-image-3.8.0-19-generic

&lt;span class="c"&gt;# update grub so it will use the new kernel after we reboot&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;update-grub

&lt;span class="c"&gt;# update-grub doesn&amp;#39;t always work so lets make sure. ``/boot/grub/menu.lst`` was updated.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst

&lt;span class="c"&gt;# nope it wasn&amp;#39;t lets manually update ``/boot/grub/menu.lst``  (make sure you are searching for correct kernel version, look at initial uname -a results.)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sed -i s/3.2.0-38-virtual/3.8.0-19-generic/ /boot/grub/menu.lst

&lt;span class="c"&gt;# once again lets make sure it worked.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic
kernel          /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hvc0
initrd          /boot/initrd.img-3.8.0-19-generic
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic &lt;span class="o"&gt;(&lt;/span&gt;recovery mode&lt;span class="o"&gt;)&lt;/span&gt;
kernel          /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash  single
initrd          /boot/initrd.img-3.8.0-19-generic

&lt;span class="c"&gt;# much better.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot server (either via command line or console)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;login again and check to make sure the kernel was updated&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server_ip&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-04 3.8.0-19-generic &lt;span class="c"&gt;#30~precise1-Ubuntu SMP Wed May 1 22:26:36 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;

&lt;span class="c"&gt;# nice 3.8.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure docker is running and test it out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start dockerd
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull busybox
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run busybox /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;12.10&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 12.10 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-10 3.5.0-25-generic &lt;span class="c"&gt;#39-Ubuntu SMP Mon Feb 25 18:26:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now lets install Docker and it's dependencies. To keep things simple, we will use the Docker install script. It will take a couple of minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl get.docker.io | sudo sh -x
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Docker runs best with a new kernel, so lets use 3.8.x&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# add the ppa to get the right kernel package&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;deb http://ppa.launchpad.net/ubuntu-x-swat/q-lts-backport/ubuntu quantal main &amp;gt; /etc/apt/sources.list.d/xswat.list

&lt;span class="c"&gt;# add the key for the ppa&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B22AB97AF1CDFA9

&lt;span class="c"&gt;# update packages again&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update

&lt;span class="c"&gt;# install the new kernel&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install linux-image-3.8.0-19-generic

&lt;span class="c"&gt;# make sure grub has been updated.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep 3.8.0- /boot/grub/menu.lst
title   Ubuntu 12.10, kernel 3.8.0-19-generic
kernel  /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hvc0
initrd  /boot/initrd.img-3.8.0-19-generic
title   Ubuntu 12.10, kernel 3.8.0-19-generic &lt;span class="o"&gt;(&lt;/span&gt;recovery mode&lt;span class="o"&gt;)&lt;/span&gt;
kernel  /boot/vmlinuz-3.8.0-19-generic &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/xvda1 ro quiet splash  single
initrd  /boot/initrd.img-3.8.0-19-generic

&lt;span class="c"&gt;# looks good. If it doesn&amp;#39;t work for you, look at the notes for 12.04 to fix.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reboot server (either via command line or console)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;login again and check to make sure the kernel was updated&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server_ip&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-12-10 3.8.0-19-generic &lt;span class="c"&gt;#29~precise2-Ubuntu SMP Fri Apr 19 16:15:35 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;

&lt;span class="c"&gt;# nice 3.8.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure docker is running and test it out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start dockerd
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull busybox
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run busybox /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;13.04&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Build an Ubuntu 13.04 server using the &amp;quot;Next generation cloud servers&amp;quot;, with your desired size. It will give you the password, keep that you will need it later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When the server is up and running ssh into the server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh root@&amp;lt;server-ip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Once you are logged in you should check what kernel version you are running.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uname -a
Linux docker-1304 3.8.0-19-generic &lt;span class="c"&gt;#29-Ubuntu SMP Wed Apr 17 18:16:28 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Let's update the server package list&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Now lets install Docker and it's dependencies. To keep things simple, we will use the Docker install script. It will take a couple of minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl get.docker.io | sudo sh -x
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure docker is running and test it out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;start dockerd
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull busybox
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run busybox /bin/echo hello world
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;Now that you have Docker running on a server, you can look at the different &lt;a class="reference external" href="http://docs.docker.io/en/latest/examples/"&gt;Docker examples&lt;/a&gt; in the documentation to see how it works, and then build something, and let everyone know what you have built. If you have any issues or suggestions, open a github issue and let everyone know. Docker is a new project, and it is moving quick, so any suggestions that you have might help shape the future of the project.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Cochrane</dc:creator><pubDate>Sat, 11 May 2013 12:17:48 -0400</pubDate><guid>tag:kencochrane.net,2013-05-11:blog/2013/05/running-docker-on-rackspace-cloud/</guid><category>docker</category><category>rackspace</category><category>dotcloud</category></item><item><title>Deploying my Django application to dotCloud: Part 2</title><link>http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/</link><description>&lt;p&gt;As I mentioned in a &lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/"&gt;recent blog post&lt;/a&gt;, in the 11 months since I wrote my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;first post on dotCloud&lt;/a&gt;, I now work there. Besides me working there, there has been a lot of other changes at &lt;a class="reference external" href="http://www.dotcloud.com"&gt;dotCloud&lt;/a&gt;, and I wanted to take the time to update my original post so that it was up to date and had all the recent information. I'm going to completely rewrite the old blog post here, with updated information, and leave the old one around for posterity.&lt;/p&gt;
&lt;p&gt;dotCloud's goal is to provide a bunch of different independent services that you can use as building blocks to build your application. If you need a database, take your pick from one of the many they support. Need an application that uses Django or Rails on the front end, and Java in the backend, that is fine, you can do that too. They realize that most developers don't stick to one standard technology stack for all of their applications, so this allows you the flexibility to use the best tool for the job. It also gives you a nice playground to try out new services and see how they run without having to install, configure and maintain the service just for testing.&lt;/p&gt;
&lt;p&gt;I'm going to go over the steps that it took to install my blog onto dotCloud, and hopefully answer some common questions along the way.&lt;/p&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Before I get started with any new service the first thing I usually do is look at the documentation. DotCloud has a nice list of documents along with some tutorials on how to get started. These 4 documents were the ones that I used the most.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/platform-overview/"&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/python/django/"&gt;http://docs.dotcloud.com/tutorials/python/django/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/services/mysql/"&gt;http://docs.dotcloud.com/services/mysql/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/services/mysql-masterslave/"&gt;http://docs.dotcloud.com/services/mysql-masterslave/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-steps"&gt;
&lt;h2&gt;First Steps:&lt;/h2&gt;
&lt;p&gt;Like all cool services these days, dotCloud uses a python based CLI, so before we can get started we need to install the dotCloud client and configure it so that we can start using it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# create my dotcloud virtual environment.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv dotcloud

&lt;span class="c"&gt;# install dotcloud client using pip&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install dotcloud

&lt;span class="c"&gt;# create our application called blog&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud create blog

&lt;span class="c"&gt;#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted&lt;/span&gt;
&lt;span class="c"&gt;#&amp;lt;key goes here&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;# if you were not prompted to enter your key you can run this command, and it will let you enter your API key again.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud register
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the client all setup, and an application created, now we can start building our service. I have forked my blog repository on github so that I could make dotCloud specific changes to it and not effect my original repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# go into projects directory&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects

&lt;span class="c"&gt;# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally&lt;/span&gt;
git clone git://github.com/kencochrane/kencochranenet_dotcloud.git kencochranenet_dotcloud

&lt;span class="c"&gt;# go into the new directory.&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading through the documentation tells me that I need to create a wsgi.py file and put in the root of my project. Using &lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/python/django/#wsgi-py"&gt;http://docs.dotcloud.com/tutorials/python/django/#wsgi-py&lt;/a&gt; as a template, I created my wsgi.py file below. I had issues with the default template and I needed to add a directory to the sys.path so that wsgi could find my django apps correctly. Here is my finished file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c"&gt;# Ken added this, only thing that is different from the example template (not counting settings file name)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysite.settings&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt;
&lt;span class="n"&gt;djangoapplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;djangoapplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DotCloud uses &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/#requirements-files"&gt;PIP requirements files&lt;/a&gt; to manage your project dependencies. We already have our pip requirements file where it needs to be and named correctly so we don't need to do anything, but if we didn't have one, we would need to create one and put it in the root, and call it requirements.txt&lt;/p&gt;
&lt;div class="section" id="services"&gt;
&lt;h3&gt;Services&lt;/h3&gt;
&lt;p&gt;When we add a service to our deployment stack, dotCloud gives us the appropriate connection information in a file called '/home/dotcloud/environment.json' that is available to us on our deployment container. This allows us to not have to hard code username/password and server urls in our settings.py file, and it also makes it a little more secure for us since we don't have to have that info in our source repository.&lt;/p&gt;
&lt;p&gt;This is how we use it. At the top of your settings.py file you will need to add the following. snippet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/home/dotcloud/environment.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have that added to the settings.py file, we now have a variable env that has all of the env settings we need.&lt;/p&gt;
&lt;p&gt;You could go a little further add some custom code to check if the environment.json file exists, and if it does, you know you are in production, so use that setup, or if not, then you must be in local mode, so use your local settings. If you want to get really cool, you can have your own json file that has a similar setup for local development, and if it doesn't find the dotcloud one, it could look for your own, and load your settings from that. This will allow you to use the same settings file for both production and dev, with only a little bit of code at the top to load the correct env file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database"&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;p&gt;Most applications need a database, and this blog is no different. This is how we setup our database to work with our blog on dotcloud. We are going to be using mysql for our database. With Django you need to set your database settings in your settings.py. This is how we setup a mysql database connection inside of our settings.py. Notice that the name of the database doesn't come from the env, you pick that yourself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blogdb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_LOGIN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_DB_MYSQL_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-the-database"&gt;
&lt;h3&gt;Create the Database&lt;/h3&gt;
&lt;p&gt;dotCloud gives you your own dedicated database, with full root access. With great power comes great responsibilities. One of those responsibilities is that you need to create your own database schemas, and users yourself. Which means you normally need to do something like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# connect to dotcloud mysql server instance&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run blog.db -- mysql -u root -p

&lt;span class="c"&gt;# mysql -u root -p&lt;/span&gt;
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or &lt;span class="se"&gt;\g&lt;/span&gt;.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# create the user and database and give user permissions to database.&lt;/span&gt;

Type &lt;span class="s1"&gt;&amp;#39;help;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;\h&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;help. Type &lt;span class="s1"&gt;&amp;#39;\c&amp;#39;&lt;/span&gt; to clear the current input statement.

mysql&amp;gt; create database blogdb;
Query OK, 1 row affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; create user &lt;span class="s1"&gt;&amp;#39;blog_username&amp;#39;&lt;/span&gt; identified by &lt;span class="s1"&gt;&amp;#39;strong_password&amp;#39;&lt;/span&gt;;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.05 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; grant all on blogdb.* to &lt;span class="s1"&gt;&amp;#39;blog_user&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.04 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; flush privileges;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;;Bye
Shared connection to database closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Does that look familiar? I have it here in case you want to do it the long way.&lt;/p&gt;
&lt;p&gt;To make things easier, we are going to create a small python script that will check to see if we have our database created, and if not, it will create it for us. This will make it so that we don't have to login into our database and do it by hand before we deploy. The file is called createdb.py and this is what it looks like. This script is for mysql. If you want a postgreSQL database, you can use this as a template and change it so that it will work with postgreSQL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_dbs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs: let&amp;#39;s go.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;django_settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;__import__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fromlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DATABASES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs: got settings.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;databases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;databases&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;db_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;creating database &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; on &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Check if database is already there.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA&lt;/span&gt;
&lt;span class="s"&gt;                         WHERE SCHEMA_NAME = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
            &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Database &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; doesn&amp;#39;t exist, lets create it.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;CREATE DATABASE IF NOT EXISTS &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.....&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;database already exists, moving on to next step.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;create_dbs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;create_dbs all done&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-a-cache"&gt;
&lt;h3&gt;Adding a cache&lt;/h3&gt;
&lt;p&gt;Since most of the blog content doesn't change much, it is a great candidate for caching. So we are going to take advantage of Django's built in caching abilities and add some caching to our blog. Normally I use &lt;a class="reference external" href="http://memcached.org"&gt;memcached&lt;/a&gt; for my caching, but dotCloud's memcached support is limited right now. The reason why it is limited is because memcached doesn't have any built in authentication mechanism, and in order to make sure it is secure, you need to run a special version of memcached that supports &lt;a class="reference external" href="http://code.google.com/p/memcached/wiki/SASLAuthProtocol"&gt;SASL&lt;/a&gt;, and most of the memcached clients don't support this. So instead of deploying an insecure service, they decided to not support it fully. There are ways to use it, but it involves all kind of complicated firewall rules and running something like stunnel. So it is possible, but it isn't very clean.&lt;/p&gt;
&lt;p&gt;Instead they recommend that you use &lt;a class="reference external" href="http://redis.io"&gt;redis&lt;/a&gt; instead, redis has the same caching abilities that memcached has, plus a lot more, including authentication. So we are going to use redis for our cache. In order to use redis, we will need to add the redis library because redis caching support isn't built into Django. In your requirements.txt file you will need to add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-redis==1.4.5&lt;/span&gt;&lt;/tt&gt; so that the libraries will be available for Django to use.&lt;/p&gt;
&lt;p&gt;Once you have the library installed, you will need to add these settings to your settings.py file so that django knows which redis server and password to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;redis_cache.cache.RedisCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;LOCATION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_CACHE_REDIS_HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_CACHE_REDIS_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;DB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DOTCLOUD_CACHE_REDIS_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;PARSER_CLASS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;redis.connection.HiredisParser&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# we also are going to use redis for our session cache as well.&lt;/span&gt;
&lt;span class="n"&gt;SESSION_ENGINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.sessions.backends.cached_db&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information about using redis as your cache for Django, check out these links.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/niwibe/django-redis"&gt;https://github.com/niwibe/django-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-redis/1.4.5"&gt;http://pypi.python.org/pypi/django-redis/1.4.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.3/topics/cache/"&gt;https://docs.djangoproject.com/en/1.3/topics/cache/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://answers.dotcloud.com/question/213/redis-cache-settings-for-django"&gt;http://answers.dotcloud.com/question/213/redis-cache-settings-for-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="django-admin"&gt;
&lt;h3&gt;Django Admin&lt;/h3&gt;
&lt;p&gt;We also need an easy way to create our django admin account for us. In order to do that I have this mkadmin.py script. This will default the password to &lt;a class="reference external" href="mailto:'P&amp;#64;s$w0rd1"&gt;'P&amp;#64;s$w0rd1&lt;/a&gt;', once you have your code installed, you will need to login to the admin account and change your password to something more secure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;P@s$w0rd1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_superuser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_staff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="media"&gt;
&lt;h3&gt;Media&lt;/h3&gt;
&lt;p&gt;We need to put our static and media files in the following locations: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;static=/home/dotcloud/data/static/&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;media=/home/dotcloud/data/media/&lt;/span&gt;&lt;/tt&gt;. Because of this we need to make sure we change our settings.py file, and setup an nginx.conf file to map to the correct locations. Here are the settings.py file changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# media settings&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dotcloud/data/media/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/media/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# static settings&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dotcloud/data/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# admin prefix&lt;/span&gt;
&lt;span class="n"&gt;ADMIN_MEDIA_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/admin/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the nginx.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/media/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/home/dotcloud/data&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/home/dotcloud/data&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="post-install"&gt;
&lt;h3&gt;Post Install&lt;/h3&gt;
&lt;p&gt;We are going to create a &lt;a class="reference external" href="http://docs.dotcloud.com/guides/postinstall/"&gt;postinstall&lt;/a&gt; script to handle all of the tasks we need to do after we install our code on the server. This is what will call our createdb.py, and mkadmin.py files from above, as well as syncing our database, running migrations and running collectstatic to move all static files into the right locations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
python createdb.py default
python mysite/manage.py syncdb --noinput
python mysite/manage.py migrate
python mkadmin.py
mkdir -p /home/dotcloud/data/media /home/dotcloud/data/static
python mysite/manage.py collectstatic --noinput
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to make sure your postinstall, createdb.py and mkadmin.py scripts are executable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make the script executable.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;chmod +x postinstall createdb.py mkadmin.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dotcloud-yml"&gt;
&lt;h3&gt;dotcloud.yml&lt;/h3&gt;
&lt;p&gt;Now that we have our application's project structure all setup and configured the way dotCloud wants it, we can configure our deployment stack. This is done with a file called dotcloud.yml. For more information about the dotcloud.yml file check out this link: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/build-file/"&gt;http://docs.dotcloud.com/guides/build-file/&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;www&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;db&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mysql&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;cache&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is telling us that we want 3 services, a python www service, a mysql db service, and a redis cache service. This is a very basic setup, and you can get a lot more complicated depending on what you want to achieve. Notice that this isn't setup for high availability because none of the instances are scaled. See the section about scaling below for more information. If you are running in a production app on dotCloud it is recommended that you scale all of your services so that they can withstand EC2 server crashes, and other unforeseen issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further it is important to know the following. Dotcloud will pay attention to your .gitignore files. If you have a settings file in your .gitignore file so that it doesn't get saved in the repo, it will not push those changes up to the cloud. You will need to remove it from the .gitignore in order to get those files out there. It is also import to remember that only changes that are committed are pushed, so don't forget to commit your changes. If you wanted to be tricky you could use a post install script to pull down the file from a secure location and install it that way, if you want to make things super secure.&lt;/p&gt;
&lt;p&gt;Everything is all setup, so all we have to do is push our application to dotCloud.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# push out your changes to the server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push blog .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service-info"&gt;
&lt;h3&gt;Service info&lt;/h3&gt;
&lt;p&gt;Once you push your code to dotCloud you can see what it looks like by running the info command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# get the information about our new services&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud info blog
cache:
    config:
        redis_password: &amp;lt;password&amp;gt;
        redis_replication: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;instances: 1
    &lt;span class="nb"&gt;type&lt;/span&gt;: redis
db:
    config:
        mysql_masterslave: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;        &lt;/span&gt;mysql_password: &amp;lt;password&amp;gt;
    instances: 1
    &lt;span class="nb"&gt;type&lt;/span&gt;: mysql
www:
    config:
        static: static
        uwsgi_processes: 4
    instances: 1
    &lt;span class="nb"&gt;type&lt;/span&gt;: python
    url: &amp;lt;url was here&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="scaling"&gt;
&lt;h3&gt;Scaling&lt;/h3&gt;
&lt;p&gt;Scaling is the ability to grow your application so that it can handle more traffic, or possible failures that might occur. With a normal non PaaS setup, scaling an application can be quite painful and time consuming, but with a PaaS it can be as easy as running a few commands. There are three types of scaling, Vertical, Horizontal, High Availability.&lt;/p&gt;
&lt;p&gt;Vertical scaling, means growing the service you have now so that it can get bigger. This is popular with databases, the bigger a database gets the more space and memory it needs.&lt;/p&gt;
&lt;p&gt;Horizontal scaling means creating more then one instance of a service so it spread the work between the different services, giving you greater capacity.&lt;/p&gt;
&lt;p&gt;High Availability means that you have more then one service running at a time, so that if one of the services has an issue, the other one will pick up the slack. This will help avoid downtime, when failures occur (EC2 instance crashes). Ideally when running in production, all of your services should be scaled for High Availability.&lt;/p&gt;
&lt;p&gt;There are two kinds of services, stateful, and stateless. Stateful services are services that holds persistent data. Examples of stateful services are mysql, redis, postgresql, solr, MongoDB and RabbitMQ.&lt;/p&gt;
&lt;p&gt;Horizontally High availability scaling a stateful service on dotCloud means creating a master/slave setup, which can switch the slave with the master automatically if the master has any issues. dotCloud supports HA scaling on MySQL, redis, and MongoDB.&lt;/p&gt;
&lt;p&gt;Stateful services scale like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mysql : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;redis : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;mongodb : 3 or 5 (using replica sets)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scaling a stateless and one of the supported stateful services is the same. You would just run the scale command line command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud scale app &lt;span class="nv"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For stateless applications, you are limited to a set number of scaling units, unless you are on the enterprise plan. If you need to have an application with lots of scale units, you should contact dotCloud, and let them know what you are planning to do, and they will advise you on how best to accomplish your goals.&lt;/p&gt;
&lt;p&gt;Link: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/scaling/"&gt;http://docs.dotcloud.com/guides/scaling/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="database-backups"&gt;
&lt;h3&gt;Database Backups&lt;/h3&gt;
&lt;p&gt;Just because you are hosting your application on dotCloud doesn't mean you shouldn't backup your data. The most important data to backup is your database. Luckily dotCloud makes it easy to back up your database. There is a very helpful guide on how to setup your database backups here: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/backups/"&gt;http://docs.dotcloud.com/guides/backups/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="email"&gt;
&lt;h3&gt;Email&lt;/h3&gt;
&lt;p&gt;If you need to send or receive email from your application, you can do that to. Because dotCloud runs on EC2, and EC2 is a popular place where SPAMMERS send SPAM from, it is best to use a 3rd party email provider to send your emails for you. Popular ones are &lt;a class="reference external" href="http://mailgun.net/"&gt;MailGun&lt;/a&gt;, &lt;a class="reference external" href="http://sendgrid.com/"&gt;SendGrid&lt;/a&gt;, &lt;a class="reference external" href="http://www.critsend.com/"&gt;CritSend&lt;/a&gt;, and &lt;a class="reference external" href="http://aws.amazon.com/ses/"&gt;Amazon SES&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can set this up a couple of different ways. The first way is the easiest way possible, it allows you to configure the SMTP settings for each service. You would do it like this (see below). You can manually set the smtp settings for that service, and when your application needs to send an email it will use those settings. This is the most simple setup, but there are downsides to this approach. You would need to set this for each service, if you have more then one that will be duplicated everywhere. Also if you want to change your settings, you will need to destroy your service and recreate it, since those configs can only be set once when the service is created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;www&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp.mailgun.org&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;25&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postmaster@company.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;YourMailGunPassword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A better approach would be to use dotCloud's SMTP service. The SMTP service is built to receive emails from your services and forward them to the appropriate location. It is best to use a 3rd party email provider, but you can also use the typical poor mans solution, where you use gmail to send your emails. Be careful when using gmail, because you aren't aloud to send a lot of emails via gmail, once you hit your daily limit you will be blocked, so this is fine for a few emails a day, don't trust it for everyday stuff. Also, the emails will always be coming from your gmail address, fine for system emails, but not if you are trying to run a legit business.&lt;/p&gt;
&lt;p&gt;Here is an example using mailgun.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;mailer&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp.mailgun.org&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;587&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postmaster@yourmailgundomain.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;YourMailgunPassword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is an example using gmail.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;mailer&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_server&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;smtp.gmail.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;587&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_username&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;your_gmail_username@gmail.com&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;smtp_relay_password&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Your_Gmail_Password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have these all setup, they will be available in your environment.json file.&lt;/p&gt;
&lt;p&gt;If you want to receive email, it is best to use a service like &lt;a class="reference external" href="http://mailgun.net/"&gt;MailGun&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/guides/emails/"&gt;http://docs.dotcloud.com/guides/emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/services/smtp/"&gt;http://docs.dotcloud.com/services/smtp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cron-jobs"&gt;
&lt;h3&gt;Cron jobs&lt;/h3&gt;
&lt;p&gt;If your app needs to run cron jobs, follow the steps in this guide: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/periodic-tasks/"&gt;http://docs.dotcloud.com/guides/periodic-tasks/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="celery"&gt;
&lt;h3&gt;Celery&lt;/h3&gt;
&lt;p&gt;This blog doesn't really have a need for celery, but dotCloud does support it. For more information follow this link: &lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/python/django-celery/"&gt;http://docs.dotcloud.com/tutorials/python/django-celery/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="s3fs"&gt;
&lt;h3&gt;S3FS&lt;/h3&gt;
&lt;p&gt;If you store data on s3 you can mount your s3 bucket so that you can have access to s3 from your application, just like it was a local directory on your container. This is helpful for storing files that are uploaded by your visitors, or to share files between different web processes. Follow these instructions to set it up: &lt;a class="reference external" href="http://docs.dotcloud.com/guides/s3fs/"&gt;http://docs.dotcloud.com/guides/s3fs/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="logs"&gt;
&lt;h3&gt;Logs&lt;/h3&gt;
&lt;p&gt;If you need to look at the logs to see how it is going you can do it two ways. The first way will tail your logs for you to your console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud logs blog.www
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Open up a shell&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud ssh blog.www
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# nginx access and error logs.&lt;/span&gt;
/var/log/nginx/&amp;lt;app_name&amp;gt;.&lt;span class="o"&gt;{&lt;/span&gt;access,error&lt;span class="o"&gt;}&lt;/span&gt;.log

&lt;span class="c"&gt;# wsgi error logs&lt;/span&gt;
/var/log/supervisor/uswgi.log
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="restart-service"&gt;
&lt;h3&gt;Restart Service&lt;/h3&gt;
&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# restart the service&lt;/span&gt;
dotcloud restart blog.www
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="links"&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.dotCloud.com"&gt;http://www.dotCloud.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Cochrane</dc:creator><pubDate>Fri, 23 Mar 2012 14:58:01 -0400</pubDate><guid>tag:kencochrane.net,2012-03-23:blog/2012/03/deploying-a-django-application-on-dotcloud/</guid><category>dotcloud</category><category>django</category><category>paas</category><category>python</category><category>hosting</category><category>deployment</category></item><item><title>I'm now working for dotCloud</title><link>http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/</link><description>&lt;p&gt;A lot has happened in the 11 months since I wrote my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;first blog article on dotCloud&lt;/a&gt;. There was an Egyptian revolution, a royal wedding, a new iPhone and iPad, Osama bin Laden was killed, and on a more personal note, I left my job at CashStar and I now work for &lt;a class="reference external" href="http://www.dotCloud.com"&gt;dotCloud&lt;/a&gt;. In the grand scheme of things, my job change was nothing compared to those big events of the past 11 months, but it was pretty big for me.&lt;/p&gt;
&lt;p&gt;I had worked for CashStar.com for over 3.5 years, and I was there from pretty much the beginning, so it was hard for me to walk away. When I started doing research on PaaS's over a year ago, I did it so that I could learn more about how these systems were built, so that I could take that knowledge and bring it to CashStar to improve our infrastructure there.&lt;/p&gt;
&lt;p&gt;A funny thing happened as I was doing my research, I started to really love the technology that went into making a PaaS, and over time, I thought that it was such a cool concept, that I wanted to know everything there was to know about them, so that I could build my own. After trying out all of the PaaS's that I could find, and learning and blogging about them. I decided I would see what it would take to build my own PaaS. The first thing I realized is that there is a lot more going on under the covers then one might imagine, and this wasn't going to be an easy problem to solve. If it was easy, then everyone and their brother would have one, but they don't. There are a lot of PaaS's out there now, but if you think about it, that is nothing compared to the number of web hosting companies.&lt;/p&gt;
&lt;p&gt;After realizing that this isn't something I was going to be able to build in a weekend, I kind of lost motivation. I have 2 kids and a job that was making me work a ton of hours, so the few extra hours I had in a day where spent hanging out with my family, and what ever was left over was spent playing one of my many sports, or getting some much needed sleep. So, for a while my dream of making my own PAAS faded for a little while, but it never disappeared.&lt;/p&gt;
&lt;p&gt;As fate would have it, a few months later I ended up talking with the dotCloud guys, and next thing you know they made me an offer to join their company. After talking it over with my wife, I decided to go for it. Since dotCloud is based in San Francisco, I'll be working from home in Maine, and telecommuting to work each day from my home office. I have been working for dotCloud for about 5 weeks so far, and it has been awesome. I have learned so many new and cool things in the past month, it has been great. The dotCloud team is top notch and I can't wait to learn even more from them.&lt;/p&gt;
&lt;p&gt;My title at dotCloud is Site Reliability Engineer. You might have never heard about that title before. To be honest I had never heard of it before myself. My primary goal is to make sure that the dotCloud platform is as stable and reliable as it could be. One of our goals is to automate everything, so that if something fails, we have a process that will notice this, and auto correct it for us. Since dotCloud is build on top of Amazon EC2, things can happen at anytime, and they do. So when they happen, we need a self healing platform that will fix itself when things break in the middle of the night. If it doesn't fix it self, someone will need to be woken up to fix it, and no one wants that.&lt;/p&gt;
&lt;p&gt;Another one of my goals is to make sure that dotCloud is the best developers platform available. I want to make it so that developers can do what ever they want to do, and if they have any issues, give them the tools they need to solve their own problems. If they get stuck, we will be there to help them through their problems, via IRC, or email support.&lt;/p&gt;
&lt;p&gt;Every developer writes code with bugs, and if you finds one that tells you otherwise, they are lying.  dotCloud allows developers to see all of their application and system logs easily, and also gives them direct SSH access to the containers where their code is running so that they have the ability to see why something isn't working. Most PaaS's don't provide this, which makes it harder to figure out why the code that you wrote isn't working the way that you had planned.&lt;/p&gt;
&lt;p&gt;One of the cool things that dotCloud does is that they are heavy believers in &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Eating_your_own_dog_food"&gt;dog fooding&lt;/a&gt;. They encourage employees to use the platform as much as possible, and it is amazing to know that a lot of dotCloud runs on dotCloud. This helps smooth out all of the different developer pain points, and makes for a better platform overall.&lt;/p&gt;
&lt;p&gt;They also listen to what their users have to say, and take it to heart. If you have used dotCloud in the past, and were turned off for some reason, you should come back and try it again, it has changed a ton, and the issue that you might have had a while ago, might no longer be there. If you are still having issues, please tell us, because if we don't know that it is an issue for you, there is no way we can fix it.&lt;/p&gt;
&lt;p&gt;One of the first things that I noticed when I joined was the support that they offer, it is unbelievable. I get an email for every single support ticket that is created, and the responses. I have learned a lot just by reading those emails. We get tickets for everything from sticker requests all the way to &amp;quot;my website is having issues, can you help&amp;quot;. Each day there is at least one engineer dedicated to answering support tickets, and that is all they do for the day, everything else takes a back seat. The same people who are building dotCloud are the ones answering your questions, so when you get an answer you know it is coming directly from the source. Most tickets are responded to and closed really quickly. It wasn't always this good, but it is something they work on improving all of the time, because they realize, that it is important to have a quick and helpful support staff around to solve your problems when you have them.&lt;/p&gt;
&lt;p&gt;Now that I'm on the inside, I can see and hear about all of the cool new things they are working on for the future, and I'm really excited. If you are a developer and you haven't tried dotCloud yet, or if you have tried them a while ago and you haven't tried them recently you should check them out. What are you waiting for it, is FREE, it won't cost you anything to try it out, and you never know it might change your life.&lt;/p&gt;
&lt;p&gt;One of the sad things about working for dotCloud will mean that I won't be able to blog about the PaaS industry that much anymore. I'm going to try and avoid doing it, due to the conflict of interest. I will keep around my old blog post so that everyone can benefit, and I'll try to keep them up to date, but besides that I won't be writing about anything unless it is really cool.&lt;/p&gt;
&lt;p&gt;If you have tried out dotCloud, let me know what you think, and let me know if there is anything we can do to make it better for you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Cochrane</dc:creator><pubDate>Fri, 23 Mar 2012 12:20:29 -0400</pubDate><guid>tag:kencochrane.net,2012-03-23:blog/2012/03/im-now-working-for-dotcloud/</guid><category>dotcloud</category><category>cashstar</category><category>job</category><category>paas</category></item><item><title>Running sentry on DotCloud</title><link>http://kencochrane.net/blog/2012/01/running-sentry-on-dotcloud/</link><description>&lt;p&gt;&lt;a class="reference external" href="https://github.com/dcramer/sentry"&gt;Sentry&lt;/a&gt; is a realtime event logging and aggregation platform. At it’s core it specializes in monitoring errors and extracting all the information needed to do a proper post-mortum without any of the hassle of the standard user feedback loop.&lt;/p&gt;
&lt;p&gt;The main feature of sentry and the ability to send all of your application logs to one place, and then aggregate them, so that you only get one error email for the same error. This will keep your mailbox from flooding, when something goes wrong.&lt;/p&gt;
&lt;p&gt;Putting your logging server on a different server or network then your production servers is a good idea. If something goes wrong, and you can't access your servers, you can still see what errors were getting thrown before the servers started having problems.&lt;/p&gt;
&lt;p&gt;Follow these easy steps to get sentry up and running on DotCloud.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a place to store your project&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p ~/projects
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Go into the projects directory&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Clone git repo from github, requires git client&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/kencochrane/sentry-on-dotcloud.git
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Go into the new project directory&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;sentry-on-dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Creating the virtualenv (using virtualenvwrapper, virtualenv, and pip)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv --no-site-packages --distribute sentry-on-dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Install all of the Sentry requirements via pip and the requirements.txt file.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;Installing the dotCloud client  &lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/install/"&gt;http://docs.dotcloud.com/firststeps/install/&lt;/a&gt; (here are the steps for Linux and Mac OSX)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo pip install -U dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="8"&gt;
&lt;li&gt;Sign up for a dotcloud account &lt;a class="reference external" href="https://www.dotcloud.com/accounts/register/"&gt;https://www.dotcloud.com/accounts/register/&lt;/a&gt; if you haven't already.&lt;/li&gt;
&lt;li&gt;The first time you use the dotCloud account you will need to add your api key. So type dotcloud and follow the steps. You can find your API key at &lt;a class="reference external" href="http://www.dotcloud.com/account/settings"&gt;http://www.dotcloud.com/account/settings&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="10"&gt;
&lt;li&gt;Create your dotcloud application&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud create sentry
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="11"&gt;
&lt;li&gt;Change the SENTRY_KEY settings in these files, to the same unique value.&lt;ul&gt;
&lt;li&gt;sentry_conf.py&lt;/li&gt;
&lt;li&gt;sentryproj/settings.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is an example on how to generate a good unique key that you can use in the files above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;KEY_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KEY_LENGTH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;6+tSEh1qYwDuTaaQRcxUjMDkvlj4z9BU/caCFV5QKtvnH7ZF3i0knA==&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="12"&gt;
&lt;li&gt;Add your email address to SENTRY_ADMINS in sentryproj/settings.py . This will send you emails when an error occurs.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SENTRY_ADMINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;youremail@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="13"&gt;
&lt;li&gt;Push your code into dotcloud&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push sentry .
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="14"&gt;
&lt;li&gt;Find out your application url&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud url sentry
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="15"&gt;
&lt;li&gt;Open url in your browser and start using sentry on dotcloud.&lt;/li&gt;
&lt;li&gt;First things first you should change the admin password from the default one that was created on deployment. The default username and password are found in the mkadmin.py file.&lt;/li&gt;
&lt;li&gt;Test out sentry using the raven client to make sure it is working as it should. Open up a python shell on your local machine and do the following.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Replace the server_url with your sentry url you found out in step 14. Make sure it ends in /store/ . Also make sure you replace my_key with your sentry key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;raven&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;server_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://sentry-username.dotcloud.com/store/&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1234-CHANGEME-WITH-YOUR-OWN-KEY-567890&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;server_url&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;My event just happened!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;48ba88039e0f425399118f82173682dd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3313fc5636650cccaee55dfc2f2ee7dd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you go to the sentry webpage you should see your test message. If not, double check everything, and see if there was any errors during the send.&lt;/p&gt;
&lt;p&gt;Once this is all up and running you can install the raven client in your applications, and start sending your logs to sentry.&lt;/p&gt;
&lt;ol class="arabic simple" start="18"&gt;
&lt;li&gt;Optional: If you don't like the URL they gave you, you can use your custom domain. Assuming your application was sentry.www and your domain was www.example.com you would do the following&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud &lt;span class="nb"&gt;alias &lt;/span&gt;add sentry.www www.example.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you get comfortable with how things work, don't forget to change your DEBUG setting to False. Go ahead and fork my project and get started today.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;For more info about dotcloud, sentry, and Raven and what you can do with with it. Check out their docs&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Sentry on DotCloud GitHub repo : &lt;a class="reference external" href="https://github.com/kencochrane/sentry-on-dotcloud"&gt;https://github.com/kencochrane/sentry-on-dotcloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DotCloud overview: &lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/platform-overview/"&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sentry Documentation: &lt;a class="reference external" href="http://sentry.readthedocs.org/en/latest/index.html"&gt;http://sentry.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Raven Documentation: &lt;a class="reference external" href="http://raven.readthedocs.org/en/latest/index.html"&gt;http://raven.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Links:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Virtualenv : &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;http://pypi.python.org/pypi/virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pip : &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;http://www.pip-installer.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;virtualenvwrapper : &lt;a class="reference external" href="http://www.doughellmann.com/projects/virtualenvwrapper/"&gt;http://www.doughellmann.com/projects/virtualenvwrapper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git : &lt;a class="reference external" href="http://git-scm.com/"&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Cochrane</dc:creator><pubDate>Sat, 28 Jan 2012 23:00:33 -0500</pubDate><guid>tag:kencochrane.net,2012-01-28:blog/2012/01/running-sentry-on-dotcloud/</guid><category>dotcloud</category><category>django</category><category>sentry</category><category>python</category></item><item><title>Installing DjangoCMS on dotCloud in 12 easy steps</title><link>http://kencochrane.net/blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/</link><description>&lt;p&gt;Do you want to use Django-cms on dotcloud but don't know where to start? All you need to do is follow these 12 easy steps, they will get you on your way.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a place to store your project&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkdir -p ~/projects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Go into the projects directory&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ cd ~/projects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Clone git repo from github, requires git client.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ git clone git://github.com/kencochrane/django-cms-dotcloud.git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Go into the new project directory&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ cd django-cms-dotcloud&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Creating the virtualenv (using virtualenvwrapper, virtualenv, and pip)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ mkvirtualenv --no-site-packages --distribute django-cms-dotcloud&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Installing the dotCloud client  &lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/install/"&gt;http://docs.dotcloud.com/firststeps/install/&lt;/a&gt; (here are the steps for Linux and Mac OSX)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ sudo pip install -U dotcloud&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sign up for a dotcloud account &lt;a class="reference external" href="https://www.dotcloud.com/accounts/register/"&gt;https://www.dotcloud.com/accounts/register/&lt;/a&gt; if you haven't already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The first time you use the dotcloud account you will need to add your api key. So type dotcloud and follow the steps. You can find your API key at &lt;a class="reference external" href="http://www.dotcloud.com/account/settings"&gt;http://www.dotcloud.com/account/settings&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create your dotcloud application&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud create mycmsapp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Push your code into dotcloud&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud push mycmsapp .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Find out your application url.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud url mycmsapp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open url in your browser and start using djangoCMS on dotcloud.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Optional: If you don't like the URL they gave you, you can use your custom domain. Assuming your application was ramen.www and your domain was www.example.com you would do the following.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ dotcloud alias add ramen.www www.example.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you get comfortable with how things work, you could add more plug-ins, create your own custom templates and then change your DEBUG setting to False. So go ahead &lt;a class="reference external" href="https://github.com/kencochrane/django-cms-dotcloud/fork"&gt;fork my project on github&lt;/a&gt;  and get started.&lt;/p&gt;
&lt;p&gt;After you make changes to your local project directory, you can test it on the server by running the dotcloud push command again.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;For more info about dotcloud and django-cms and what you can do with with it. check out their docs&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/firststeps/platform-overview/"&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.django-cms.org/en/documentation/"&gt;https://www.django-cms.org/en/documentation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;strong&gt;dotcloud&lt;/strong&gt; : &lt;a class="reference external" href="http://dotcloud.com"&gt;http://dotcloud.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt; : &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;http://pypi.python.org/pypi/virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pip&lt;/strong&gt; : &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;http://www.pip-installer.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virtualenvwrapper&lt;/strong&gt; : &lt;a class="reference external" href="http://www.doughellmann.com/projects/virtualenvwrapper/"&gt;http://www.doughellmann.com/projects/virtualenvwrapper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git&lt;/strong&gt; : &lt;a class="reference external" href="http://git-scm.com/"&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Cochrane</dc:creator><pubDate>Sat, 31 Dec 2011 13:26:42 -0500</pubDate><guid>tag:kencochrane.net,2011-12-31:blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/</guid><category>django</category><category>djangocms</category><category>dotcloud</category><category>paas</category></item><item><title>Django Hosting Roundup: (Ep.io vs Gondor.io vs DotCloud vs Heroku vs AppHosted vs DjangoZoom) Who wins?</title><link>http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/</link><description>&lt;div class="section" id="updates"&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Updated 2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with dotCloud. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments below.&lt;/li&gt;
&lt;li&gt;Updated 1/26/2012: Updated Gondor.io with info from Donald Stufft.&lt;/li&gt;
&lt;li&gt;Updated 01/24/2012: changed gondor.io to include SSL support&lt;/li&gt;
&lt;li&gt;Updated 01/01/2012: Added Heroku and updated ep.io, gondor.io, and dotcloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;For the past 6 weeks I have been trying out all of the new django/python hosting services that are currently available today, and I have been writing about my experiences along the way. It only makes sense to conclude this series of articles with one last article comparing all of the services against each other. It is important to note that many of these services are still in development and aren't even available to the general public, so I'll try to keep this article up to date as these services change over time. With that said, don't take my word for it, go out and try all of these services on your own and find out which one you like the best, you won't be disappointed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quick-recap"&gt;
&lt;h2&gt;Quick Recap&lt;/h2&gt;
&lt;div class="section" id="ep-io"&gt;
&lt;h3&gt;ep.io&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;My Experiences with ep.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pretty solid offering, with a nice set of features and a decent price. Good set of documentation.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: Epio closed down on May 31st 2012 ]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gondor-io"&gt;
&lt;h3&gt;gondor.io&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;My day in gondor.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Their website has a nice list of features that they expect to have once they officially launch, but most of those features aren't available yet. The documentation is a little light, but the service has a lot of potential.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dotcloud-com"&gt;
&lt;h3&gt;dotCloud.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/"&gt;Deploying my Django application to dotcloud.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They have a ton of money ($10M), and with it, a ton of features. They are very developer friendly, but you need to be pretty technical, it isn't quite ready for beginners. Good set of documentation.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Full disclosure&lt;/strong&gt;: I now work for dotCloud]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apphosted-com"&gt;
&lt;h3&gt;AppHosted.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/"&gt;apphosted.com Django Hosting Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built with security, stability and scalability on their mind from the beginning. They have a solid offering, and they look to be targeting enterprise customers who will pay more for that peace of mind.  They are currently lacking some key features, which I'm sure they will be adding soon.  Good set of documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="djangozoom-com"&gt;
&lt;h3&gt;DjangoZoom.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/djangozoom-com-review/"&gt;DjangoZoom.com Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built to be fast and easy to use, still missing some key features, but I'm sure they will be available by the time they go live. Decent amount of documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heroku-com"&gt;
&lt;h3&gt;Heroku.com&lt;/h3&gt;
&lt;p&gt;Blog post: &lt;a class="reference external" href="http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/"&gt;Developers guide for running django apps on Heroku&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Originally built as a Ruby on Rails service, they have now added support for python. The service is still in beta, but it has a lot of potential. It looks a lot like what dotCloud is offering, with the ability to run code from almost any language, and a ton of different add-ons for lots of different services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="awards"&gt;
&lt;h2&gt;Awards&lt;/h2&gt;
&lt;div class="section" id="fastest-deployments"&gt;
&lt;h3&gt;Fastest Deployments:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt; - Zoom is right, it doesn't take long to configure your application and have it up and running on their servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easiest-to-use"&gt;
&lt;h3&gt;Easiest To Use:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://DjangoZoom.com"&gt;DjangoZoom.com&lt;/a&gt; - No command line interface needed, just a web browser, a project in a git repo that it has access too, and a few questions answered and your app is up and running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-features"&gt;
&lt;h3&gt;Most Features:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dotcloud.com"&gt;dotCloud.com&lt;/a&gt; - They raised $10 Million, and they are spending it on hiring people, buying companies, and building services. They have a bunch of services currently and they don't plan on stopping, their roadmap has everything on it, and I think if you give them enough time they will eventually have a service for everything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-developer-friendly"&gt;
&lt;h3&gt;Most Developer Friendly:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dotcloud.com"&gt;dotCloud.com&lt;/a&gt; - They give lots of features without handcuffing the developer. They are the only company with full database and shell access. They do a good job of offering the same type of service a developer could get if they built it themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="best-overall-value"&gt;
&lt;h3&gt;Best Overall Value:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ep.io"&gt;ep.io&lt;/a&gt; - This one is hard since most of the services don't have any pricing listed, but currently ep.io is in the lead, they offer reasonable prices with a nice Free tier. This allows developers to try out the service for FREE, as well as run smaller pet projects that they might not have tried before because they didn't want to pay for hosting. They have the second most features available, second to only dotCloud, and there service is pretty solid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easiest-project-setup"&gt;
&lt;h3&gt;Easiest Project Setup:&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://apphosted.com"&gt;apphosted.com&lt;/a&gt; - Their goal was to make it real easy to get your project up onto their servers without having to change your project, and they did that, there was very little if any changes I needed to make in order to get my application up on their servers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="django-feature-hosting-matrix"&gt;
&lt;h2&gt;Django Feature Hosting Matrix&lt;/h2&gt;
&lt;p&gt;To make things easier when comparing all of the different services I have built this matrix with all of the information I compiled from each of the services. I don't know the answers for all services, but I'll update it when I find out those answers. If you know the answers feel free to post a comment to let me know.&lt;/p&gt;
&lt;p&gt;I have included all of the new django services as well as google app engine and webfaction.com, a tradition hosting service. This should make it a little easier to see how these new services compare to other hosting options.&lt;/p&gt;
&lt;iframe width='775' height='500' frameborder='0' src='https://docs.google.com/spreadsheet/pub?key=0AtuyQoTrXCavdDdyQ1RCX29FcDhQeDgzMXp0NGpGeWc&amp;single=true&amp;gid=0&amp;output=html&amp;widget=true'&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="who-wins"&gt;
&lt;h2&gt;Who wins?&lt;/h2&gt;
&lt;p&gt;It is really hard to pick just one winner,  mainly because most of these services are still in beta and not quite finished yet. Also because each service is a little different, and it will depend on what you are trying to do. So, go out try them out, and let me know which one you picked.&lt;/p&gt;
&lt;p&gt;The real winner is us, the developers, and the python community in general. We now have a bunch of really cool services that will make our lives better, and that is awesome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you"&gt;
&lt;h2&gt;Thank you!&lt;/h2&gt;
&lt;p&gt;I want to thank all of the people who made these services, and gave me early access to their systems so that I could play around with them. I wish them the best of luck, and hope they all are really successful, and they are around for a long time.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Cochrane</dc:creator><pubDate>Mon, 06 Jun 2011 22:03:59 -0400</pubDate><guid>tag:kencochrane.net,2011-06-06:blog/2011/06/django-hosting-roundup-who-wins/</guid><category>django</category><category>hosting</category><category>apphosted</category><category>python</category><category>deployment</category><category>dotcloud</category><category>epio</category><category>gondor</category><category>djangozoom</category><category>heroku</category><category>paas</category></item><item><title>Deploying my Django application to dotCloud</title><link>http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/</link><description>&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;
&lt;p class="last"&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/"&gt;Deploying my Django application to dotCloud Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have recently wrote about &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-experiences-with-epio/"&gt;ep.io&lt;/a&gt; and &lt;a class="reference external" href="http://kencochrane.net/blog/2011/04/my-day-gondorio/"&gt;gondor.io&lt;/a&gt;, two new python/django hosting services that are currently in beta. Another new service that has just recently hit the scene and is causing a lot of waves is &lt;a class="reference external" href="http://dotcloud.com"&gt;DotCloud.com&lt;/a&gt;. DotCloud is a little different for a number of reasons. Their service isn't targeting any one technology stack like ep.io and gondor.io with Python/Django/wsgi.&lt;/p&gt;
&lt;p&gt;DotCloud's goal is to provide a bunch of different independent services that you can use as building blocks to build your application. If you need a database, take your pick from one of the many they support. Need an application that uses Django or Rails on the front end, and Java in the backend, that is fine, you can do that too. They realize that most developers don't stick to one standard technology stack for all of their applications, so this allows you the flexibility to use the best tool for the job. It also gives you a nice playground to try out new services and see how they run without having to install, configure and maintain the service just for testing.&lt;/p&gt;
&lt;p&gt;DotCloud was part of the Y Combinator summer class of 2010, and they just recently &lt;a class="reference external" href="http://techcrunch.com/2011/03/22/paas-dotcloud-raises-10m-from-jerry-yang-benchmark-and-others/"&gt;raised $10 Million&lt;/a&gt;. With access to that much money, I'm guessing they will be hiring a bunch of people pretty quickly, and I'm sure we will be seeing their services expand as well.&lt;/p&gt;
&lt;p&gt;Like all new technologies, I want to play with them, and see if they live up to all of the hype. I was lucky enough to get a beta invite a few weeks ago, and I have been playing with it since. I decided that the best way to test it out would be to deploy my blog, and see how hard it would be. Here are the steps that I took to get my django based blog up and running on DotCloud. I ran into a few issues and I made sure that I put those in as well, so that if you get the same issue you can see how I solved it.&lt;/p&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Before I get started with any new service the first thing I usually do is look at the documentation. DotCloud has a nice list of documents along with some tutorials on how to get started. These 3 documents were the ones that I used the most.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/django/"&gt;http://docs.dotcloud.com/tutorials/django/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/components/mysql/"&gt;http://docs.dotcloud.com/components/mysql/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/firststeps/"&gt;http://docs.dotcloud.com/tutorials/firststeps/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-steps"&gt;
&lt;h2&gt;First Steps:&lt;/h2&gt;
&lt;p&gt;Like all cool services these days, dotcloud uses a python based CLI, so before we can get started we need to install the dotcloud client and configure it so that we can start using it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# create my dotcloud virtual environment.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv dotcloud

&lt;span class="c"&gt;# install dotcloud client using pip&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install dotcloud

&lt;span class="c"&gt;# create our application namespace called kencochrane&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud create kencochrane

&lt;span class="c"&gt;#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted&lt;/span&gt;
&lt;span class="c"&gt;#&amp;lt;key goes here&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the client all setup, and an application namespace, now we can start building our service. I have forked my blog repository on bitbucket so that I could make dotcloud specific changes to it and not effect my original repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# go into projects directory&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/projects

&lt;span class="c"&gt;# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally&lt;/span&gt;
hg clone https://bitbucket.org/kencochrane/kencochranenet_dotcloud kencochrane_dotcloud

&lt;span class="c"&gt;# go into the new directory.&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;kencochrane_dotcloud
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading through the documentation tells me that I need to create a wsgi.py file and put in the root of my project. Using &lt;a class="reference external" href="http://docs.dotcloud.com/tutorials/django/#djangowsgipy"&gt;http://docs.dotcloud.com/tutorials/django/#djangowsgipy&lt;/a&gt; as a template, I created my wsgi.py file below. I had issues with the default template and I needed to add a directory to the sys.path so that wsgi could find my django apps correctly. Here is my finished file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c"&gt;# Ken added this, only thing that is different from the example template (not counting settings file name)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mysite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysite.settings&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt;
&lt;span class="n"&gt;djangoapplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;djangoapplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DotCloud uses &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/#requirements-files"&gt;PIP requirements files&lt;/a&gt; to manage your project dependencies. We already have our pip requirements file where it needs to be and named correctly so we don't need to do anything, but if we didn't have one, we would need to create one and put it in the root, and call it requirements.txt&lt;/p&gt;
&lt;p&gt;DotCloud requires that we put all of our static media in a directory called 'static' in the root of our project.  Because my static media is already found elsewhere, I need to create a directory called static and move all of my files into it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# we need to create a static directory to serve static media from (/static) .&lt;/span&gt;
mkdir -p static
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you use the django admin then you will need to create a postinstall script that will create a symlink under static for your django admin media files. Here is what mine looks like. If you use this as a template, don't forget to change the DJANGO_SETTINGS_MODULE variable to match your project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="c"&gt;# To import anything under django.*, we must set this variable.&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysite.settings&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Import the admin module. The media directory is right under it!&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.admin&lt;/span&gt;
&lt;span class="c"&gt;# Retrieve the absolute path of the admin module.&lt;/span&gt;
&lt;span class="n"&gt;admindir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contrib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Add /media behind it.&lt;/span&gt;
&lt;span class="n"&gt;mediadir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admindir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Compute the path of the symlink under the static directory.&lt;/span&gt;
&lt;span class="n"&gt;staticlink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;admin_media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# If the link already exists, delete it.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;islink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staticlink&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;staticlink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Install the correct link.&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mediadir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;staticlink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make the script executable.&lt;/span&gt;
chmod +x postinstall
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we changed our location of our static media, we need to remember to update our settings.py file with the new settings. Here are my changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# edit settings.py file to the following.&lt;/span&gt;
&lt;span class="n"&gt;ADMIN_MEDIA_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/admin_media/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# change MEDIA_URL&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Deployment&lt;/p&gt;
&lt;p&gt;Now that we have our application's project structure all setup and configured the way dotcloud wants it, we can start up some services and then deploy our app. If you want to find out what services they have available, you can run the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# find out which services that are available.&lt;/span&gt;
dotcloud deploy -h

You can chose among the following services:
  java          host any Java servlet &lt;span class="o"&gt;(&lt;/span&gt;also Clojure, Play!, and much more&lt;span class="o"&gt;)&lt;/span&gt;
  mysql         the worlds most popular open &lt;span class="nb"&gt;source &lt;/span&gt;database
  nodejs        run JavaScript processes &lt;span class="o"&gt;(&lt;/span&gt;including web apps&lt;span class="o"&gt;)&lt;/span&gt;
  php           host any PHP web app: Drupal, WordPress...
  php-worker    run background PHP processes
  postgresql    the worlds most advanced open &lt;span class="nb"&gt;source &lt;/span&gt;database
  python        host any Python/WSGI web app: Django, Pylons, Web2py...
  python-worker run background Python processes
  rabbitmq      AMQP message queue server
  redis         advanced key-value store
  ruby          host any Ruby/Rack web app: Rails, Sinatra...
  ruby-worker   run background Ruby processes
  smtp          authenticated SMTP relay to send e-mails reliably
  static        host static HTTP content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need a database for our blog, since it was originally setup to use mysql, lets use that one here. Start up a new mysql service called 'kencochrane.mysql'&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# start up the database service.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud deploy -t mysql kencochrane.mysql
Created &lt;span class="s2"&gt;&amp;quot;kencochrane.mysql&amp;quot;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's make sure that it was created, and find out some more about our new database instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# get the information about our new service&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud info kencochrane.mysqlcluster: wolverine
config:
    mysql_password: password_was_changed
created_at: 1303671517.96066
name: kencochrane.mysql
namespace: kencochrane
ports:
-   name: ssh
    url: ssh://dotcloud@mysql.kencochrane.dotcloud.com:3912
-   name: mysql
    url: mysql://root:password_was_changed@mysql.kencochrane.dotcloud.com:3913
state: running
&lt;span class="nb"&gt;type&lt;/span&gt;: mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see from above, we have a mysql database, it is running, and it lets us know the ssh and mysql urls and ports, along with the root password. Lets create our database. To do that we will login to the server and run some sql commands. (the sensitive information has been changed)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# connect to dotcloud mysql server instance&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run kencochrane.mysql -- mysql -u root -p

&lt;span class="c"&gt;# mysql -u root -p&lt;/span&gt;
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or &lt;span class="se"&gt;\g&lt;/span&gt;.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# create the user and database and give user permissions to database.&lt;/span&gt;

Type &lt;span class="s1"&gt;&amp;#39;help;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;\h&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;help. Type &lt;span class="s1"&gt;&amp;#39;\c&amp;#39;&lt;/span&gt; to clear the current input statement.

mysql&amp;gt; create database blogdb;
Query OK, 1 row affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; create user &lt;span class="s1"&gt;&amp;#39;blog_username&amp;#39;&lt;/span&gt; identified by &lt;span class="s1"&gt;&amp;#39;strong_password&amp;#39;&lt;/span&gt;;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.05 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; grant all on blogdb.* to &lt;span class="s1"&gt;&amp;#39;blog_user&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.04 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; flush privileges;
Query OK, 0 rows affected &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;;Bye
Shared connection to mysql.kencochrane.dotcloud.com closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have our database all setup, we need to change our settings file so that it has all of the new information. Here is what mine looks like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# update your settings.py file.&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blogdb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blog_username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;strong_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mysql.kencochrane.dotcloud.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3913&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further it is important to know the following. Dotcloud will pay attention to your .hgignore files. If you have a settings file in your .hgignore file so that it doesn't get saved in the repo, it will not push those changes up to the cloud. You will need to remove it from the .hgignore in order to get those files out there. It is also import to remember that only changes that are committed are pushed, so don't forget to commit your changes. If you wanted to be tricky you could use a post install script to pull down the file from a secure location and install it that way, if you want to make things super secure.&lt;/p&gt;
&lt;p&gt;Now that we have that behind us, lets get going. First we need to create a new python service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# deploy a new python app called kencochrane.blog&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud deploy --type python kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Service is now created so all we have to do is push our application to the new service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# push out your changes to the server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push kencochrane.blog .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now your code is out in the cloud, you just need to sync your database and run the migrations to get your database all setup, and you should be good to go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# sync the database&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run kencochrane.blog python current/mysite/manage.py syncdb

&lt;span class="c"&gt;# we use south so run migrate&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run kencochrane.blog python current/mysite/manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;now it works, just go to &lt;a class="reference external" href="http://blog.kencochrane.dotcloud.com/"&gt;http://blog.kencochrane.dotcloud.com/&lt;/a&gt; to see.&lt;/p&gt;
&lt;p&gt;If you need to look at the logs to see how it is going you can do it two ways. The first way will tail your logs for you to your console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud logs kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Open up a shell&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud ssh kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# nginx access and error logs.&lt;/span&gt;
/var/log/nginx/&amp;lt;app_name&amp;gt;.&lt;span class="o"&gt;{&lt;/span&gt;access,error&lt;span class="o"&gt;}&lt;/span&gt;.log

&lt;span class="c"&gt;# wsgi error logs&lt;/span&gt;
/var/log/supervisor/uswgi.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# restart the service&lt;/span&gt;
dotcloud restart kencochrane.blog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DotCloud runs on Amazon's EC2 service, and last week while I was doing my testing, I was getting a bunch of errors, I wasn't sure if the errors were because this is a beta service, and they are still bugs in it, or if it was related to the amazon issues. Either way, I listed those errors below incase anyone else gets them. If I got the error I would just run the command again until it worked, sometimes it took 3 times before everything worked fine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# attempt 1&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push kencochrane.blog .DotCloud service unavailable &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No JSON object could be decoded&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.
Please try again later. If the problem persists, send an email to support@dotcloud.com.

&lt;span class="c"&gt;# attempt 2&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push kencochrane.blog .
&lt;span class="c"&gt;# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog&lt;/span&gt;
&lt;span class="c"&gt;# hg&lt;/span&gt;
remote: Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;[uploader.dotcloud.com]:1060,[174.129.15.77]:1060&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching &lt;span class="k"&gt;for &lt;/span&gt;changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added 1 changesets with 3 changes to 3 files
Scheduling build
Fetching logs...
Build started...
mkdir: cannot create directory &lt;span class="sb"&gt;`&lt;/span&gt;126:afdea9036e83&lt;span class="s1"&gt;&amp;#39;: File exists&lt;/span&gt;
&lt;span class="s1"&gt;Failed to fetch tarball (&amp;lt;type &amp;#39;&lt;/span&gt;exceptions.ValueError&lt;span class="s1"&gt;&amp;#39;&amp;gt;: Failed to extract the tarball, abort.)&lt;/span&gt;
&lt;span class="s1"&gt;Build finished.&lt;/span&gt;
&lt;span class="s1"&gt;Shared connection to blog.kencochrane.dotcloud.com closed.&lt;/span&gt;

&lt;span class="s1"&gt;# 3rd time is a charm, it finally works.&lt;/span&gt;
&lt;span class="s1"&gt;$ dotcloud push kencochrane.blog .# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog&lt;/span&gt;
&lt;span class="s1"&gt;# hg&lt;/span&gt;
&lt;span class="s1"&gt;remote: Warning: Permanently added &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;uploader.dotcloud.com&lt;span class="o"&gt;]&lt;/span&gt;:1060,&lt;span class="o"&gt;[&lt;/span&gt;174.129.15.77&lt;span class="o"&gt;]&lt;/span&gt;:1060&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching &lt;span class="k"&gt;for &lt;/span&gt;changes
no changes found
Scheduling build
Fetching logs...
Build started...
.
. all of the files &lt;span class="o"&gt;(&lt;/span&gt;trimmed &lt;span class="k"&gt;for &lt;/span&gt;space&lt;span class="o"&gt;)&lt;/span&gt;
.
Fetched code revision 126:afdea9036e83
.
. all the requirments &lt;span class="o"&gt;(&lt;/span&gt;trimmed &lt;span class="k"&gt;for &lt;/span&gt;space&lt;span class="o"&gt;)&lt;/span&gt;
.
Cleaning up...
Reloading nginx configuration: nginx.
uwsgi: stopped
uwsgi: started
Build finished.

Shared connection to blog.kencochrane.dotcloud.com closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion:&lt;/h2&gt;
&lt;p&gt;Setting up my blog on DotCloud was fairly straightforward, the documentation helped guide me along the way. I did run into a few road blocks that stopped me in my tracks for a little while, but after some digging I was able to get past those issues. Hopefully this post will help you overcome the same issues I had, and make your deployment a little more smooth.&lt;/p&gt;
&lt;p&gt;The service is very flexible, which is going to be good for most developers, but with the added flexibility they added some complexity that doesn't exist on the other services. For example ep.io and gondor.io handle all database and user creation for you, so you don't need to know what commands to run to create the database and the user, and they also automatically add the database connection strings to your settings file. I for one don't mind the extra complexity considering I'm going to get the ability to have direct access to my database so that I can do what I want. Others, might not want to worry about that. If you are building an application for a client that isn't very tech savy, the more things that are automated the better.&lt;/p&gt;
&lt;p&gt;DotCloud is still in beta, and if you take a look at their &lt;a class="reference external" href="http://docs.dotcloud.com/components/roadmap/"&gt;roadmap&lt;/a&gt;, they have very ambitious goals. I for one can't wait to see how they progress. I have only gone into a few of the many things that dotcloud has to offer, I recommend that you try it out for yourself and leave me a comment letting me know how you liked it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-time"&gt;
&lt;h2&gt;Next time:&lt;/h2&gt;
&lt;p&gt;I have been lucky enough to get a sneak peak at &lt;a class="reference external" href="http://apphosted.com"&gt;http://apphosted.com&lt;/a&gt; a python/django hosting service similar to gondor.io and ep.io. I'm currently playing with the service now, once I'm finished I'll post my findings.&lt;/p&gt;
&lt;div class="section" id="update"&gt;
&lt;h3&gt;Update:&lt;/h3&gt;
&lt;p&gt;Read how this service stacks up against other services like it in my &lt;a class="reference external" href="http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/"&gt;Django hosting roundup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I &lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/"&gt;accepted a job with dotCloud&lt;/a&gt;. I plan on keeping this blog post up to date and impartial. If you think there are any errors, please let me know in the comments.&lt;/p&gt;
&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;
&lt;p class="last"&gt;&lt;a class="reference external" href="http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/"&gt;Deploying my Django application to dotCloud Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ken Cochrane</dc:creator><pubDate>Tue, 26 Apr 2011 07:07:55 -0400</pubDate><guid>tag:kencochrane.net,2011-04-26:blog/2011/04/deploying-my-django-application-to-dotcloud/</guid><category>django</category><category>python</category><category>deployment</category><category>hosting</category><category>dotcloud</category><category>paas</category></item></channel></rss>